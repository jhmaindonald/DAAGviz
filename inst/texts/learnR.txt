                             se                                                                                          m m    a d                                to                            g           a                 he efu
                                 ctiopanetrol                                   ka                                                  d                     p                                                                      r     l
                                                                                                                                                                                                                                          e roliwa
                                                                                                                    file
                                                                                                                                                                             prlo cespis lefetd                                                    s aus
                                     n ls                                                                                                        plo     me aram                                                              sto e ve    tim             t
             ctio                                                                  ge                                   s la as nd                                              y t rint line
             t                                                                                             row fem
                                                                                                                               c                     ts    th e
                                                                                                                                                                             li              s m ho
                                                                                                                                                                                              arde                               red cto     e        e r
           ch ype ns
             a    le                                                                                  tot layernguaagles                                   usod ters
                                                                                                                                                            e          s   t                 v op ice                                    rs
                                                                                                                                                                                                                                        co      s inc r
                                                                                                                                  e                              r t h r                   c sim tails
                                                                                                                                                                                              a                         lo
             rac
               fa
                   ter l
                  len a
                        g
                           ve
                           v
                                  l     w
                                          d
                                        fun a                                                              al ye
                                                                                                                   ar te
                                                                                                                             no s r
                                                                                                                                  t i
                                                                                                                                     me
                                                                                                                                      c
                                                                                                                                        ffec
                                                                                                                                            ts
                                                                                                                                                   we
                                                                                                                                                      b
                                                                                                                                                        f
                                                                                                                                                        s
                                                                                                                                                         o
                                                                                                                                                         va
                                                                                                                                            pa o rm w urasndo
                                                                                                                                                    neb indong m
                                                                                                                                                          l  j     c
                                                                                                                                                                         a
                                                                                                                                                                               w   e
                                                                                                                                                                                                  p le
                                                                                                                                                                                                r otack      s
                                                                                                                                                                                                             c
                                                                                                                                                                                                              i
                                                                                                                                                                                                               l
                                                                                                                                                                                                                d   n ia h
                                                                                                                                                                                                                        r es
                                                                                                                                                                                                                  ua s ble
                                                                                                                                                                                                                      log
                                                                                                                                                                                                                            r lin
                                                                                                                                                                                                                            si
                                                                                                                                                                                                                               lev
                                                                                                                                                                                                                               s ls
                                                                                                                                                                                                                                t
                                                                                                                                                                                                                               on
                                                                                                                                                                                                                                  a
                                                                                                                                                                                                                                   e
                                                                                                                                                                                                                                    rt
                                                                                                                                                                                                                                     li
                                                                                                                                                                                                                                         e s
                                                                                                                                                                                                                                             yst lu
                                                                                                                                                                                                                                              cla
                                                                                                                                                                                                                                                     e
                                                                                                                                                                                                                                                              n
                                                                                                                                                         av lue
                                                                                                                                                                                                           co asse                      sts ss
 tab requ ctorth uesindo                                                                                                  fitt e daa vaericreta            e                                                                       gu a
       l         i r e     s                   a  c w                                                                            e     d    p     c  hv e  g   h     an te                             m     mm s                       i
                                                                                                                                                                                                                                         clic tal
                                                       s vi
                                                                                                              c
                                                                                                                                 file         rno  c
                                                                                                                                                                                       co
                                                                                                                                                                                                      c   o
                                                                                                                                                                                                             reg ls
                                                                                                                                                                                                                   on                    v       l rg  us
                                                               s                                                             s                            k
                                                                                                                                                       ecctoel ce
 res e m d in                                                                                                                                                                            l                                                  a     a
                                                                                                                orr
                                                                                                                    e
                                                                                                                                tan s oetss r p
                                                                                                                                               t
                                                                                                                                                                                          u      err ur de
                                                                                                                                                                                                         re                             ins
                                                                                                                                                                                                                                             k
                                              ob n tio
 s ult ean                           for                         ua                                                    l                d        a       e           fa                     m
                                                                                                                                                                                            e       or ve ls                        wo ria         t
                                                                                                          a              a                                                                     q        c
                       gra jeal
      d                                    m                             l                                                                 a r  d  t
                                                                                  tn a                      lte s tion                               isti                 cto p                  uiv alls          f                ax r k s b       io ers
                                                                                                                                                                                                                    a
 ts ista austra                                                    m       isa co                               r
                                                                                                                                                  fol
                                                                                                                                                          c                     r                            s
             n             l i
                                                 ati
                                                      o                   a         t i  ma lum                   na cale ex dis al set
                                                                                                                                           a
                                                                                                                                                                                      ag s alen es lse tru is o pa
                     mo phctsysis        pa                                             o                              t
                                                                                                                                                                                                                                             J H Maindonald
     us                        a                                                            l                                                                                t
               c
                                                                                                                                                      lowp
  he efu         e row   d     i             ram        n                     t r          n  e  pa n av                 i ve                mp            l a                 i
     r    l                e    c   a
                                 s us
                                  s      fra        ete                           i x                th          a   i            i ma an es c     l      in      y        t  g
                                                                                                                                                                                 ng ev et t gra sion fit em utpu
                                                                                                                                                                                      s        olu
 sto e ve        tim         l    f i  c tra m           r                                              d  e           l                    g      d        r                e                            inp ph de vario et
                                                                                                                                                                                                             ply
                                                                                                                                                                                                              ut                  ns us ho
                                      e
                                      g  o   l i                                                                                                                                              res me
     red cto
                                                                                                                         ab nu e c or an xt                                                                                             ity
                     e
 r co rs syincl rrorsan                                         n  a
                                                                    na
                                                                           m                        se fau le m hanlab ve
                                                                                                        l e                                    e           g        e         r
                                                                                                                                                                                                  ult ap
                                                                                                                                                                                                      s              p o
                                                                                                                                                                                                                                        line      no
                                  s d  u                               m       e                            c            l                        r                     l        s                                            pa                       r           le
                                                                                                              tio t                                 ic es s co ion                                                         int
                                                                                                                                                                                                                                 s               c
            lor l
                               us udree e
                                                                                                                                                                                 n                                                                 o          c
                   lev
ion                                                                        es                                     n
                                                                                                                                           fun
                       e
                      ine tem e spec
                                  in             s       i f                                 fr a
                                                                                                                                                           se pa tro
                                                                                                                                                                                                                                             f        m
                             s cla                 u         y                   g  d                                                                                                                                                          i
                                                                                                                                                                                                                                    cka
    c     l og    s ls
                    t a              ss ad mm                                           ista      m                                                               ctio ne l
                                                                                                                                                                           n ls                                                                 l es          r f all
                                                                                                                                                                                                                                                               o  e
                       list
                             s                    d                 c                                es                                                                                                                                                             m
                                                                                                                                                    ctio
 co lasse               rt                                             o          e           n                                             t y
                                                                                                                                                                                                                                              ge
                                                                                                                                                                                                                                                   l
                                                                                                                                                                                                                                                        l       w
     mm s            gu a cha ed ar y eff xa ce
                         i                                                    i cie                s                                   c  ha e le p                      ns                                                                 tot ye  a                a
 c inst
 od on                    v   a
                                     rgu ng
                                                      e                t            nts mp                                                      ra               v
  l ie
 ve lsc k alla use
 lls s fa
              t i o
                      w
                      a
                    n rs
                                 r
                         ork iab en
       es lse tru xis o pac s
                                  s le
                                            m
                                                                g g
                                                        t m catte hts
                                                                   plo
                                                                            w    e  i g
                                                                                           s ize   l e
                                                                                                                                                   f
                                                                                                                                                    c
                                                                                                                                                     a
                                                                                                                                                       ter
                                                                                                                                                      len va
                                                                                                                                                                   e  l
                                                                                                                                                                                  d
                                                                                                                                                                                fun a                                                            al ye
  gra sio fit em utp e ba                                            atr rpl
                                                                           i            o
                                                                                                                            t a             req ct gth luewind
                                                                                                                                                           o                     c
 np ph ndenvario eth ut s crease qqces t                                                      pl                se re ble m uired rs
                                                                                                                                                                         i n
                                                                                                                                                                             a    s ows v
                                                                                                                                                                                                     i                                                                   f
     ut                                                                      q               a ott         ele rie su
                                                                                                                 m          s           l t       e   a                      fo                       su                                            co
                                                                                                                                                                                                                                                       rr
         po
              line     sityus od ear ted
                                   n
                                   le
                                           s     g    ch                              l     timstr ma
                                                                                                  o
                                                                                                             ho
                                                                                                                     e      b ing                        n                        r
                                                                                                                                                                         graobnjealtio
                                                                                                                                                                                     m    a
                                                                                                                                                                                                           a l isa co
                                                                                                                                                                                                                                    ta         a  lte
                                                                                                                                                                                                                                                      r
                                                                                                        sm p
                                      orm rap di
                                                                                                                                                           t
                                                                                 mo att b es uctukes u nts dist aus                                                                                       m
              int
                  s                                     h   s          r                      i  a              i    s                       a               r                              t                        t im   a
                                                                                                                                                                                                                                  lu
                          c                                                                                       c                                                                                          a                         m
                                                                                                                                                                         mo ph ctyssisn
   ac                             co al
                                      m
                                                                         ec delin cesis re ed use nc ralia par ion
                                                                                               g p                 lef he fu e ow                                                      am
                                                                                                                                                                                                                         o     l
                                                                                                                         t        r           l                             a
      ka                                                                                                                                                                                                         trix ne pat n av
                                                                        pa tor                                                       e                                  s                   e                                              h
                                file ma add
                                                                                     plo
                                e
                            r f all
                             o                                ots                                      rin lin s v                                                            us
                                                                                                                                                                                  t
                                                                                                                                                                                              de icsf fra
                                                                                                                                                                                              ter
                                  m                                me ram y                        t        t                 t            e                                        r
                              w                                          t          e                               e                                  tim                           a
                                                                                                                         es ilities
                     ge               s la s nd                                                                            t                                                                                                                 de
                                    a             c        pl              h           t                                 a   i  ore c
                                                                                                                                                          e                   e        li
                                                                                                              de
                                                                                                                 t a
                                                                                                                            r  m       d tors
                                                                                                                                           c                        s     inc rror an
                                                                                                                                                                                       s               n  na
                                                                                                                                                                                                             m                           se fa
                                                                                                                                                                                                l u igcoud me
                                                                                                                                                                               l                         a
                                                                                                 re lum var ootace k
                               tot layernguaagles                        usod liserts
                                                                                                                                                                                  Learning and Exploring R
                                                                                                 c        sim ils                                                                                          m     e                           lec
                                   al ye              e                  fo
                                                                              er thr
                                                                                       a                     s  p
                                                                                                                                 a           olo
                                                                                                                                          lev n
                                                                                                                                                                       yst ud s
                                                                                                                                                                                      e                                                             tio
                                          ar te                p             r m         unsd                  i  len ia h                    e     r lin                    em pe                           es
                                                                       va                                           a
                                                   cts                              w                           d                         s ls                  e                               c
                                                                  a
                                                                                                                                                                                                   sin ree
                                                                                                                                           t
                                                                 we
                                                   no rms           b s                                                           re s       a
                                                                                                                                             l rt                   n
                                                                                                                                                                    s cla                 su ify                      d
                                                                                                                                                                                                                                 frag
                                                                                                                                               o                                             m                           i
                                                                      oneb irnadnogom                             ua s ble
                                                                                                                                 c                                           s                                             s
                                               effe                          l      c          we                                  l              g         l i s              s      a                                                me
                                                                              j                                       g
                                                      tice
                                                                    d v av lue  e     r                                     co sse   asio                         t                      d       m         c                 ta
                                                fitt                      e                                                      m
                                                                                                                                                        ic tal
                                                                                                                                              s           gu s a chaded ar y oeff exa nce s
                                                                                                                                                                i
                                                                                                                                                                      us
                                                                                                                                                               l                                                                          s
                                                                 o
                                                      ed pr chaevaegchaerciantecaete
                                                                 n c      c     t
                                                                                                             reg ls
                                                                                                                    c
                                                                                                                      mo mon                              k      a
                                                                                                                                                                 v          r g            ng
                                                                                                                                                                                                                 icie
                                                                                                                                                                                                                      n        m
                                                                                     l                                                                                            u                                      t
                                     co
                                            file   s                             o                                                                                t a                          e                                    p
                                                                           s
                                                                                                              err ur de
                                                                                                                  o                                  ins                                                        w          ss
                                                                                                                        es tes
                                        rre          tan s o           est k r p
                                                                                                                            v                                                                                                lot
                                            l              d    t a        e         f a       c          e         r                  l s                                                                         e
                                                                                                                                                                    io ers
                                                                                                                              e
                                                                                                                                                          wo ria me                                                              ize le
              c                  a l          a  t            a ifo t                     c                 q           c a                                         r  k        b             n            s          ig
        tn a

Copyright © 2018 J H Maindonald
This text is dual licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License
(CC-BY-SA) and the GNU Free Documentation License (GFDL).
December 2018
S has forever altered the way people analyze, visualize, and manipulate data... S is
an elegant, widely accepted, and enduring software system, with conceptual integrity,
thanks to the insight, taste, and effort of John Chambers.
From the citation for the 1998 Association for Computing Machinery Software award.
A big computer, a complex algorithm and a long time does not equal science.
Robert Gentleman

   Contents
1  Getting started with R      13
2  The R Working Environment         29
3  Examples — Data analysis with R          43
4  Data Objects and Functions        61
5  Data Input and Storage       87
6  Data Manipulation and Management            99
7  Graphics – base, lattice, ggplot2, rgl, googleVis. . . 113
8  Regression with Linear Terms and Factors         145
9  A Miscellany of Models & Methods          177
10 Brief Notes on Text Mining       199
11 ∗ Leveraging R Language Abilities        205
A  ∗R  System Configuration       213

  4
B The R Commander Graphical User Interface 219
C Color Versions of Selected Graphs  223
D Bibliography      227
  Index of Functions     229
  Index of Functions     235

Introduction
6
## Error in knitrSet(): could not find function
"knitrSet"
## Error in knitrSet(w = 3, h = 3.15): could not
find function "knitrSet"                                                 CRAN is the primary R ‘reposi-
 Note the following web sites:                                           tory’. Several additional package
                                                                         repositories supplement what is
 CRAN (Comprehensive R Archive Network):                                 available from CRAN. Note in par-
 http://cran.r-project.org                                               ticular the Bioconductor repository
 Obtain R and R packages from a CRAN mirror in the local region.         (http://www.bioconductor.org),
                                                                         with packages that cater for high
 An Australian mirror (one of two) is: http://cran.csiro.au/
                                                                         throughput genomic data.
 R homepage: http://www.r-project.org/
 For various useful links click, from an R session that uses the GUI,
 on the menu item R help. Then, on the browser window that pops
 up, look under Resources
Commentary on R
General
R has extensive graphical abilities that are tightly linked with its     R is free to download from a CRAN
analytic abilities. A new release of base R, on which everything else    site (see above). It runs on all common
is built appears every few months.                                       types of system – Windows, Mac,
                                                                         Unix and Linux.
    The major part of R’s abilities for statistical analysis and for
specialist graphics comes from the extensive enhancements that the
packages build on top of the base system. Its abilities are further
extended by an extensive range of interfaces into other systems1         1
                                                                           These include Python, SQL and
    The main part of the R system – base R plus the recommended          other databases, parallel computing
                                                                         using MPI, and Excel.
packages – is under continuing development.
The R user base
Statistical and allied professionals who wish to develop or require       The R Task Views web page (http:
access to cutting edge tools find R especially attractive. It is finding //cran.csiro.au/web/views/)
use, also, as an environment in which to embed applications whose        notes, for application areas where R is
                                                                         widely used, relevant packages.
primary focus is not data analysis or graphics.
Getting help
 Note the web sites:
 Wikipedia:
 http://en.wikipedia.org/wiki/R_(programming_language)
 R-downunder (low traffic, friendly):
 http://www.stat.auckland.ac.nz/mailman/listinfo/r-downunder
 Stackoverflow
 http://stackoverflow.com/questions/tagged/r.
    The r-help mailing list serves, especially for users with a techni-  Details of this and other lists can be
                                                                         found at: http://www.r-project.
                                                                         org. Be sure to check the available
                                                                         documentation before posting to r-
                                                                         help. List archives can be searched for
                                                                         previous questions and answers.

                                                                                                                    7
cal bent, as an informal support network. The R community expects
users to be serious about data analysis, to want more than a quick
cook-book fix, and to show a willingness to work at improving sta-
tistical knowledge.
     Novices will find the low traffic R-downunder list more friendly
and helpful than the main R mailing list. It has among its subscribers
some highly expert individuals.
The origins and future of R
The R system implements a dialect of the S language that was de-          Open source systems that might have
veloped at AT&T Bell Laboratories for use as a general purpose            been the basis for an R-like project
scientific language, but with especial strengths in data manipulation,    include Scilab, Octave, Gauss, Python,
                                                                          Lisp-Stat and now Julia. None of
graphical presentation and statistical analysis. The commercial S-        these can match the range and depth
PLUS implementation of S popularized the S language, giving it a          of R’s packages, with new packages
large user base of statistical professionals and skilled scientific users building on what is already there.
into which R could tap.                                                   Julia’s potential has still to be tested.
     Ross Ihaka and Robert Gentleman, both at that time from the
University of Auckland, developed the initial version of R, for use
in teaching. Since mid-1997, development has been overseen by a
‘core team’ of about a dozen people, drawn from different institu-
tions worldwide.
     With the release of version 1.0 in early 2000, R became a serious    More than 6000 packages are now
tool for professional use. Since that time, the pace of development       available through the CRAN sites.
has been frenetic, with a new package appearing every week or two.
     The R system uses a language model that dates from the 1980s.        R code looks at first glance like C
Any change to a more modern language model is likely to be evo-           code. The R interpreter is modeled on
                                                                          the Scheme LISP dialect.
lutionary. Details of the underlying computer implementation will
inevitably change, perhaps at some point radically. Among more
recent language systems that have the potential to provide R-like         Julia strongly outperforms R in execu-
functionality, Julia (http://julialang.org) seems particularly            tion time comparisons that appear on
interesting.                                                              the Julia website.
Interactive development environments – editors and more
                                                                          Note also Emacs, with the ESS
RStudio (http://rstudio.org/) is a very attractive run-time               (Emacs Speaks Statistics) addon.
environment for R, available for Windows, Mac and Linux/Unix              is This is a feature-rich environment
systems. This has extensive abilities for managing projects, and for      that can be daunting for novices. It
working with code. It is a highly recommended alternative to the          runs on Windows as well as Lin-
                                                                          ux/Unix and Mac. Note also, for
GUIs that come with the Windows and Mac OS X binaries that are
                                                                          Windows, the Tinn-R editor (http:
available from CRAN sites.                                                //www.sciviews.org/Tinn-R/).
Pervasive unifying ideas
                                                                          Expressions can be:
Ideas that pervade R include:
                                                                             evaluated (of course)
   Generic functions for common tasks – print, summary, plot, etc.           printed on a graph (come to think of
   (the Object-oriented idea; do what that “class” of object requires)       it, why not?)
   Formulae, for specifying graphs, models and tables.
                                                                          There are many unifying compu-
                                                                          tational features. Thus any ‘linear’
                                                                          model (lm, lme, etc) can use spline
                                                                          basis functions to fit spline terms.

8
   Language structures can be manipulated, just like any data object
   (Manipulate formulae, expressions, function argument lists, . . . )
   Lattice (trellis) and ggplot graphics offer innovative features that
   are widely used in R packages. They aid the provision of graphs
   that reflect important aspects of data structure.
Note however that these are not uniformly implemented through R.
This reflects the incremental manner in which R has developed.
Data set size
R’s evolving technical design has allowed it, taking advantage of        An important step was the move,
advances in computing hardware, to steadily improve its handling of      with the release of version 1.2, to a
large data sets. The flexibility of R’s memory model does however        dynamic memory model.
have a cost2 for some large computations, relative to systems that       2
                                                                           The difference in cost may be small
process data from file to file.                                          or non-existent for systems that have a
                                                                         64-bit address space.
Good planning, informed analysis and reliable software
While the R system is unique in the extent of close scrutiny that it     Take particular care with newer or
receives from highly expert users, the same warnings apply as to any     little-used abilities in contributed
statistical system. The base system and the recommended packages         packages. These may not have been
                                                                         much tested, unless by their devel-
get unusually careful scrutiny.                                          opers. The greatest risks arise from
    The scientific context, has crucial implications for the experi-     inadequate understanding of the
ments that it is useful to do, and for the analyses that are meaningful. statistical issues.
Available statistical methodology, and statistical and computing soft-
ware and hardware, bring their own constraints and opportunities.
    Statistics of data collection encompasses statistical experimental   The same general issues arise in field,
design, sampling design, and more besides. Planning will be most         industrial, medical, biological and
effective if based on sound knowledge of the materials and proce-        laboratory experimentation. The aim
                                                                         is, always, is to get maximum value
dures available to experimenters.                                        from resources used.
    Once the data have been collected, the challenges are then those
of data analysis and of interpretation and presentation of results. For
this, software that is of high quality must be complemented with the
critical resources of well-trained and well-informed minds.
Documentation and Learning Aids
R podcasts: See for example http://www.r-podcast.org/
Official Documentation: Users who are working through these
notes on their own should have available for reference the document
“An Introduction to R”, written by the R Development Core Team.
To download an up-to-date copy, go to CRAN.
Web-based Documentation: * See Computerworld’s list (July 11
2018) of "Top R language resources to improve your data skills":
https://bit.ly/2SPN0gq * Go to http://www.r-project.

                                                                                                9
org and look under Documentation. There are further useful links    Also http://wiki.r-project.
under Other.                                                        org/rwiki/doku.php
The R Journal (formerly R News): Successive issues are a mine of
useful information. These can be copied down from a CRAN site.
Books: See http://www.R-project.org/doc/bib/R.bib
for a list of R-related books that is updated regularly. Here, note
especially:
Maindonald, J. H. & Braun, J. H. 2010. Data Analysis & Graphics
Using R. An Example-Based Approach. 3rd edn, Cambridge Univer-
sity Press, Cambridge, UK, 2010.
http://www.maths.anu.edu.au/~johnm/r-book.html


                                                                                                                11
Notes for Readers of this Text
Asterisked Sections or Subsections
Asterisks are used to identify material that is more technical or spe-
cialized, and that might be omitted at a first reading.
The DAAGviz package
                                                                          Note that DAAGviz is not available on
This package is an optional companion to these notes. You can in-         CRAN. It collects scripts and datasets
stall it, assuming a live internet connection, by typing:                 together in a way that may be useful
                                                                          to course participants. Those materials
devtools::install_github('jhmaindonald/DAAGviz')                          are also available separately.
    Once attached, this package gives access to:                          Assuming that the DAAGviz package
                                                                          has been installed, it can be attached
   Scripts that include all the code. To access these scripts do, e.g.    thus:
   ## Check available scripts                                             library(DAAGviz)
   dir(system.file('scripts', package='DAAGviz'))
   ## Show chapter 5 script
   script5 <- system.file('scripts/5examples-code.R',
                                     package='DAAGviz')
   file.show(script5)
   Source files (also scripts) for functions that can be used to repro-
   duce the graphs. These are available for Chapters 5 to 15 only.         More succinctly, use the function
   To load the Chapter 5 functions into the workspace, use the com-       getScript():
   mand:                                                                - ## Place Ch 5 script in
                                                                          ## working directory
   path2figs5 <- system.file('doc/figs5.R',                               getScript(5)
                                       package='DAAGviz')
   source(path2figs5)
- The datasets bronchit, eyeAmp, and Crimean, which feature
                                                                           More succinctly, use the function
   later in these notes.                                                  sourceFigFuns():
                                                                        - ## Load Ch 5 functions
At courses where these notes are used, the script files, the function     ## into workspace
source files, and some data files, will be provided on a memory stick.    sourceFigFuns(5)

 12
 Alternative sources for some datasets
                                                                     At courses where these notes are used,
 The web page http://maths-people.anu.edu.au/~johnm/                 these will be provided on a memory
 may in a few cases be a convenient source for datasets that are re- stick.
 ferred to in this text:
- Look in http://maths-people.anu.edu.au/~johnm/r/rda
   for various image (.RData) files.3 Use the function load() to     3
                                                                       Image files hold copies of one or
   bring any of these into R.                                        more R objects, in a format that
                                                                     facilitates rapid access from R.
- Look in http://maths-people.anu.edu.au/~johnm/
   datasets/text for the files bestTimes.txt, molclock.txt, and
   other such text files.
= Look in http://maths-people.anu.edu.au/~johnm/
   datasets/csv for several .csv files.

1
Getting started with R

14   learning and exploring r
1.1      Installation of R
Click as indicated in the successive panels to download R for Win-
dows from the web page http://cran.csiro.au:
                                                                         Figure 1.1: This shows a sequence
                                                                         of clicks that will download the R
                                                                         installation file from cran.csiro.
                                                                         edu. At the time of writing, the
                                                                         website will offer R-3.4.3 rather than
                                                                         R-2.13.0. The site cran.csiro.edu
                                                                         is one of two Australian CRAN
                                                                         (Comprehensive R Archive Network)
                                                                         sites. The other is: http://cran.ms.
                                                                         unimelb.edu.au/
    Click on the downloaded file to start installation. Most users will  Figure 1.2: On 64-bit Windows
want to accept the defaults. The effect is to install the R base system, systems the default installation process
plus recommended packages, with a standard “off-the-shelf” setup.        creates two icons, one for 32-bit R and
                                                                         one for 64-bit R. Additional icons can
Windows users will find that one or more desktop R icons have been       be created as desired.
created as part of the installation process.
    Depending on the intended tasks, it may be necessary to install
further packages. Section 1.3 describes alternative ways to install
packages.
    An optional additional step is to install RStudio. RStudio has       Clicking on the RStudio icon to start
abilities that help in managing workflow, in navigating between          a session will at the same time start
projects, and in accessing R system information. See Section 2.4.        R. RStudio has its own command
                                                                         line interface, where users can type R
                                                                         commands.
1.2      First steps
                                                                         Readers who have RStudio running
Click on an R icon to start an R session. This opens an R command        can type their commands in the RStu-
window, prints information about the installed version of R, and         dio command line panel.
gives a command prompt.
The > prompt that appears on the final line is an invitation to start
typing R commands:

                                                                                 getting started with r           15
                                                                           Figure 1.3: Windows command win-
                                                                           dow at startup. This shows the default
                                                                           MDI (multiple display) interface. For
                                                                           running R from the R Commander,
                                                                           the alternative SDI (single display)
                                                                           interface may be required, or may be
                                                                           preferable. The Mac GUI has a SDI
                                                                           type interface; there is no other option.
    Thus, type 2+5 and press the Enter key. The display shows:
> 2+5                                                                      The [1] says, a little strangely, “first
[1] 7                                                                      requested element will follow”. Here,
                                                                           there is just one element.
 The result is 7. The output is immediately followed by the >
prompt, indicating that R is ready for another command.
    Try also:
> result <- 2+5
> result
[1] 7                                                                      Typing result on the command line
    The object result is stored in the workspace. The workspace            has printed the value 7.
holds objects that the user has created or input, or that were there at    Technically, the workspace is one of
the start of the session and not later removed                             a number of databases where objects
    Type ls() to list the objects in the workspace, thus:                  may be stored.
                                                                           The object result was added to a
> ls()
                                                                           previously empty workspace.
[1] "result"
    Figure 1.4 shows, with annotations, the screen as it appears fol-
lowing the above sequence of commands.
    An R session is structured as a hierarchy of databases. Functions
that were used or referred to above — such as ls() – are from a
database or package that is part of the R system. Objects that the
user has created or input, or that were there at the start of the session
and not later removed, are stored in the workspace.
    The workspace is the user’s database for the duration of a ses-        Technically, the R system refers to the
sion. It is a volatile database, i.e., it will disappear if not explicitly workspace as .Globalenv.
saved prior to or at the end of the session.

16   learning and exploring r
                                                                       Figure 1.4: This shows the sequence
                                                                       of commands that are demonstrated in
                                                                       the text, as they appear on the screen,
                                                                       with added annotation.
1.2.1     Points to note
 Printing         Typing the name of an object (and pressing Enter)
                  displays (prints) its contents.
 Quitting         To quit, type q(), (not q)
 Case matters     volume is different from Volume
    Typing the name of an object (and pressing the Enter key) causes
the printing of its contents, as above when result was typed. This
applies to functions also. Thus type q() in order to quit, not q.1 One 1
                                                                         Typing q lists the code for the func-
types q() because this causes the function q to spring into action.    tion.
    Upon typing q() and pressing the Enter key, a message will ask
whether to save the workspace image.2 Clicking Yes (usually the        2
                                                                         Such an image allows reconstruction
safest option) will save the objects that remain in the workspace –    of the workspace of which it forms an
                                                                       image!
any that were there at the start of the session (unless removed or
overwritten) and any that have been added since. The workspace that
has been thus saved is automatically reloaded when an R session is
restarted in the working directory to which it was saved.
                                                                       Figure 1.5: Note the use of the special
                                                                       characters: ; to separate multiple com-
                                                                       mands on the one line, + (generated
                                                                       by the system) to denote continuation
                                                                       from previous line, and # to introduce
                                                                       comment that extends to end of line.
                                                                       3
    Note that for names of R objects or commands, case is signifi-       Under Windows case is ignored. For
cant. Thus Myr (millions of years, perhaps) differs from myr. For file Unix case does distinguish. (Mac OS
                                                                       X Unix is a partial exception.)
names,3 the operating system conventions apply.

                                                                               getting started with r          17
     Commands may, as demonstrated in Figure 1.5, continue over
 more than one line. By default, the continuation prompt is +. As        Here is a command that extends over
                                                                         two lines:
 with the > prompt, this is generated by R, and appears on the left        > result <-
 margin. Including it when code is entered will give an error!             + 2+5
 1.2.2      Some further comments on functions in R
                                                                         R is a functional language. Whenever
 Common functions that users should quickly get to know include          a command is entered, this causes a
 print(), plot() and help(). Above, we noted the function q(),           function to run. Addition is imple-
 used to quit from an R session.                                         mented as a function, as are other such
     Consider the function print(). One can explicitly invoke it to      operations.
 print the number 2 thus:
 print(2)
 [1] 2
     Objects on which the function will act are placed inside the round
 brackets. Such quantities are known as arguments to the function.
     An alternative to typing print(2) is to type 2 on the command
 line. The function print() is then invoked implicitly:
 2
 [1] 2
 1.2.3      Help information
 Included on the information that appeared on the screen when R
 started up, and shown in Figures 1.4 and 1.5, were brief details on
 how to access R’s built-in help information:
 Type 'demo()' for some demos, 'help()' for on-line help, or
 'help.start()' for an HTML browser interface to help.
 The shorthand ?plot is an alternative to typing help(plot).
     Replace ‘?’ by ‘??’ for a wider search. This invokes the function    Examples of use of ??:
 help.search(), which looks for a partial match in the title or          ??Arithmetic
 concept fields as well as in the name.                                  ??base::Arith
                                                                            # Search base R only
     R has extensive built-in help information. Be sure to check it out
 as necessary. Section 1.8 has further details on what is available,
 beyond what you can get by using the help function.
 1.2.4      The working directory
 Associated with each session is a working directory where R will by     Under Windows, if R is started by
 default look for files. In particular:                                  clicking on an R icon, the working
                                                                         directory is that specified in the
• If a command inputs data from a file into the workspace and the        Start in directory specified in the
    path is not specified, this is where R will look for the file.       icon Preferences. Subsection A.1 has
                                                                         details on how to specify the Start in
                                                                         directory for an icon.
• If a command outputs results to a file, and the path is not specified,
    this is where R will place the file.

 18    learning and exploring r
• Upon quitting a session, the “off-the-shelf” setup will ask whether
    to save an “image” of the session. Answering “Yes” has the result       When R finds a .RData file in the
    that the contents of the workspace are saved into a file, in the        working directory at startup, that file
    working directory, that has the name .RData.                            will, in an off-the-shelf setup, be used
                                                                            to restore the workspace.
     For regular day to day use of R, it is advisable to have a sep-
 arate working directory for each different project. RStudio users
 will be asked to specify a working directory when setting up a new
 “project”.
 1.3      Installation of R Packages
   Installation of R Packages (Windows & MacOS X)                            A fresh install of R packages is
                                                                            typically required when moving to a
   Start R (e.g., click on the R icon). Then use the relevant menu item     new major release (e.g., from a 3.0
   to install packages via an internet connection. This is (usually) easier series release to a 3.1 series release).
   than downloading, then installing.
   For command line instructions to install packages, see below.
     The functions that R provides are organised into packages. The
 packages that need to be installed, additional to those that come with
 the initial ready-to-run system, will vary depending on individual
 user requirements. The GUIs — MacOS X, Windows or Linux —
 make package installation relatively straightforward.
 Installation of packages from the command line
 To install the R Commander from the command line, enter:                   By default, a CRAN mirror is
                                                                            searched for the required package.
 install.packages("Rcmdr", dependencies=TRUE)                               Refer back to the introduction for brief
     The R Commander has a number of dependencies, i.e., packages           comments on CRAN. Subsection 2.3.1
                                                                            gives details of alternatives to CRAN.
 that need to be installed for the R Commander to run. Graphics
                                                                            Note in particular the Bioconductor
 packages that are dependencies include rgl (3D dynamic graphics),          repository.
 scatterplot3d, vcd (visualization of categorical data) and colorspace
 (generation of color palettes, etc).
 Installation of Bioconductor packages
 To set your system up for use of Bioconductor packages, type:              For installation of Bioconductor pack-
                                                                            ages from the GUI, see Subsection
 source("http://bioconductor.org/biocLite.R")
                                                                            A.4.
 biocLite()
     Additional packages can be installed thus:
 biocLite(c("GenomicFeatures", "AnnotationDbi"))
     See further http://www.bioconductor.org/install/.

                                                                           getting started with r           19
1.4      Practice with R commands
                                                                     Read c as “concatenate”, or perhaps as
   Column Objects                                                    “column”.
        width = c(11.3, 13.1, 20, 21.1, 25.8, 13.1)                  Lists are widely used in R. A data
        height = c(23.9, 18.7, 27.6, 28.5, 36, 23.4)                 frame is a special type of list, used to
                                                                     collect together column objects under
   Data frame                                                        one name.
   A data frame is a list of column objects, all of the same length.
        widheight <- data.frame(
              width = c(11.3, 13.1, 20, 21.1, 25.8, 13.1),
              height = c(23.9, 18.7, 27.6, 28.5, 36, 23.4)
          )
   Also: Arithmetic operations; simple plots; input of data.
                                                                     The R language has the standard
    Try the following                                                abilities for evaluating arithmetic
                                                                     and logical expressions. There are
2+3             # Simple arithmetic                                  numerous functions that extend these
[1] 5                                                                basic arithmetic and logical abilities.
1:5             # The numbers 1, 2, 3, 4, 5
[1] 1 2 3 4 5
mean(1:5) # Average of 1, 2, 3, 4, 5
[1] 3
sum(1:5)        # Sum of 1, 2, 3, 4, 5
[1] 15
(8:10)^2        # 8^2 (8 to the power of 2), 9^2, 10^2
[1] 64 81 100
    In addition to log(), note log2() and log10():                   A change by a factor of 2 is a one unit
                                                                     change on a log2 scale. A change by a
log2(c(0.5, 1, 2, 4, 8))                                             factor of 10 is a one unit change on a
[1] -1 0 1 2 3                                                       log10 scale.
log10(c(0.1, 1, 10, 100, 1000))
[1] -1 0 1 2 3
It turns out, surprisingly often, that logarithmic scales are appro-
priate for one or other type of graph. Logarithmic scales focus on
relative change — by what factor has the value changed?
    The following uses the relational operator >:                     Other relational operators are
                                                                       <     >=     <   <=      == ! =
(1:5) > 2 # Returns FALSE FALSE TRUE                    TRUE    TRUE
[1] FALSE FALSE TRUE TRUE TRUE
Demonstrations
Demonstrations can be highly helpful in learning to use R’s func-
tions. The following are some of demonstrations that are available   Images and perspective plots:
for graphics functions:                                              demo(image)
                                                                     demo(persp)
demo(graphics)          # Type <Enter> for each new graph
library(lattice)

20   learning and exploring r
                                                                           For the following, the vcd package
demo(lattice)                                                              must be installed:
    Especially for demo(lattice), it pays to stretch the graphics          library(vcd)
window to cover a substantial part of the screen. Place the cursor on      demo(mosaic)
the lower right corner of the graphics window, hold down the left
mouse button, and pull.
    The following lists available demonstrations:
## List demonstrations in attached packages
demo()
## List demonstrations in all installed packages
demo(package = .packages(all.available = TRUE))
1.5     A Short R Session
We will work with the data set shown in Table 1.1:
                                        thickness    width   height   weight    volume       type
             Aird’s Guide to Sydney          1.30    11.30    23.90     250         351      Guide
         Moon’s Australia handbook           3.90    13.10    18.70     840         955      Guide
       Explore Australia Road Atlas          1.20    20.00    27.60     550         662      Roadmaps
         Australian Motoring Guide           2.00    21.10    28.50    1360        1203      Roadmaps
              Penguin Touring Atlas          0.60    25.80    36.00     640         557      Roadmaps
               Canberra - The Guide          1.50    13.10    23.40     420         460      Guide
                                                                           Table 1.1: Weights and volumes, for
                                                                           six Australian travel books.
Entry of columns of data from the command line
The following enters data as numeric vectors:                              Read c as “concatenate”, or perhaps as
                                                                           “column”. It joins elements together
volume <- c(351, 955, 662, 1203, 557, 460)                                 into a vector, here numeric vectors.
weight <- c(250, 840, 550, 1360, 640, 420)
    Now store details of the books in the character vector
description:                                                               The end result is that objects volume,
                                                                           weight and description are
description <- c("Aird's Guide to Sydney",                                 stored in the workspace.
 "Moon's Australia handbook",
 "Explore Australia Road Atlas",
 "Australian Motoring Guide",
 "Penguin Touring Atlas", "Canberra - The Guide")
Listing the workspace contents
Use ls() to examine the current contents of the workspace.
ls()
[1] "description" "result"                 "volume"           "weight"
    Use the argument pattern to specify a search pattern:                   Note also:
                                                                           ls(pattern="^des")
                                                                              ## begins with 'des'
                                                                           ls(pattern="ion$")
                                                                              ## ends with 'ion'

                                                                            getting started with r        21
ls(pattern="ume")           # Names that include "ume"
[1] "volume"
Operations with numeric vectors
Here are the values of volume
volume
[1] 351 955 662 1203 557                 460
    To extract the final element of volume, do:
volume[6]
[1] 460
    For the ratio of weight to volume, i.e., the density, we can do:
weight/volume
[1] 0.7123 0.8796 0.8308 1.1305 1.1490 0.9130
A note on functions
For the weight/volume calculation, two decimal places in the out-
put is more than adequate accuracy. The following uses the function    More simply, type:
round() to round to two decimal places:                               round(weight/volume, 2)
round(x=weight/volume, digits=2)                                        Providing the arguments are in the
[1] 0.71 0.88 0.83 1.13 1.15 0.91                                    defined order, they can as here be
                                                                     omitted from the function call.
    Functions take arguments — these supply data on which they
operate. For round() the arguments are ‘x’ which is the quantity      Many functions, among them plot()
that is to be rounded, and ‘digits’ which is the number of decimal    that is used for Figure 1.6, accept
                                                                      unnamed as well as named arguments.
places that should remain after rounding.
                                                                      The symbol ‘...’ is used to denote
    Use the function args() to get details of the named arguments:   the possibility of unnamed arguments.
args(round)
function (x, digits = 0)                                             sIf a ‘...’ appears, indicating that
NULL                                                                  there can be unnamed arguments,
                                                                      check the help page for details.
Tabulation
Use the function table() for simple numeric tabulations, thus:
type <- c("Guide","Guide","Roadmaps","Roadmaps",
               "Roadmaps","Guide")
table(type)
type
    Guide Roadmaps
           3           3

22    learning and exploring r
A simple plot
                                                                                  1400
Figure 1.6 plots weight against volume, for the six Australian travel                                                                     ●
books. Note the use of the graphics formula weight ~ volume                       1200
to specify the x− and y−variables. It takes a similar from to the                 1000
“formulae” that are used in specifying models, and in the functions
                                                                         weight
                                                                                                                              ●
                                                                                  800
xtabs() and unstack().
                                                                                                       ●
    Code for Figure 1.6 is:                                                       600
                                                                                                                 ●
                                                                                                   ●
## Code                                                                           400
plot(weight ~ volume, pch=16, cex=1.5)                                                   ●
                                                                                             400           600          800       1000   1200
  # pch=16: use solid blob as plot symbol                                                                            volume
  # cex=1.5: point size is 1.5 times default                             Figure 1.6: Weight versus volume, for
## Alternative                                                           six Australian travel books.
plot(volume, weight, pch=16, cex=1.5)
     The axes can be labeled:
plot(weight ~ volume, pch=16, cex=1.5,
     xlab="Volume (cubic mm)", ylab="Weight (g)")
   Interactive labeling of points (e.g., with species names) can be      Use text() for non-interactive
done interactively, using identify():                                    labeling of points.
identify(weight ~ volume, labels=description)
    Then click the left mouse button above or below a point, or on
the left or right, depending on where you wish the label to appear.
Repeat for as many points as required.
    On most systems, the labeling can be terminated by clicking the
right mouse button. On the Windows GUI, an alternative is to click
on the word “Stop” that appears at the top left of the screen, just
under “Rgui” on the left of the blue panel header of the R window.
Then click on “Stop locator”.
Formatting and layout of plots
There are extensive abilities that may be used to control the format-
ting and layout of plots, and to add features such as special symbols,
fitted lines and curves, annotation (including mathematical annota-
tion), colors, . . .
1.6      Data frames – Grouping columns of data
                                                                         Data frames are pervasive in R. Most
  Data frames     Store data that have a cases by columns layout.        datasets that are included with R
                                                                         packages are supplied as data frames.
  Creating        Enter from the command line (small datasets)
  data frames     Or: Use read.table() to input from a file.
  Columns of      travelbooks$weight or travelbooks[, 4]
  data frames     or travelbooks[, "weight"]
     The following code groups the several columns of Table 1.1

                                                                               getting started with r         23
together, under the name travelbooks. It is tidier to have matched
columns of data grouped together into a data frame, rather than
separate objects in the workspace.
                                                                        The vectors weight, volume and
## Group columns together into a data frame
                                                                        description were entered earlier,
travelbooks <- data.frame(
                                                                        and (unless subsequently removed)
    thickness = c(1.3, 3.9, 1.2, 2, 0.6, 1.5),
                                                                        can be copied directly into the data
    width = c(11.3, 13.1, 20, 21.1, 25.8, 13.1),
                                                                        frame.
    height = c(23.9, 18.7, 27.6, 28.5, 36, 23.4),
    weight = weight, # Use values entered earlier                         It is a matter of convenience whether
    volume = volume, # Use values entered earlier                       the description information is used to
    type = c("Guide", "Guide", "Roadmaps", "Roadmaps",                  label the rows, or alternatively placed
              "Roadmaps", "Guide"),                                     in a column of the data frame.
    row.names = description
)
## Remove objects that are not now needed.
rm(volume, weight, description)
The storage of character data as factors
                                                                        While in most contexts factors and
Vectors of character, such as type, are by default stored in the        character vectors are interchangeable,
data frame as factors. In the data as stored, "Guide" is 1 and          there are important exceptions.
"Roadmaps" is 2. Stored with the factor is an attribute table that
interprets 1 as "Guide" and 2 as "Roadmaps".
Accessing the columns of data frames
The following are alternative ways to extract the column weight         For a matrix or array, users
from the data frame:                                                    are restricted to the first and
travelbooks[, 4]                                                        second of these alternatives.
travelbooks[, "weight"]                                                 With a matrix travelmat
travelbooks$weight                                                      use, e.g., travelmat[,4] or
travelbooks[["weight"]]      # Reference as a list.                     travelmat[,"weight"].
    There are several mechanisms that avoid repeated reference to
the name of the data frame. The following are alternative ways to
plot weight against volume:
  1. Use the parameter data, where available, in the function call      Most modeling functions and many
  plot( weight ~ volume, data=travelbooks)                              plotting functions accept a data
                                                                        argument.
  2. Use with(): Take columns from specified data frame
  ## Take columns from the specified data frame
  with(travelbooks, plot(weight ~ volume))
Both these mechanisms look first for a data frame column with a
needed name. The workspace is searched only if this fails.
    A third option, usually best avoided, is to use attach() to add
the data frame to the search list. In this case, names in the workspace  Attachment of a data frame:
take precedence over column names in the attached data frame – not      attach(travelbooks)
usually what is wanted if there are names in common.                    plot( weight ~ volume)
    Subsection 2.3.2 will discuss the attaching of packages and im-     detach(travelbooks)
age files.                                                                ## Detach when no longer
                                                                          ## required.

24    learning and exploring r
1.7       Input of Data from a File
The function read.table() is designed for input from a rectangu-
lar file into a data frame. There are several variants on this function
— notably read.csv() and read.delim().
    First use the function datafile() (DAAG) to copy from the                 This use of datafile(), avoiding
DAAG package and into the working directory a data file that will be          use of the mouse to copy the file and
                                                                              the associated need to navigate the file
used for demonstration purposes.
                                                                              system, is a convenience for teaching
## Place the file in the working directory                                    purposes.
## NB: DAAG must be installed
DAAG::datafile("travelbooks")
Use dir() to check that the file is indeed in the working directory:
dir(pattern="travel")
   # File(s) whose name(s) include 'travel'
    The first two lines hold the column headings and first row, thus:
                               thickness   width    height   weight     volume    type
  Aird’s Guide to Sydney            1.30   11.30     23.90       250       351    Guide
                         ...
Observe that column 1, which has the row names, has no name.
    The following reads the file into an R data frame:                         Row 1 has column names.
                                                                              Column 1 has row names.
## Input the file to the data frame travelbooks
travelbooks <- read.table("travelbooks.txt",
                                     header=TRUE, row.names=1)
    The assignment places the data frame in the workspace, with
the name travelbooks. The first seven columns are numeric. The
character data in the final column is by default stored as a factor.
Data input – points to note:
- Alternatives to command line input include the R Commmander
   menu and the RStudio menu. These make it easy to check that
   data are being correctly entered.
- If the first row of input gives column names, specify
   heading=TRUE. If the first row of input is the first row of data,
   specify heading=FALSE.
- See help(read.table) for details of parameter settings that may             Section 5.1 discusses common types
   need changing to match the data format.                                    of input errors.
- Character vectors that are included as columns in data frames               Character vectors and factors can
   become, by default, factors.                                               often, but by no means always, be
                                                                              treated as equivalent.
1.8       Sources of Help
                                                                              Note also:
                                                                                help.search()
                                                                                apropos()
                                                                                help.start()
                                                                                RSiteSearch()

                                                                              getting started with r          25
   help()                  #  Help for the help function
   help(plot)              #  Show the help page for plot
   ?plot                   #  Shorthand for help(plot)
   example(plot)           #  Run examples from help(plot)
   demo()                  #  List available demonstrations
   vignette()              #  Get information on vignettes
                           #  NB also browseVignettes()
This section enlarges on the very brief details in Subsection 1.2.3
Access to help resources from a browser screen
Type help.start() to display a screen that gives a
browser interface to R’s help resources. Note especially                Official R manuals include
Frequently Asked Questions and Packages. Under Packages, click          An Introduction to R, a manual on
on base to get information on base R functions. Standard elemen-        Writing R Extensions, and so on.
tary statistics functions are likely to be found under stats, and base
graphics functions under graphics.
    Also available, after clicking on a package name, is a link
User guides, package vignettes and other documentation. Click to
get details of any documentation that is additional to the help pages.
Searching for key words or strings
Use help.search() to look for functions that include a specific
word or part of word in their alias or title. Thus, functions for oper-
ating on character strings are likely to have “str” or “char” in their  By default, all installed packages are
name. Try                                                               searched. Limiting the search, here
                                                                        to package="base", will often give
help.search("str", package="base")                                      more manageable and useful output.
help.search("char", package="base")
    The function RSiteSearch() searches web-based resources,
including R mailing lists, for the text that is given as argument.
Examples that are included on help pages
All functions have help pages. Most help pages include examples,        To work through the code for an
which can be run using the function example(). Be warned that,          example, look on the screen for the
even for relatively simple functions, some of the examples may          code that was used, and copy or type it
                                                                        following the command line prompt.
illustrate non-trivial technical detail.                                Or get the code from the help page.
Vignettes
Many packages have vignettes; these are typically pdf or (with ver-     Vignettes are created from a Mark-
sion ≥ 3.0.0 of R) HTML files that give information on the package      down or HTML or LaTeX document
or on specific aspects of the package. To get details of vignettes      in which R code is embedded, sur-
that are available in a package, call browseVignettes() with the        rounded by markup that controls what
                                                                        is to be done with the code and with
                                                                        any output generated. See Section 2.4.

 26   learning and exploring r
 package name (as a character string) as argument. Thus, for the knitr
 package, enter browseVignettes(package="knitr").
     The browser window that appears will list the vignettes, with the
 option to click on links that, in most cases, offer a choice of one of
 PDF and HTML, source, and R code.
 Searching for Packages
 A good first place to look, for information on packages that relate to
 one or other area of knowledge, is the R Task Views web page, at:
 http://cran.r-project.org/web/views/. See also the website
 http://crantastic.org/, which has details on what packages
 are popular, and what users think of them.
 1.9     Summary and Exercises
 1.9.1     Summary
   One use of R is as a calculator, to evaluate arithmetic expressions.
   Calculations can be carried out in parallel, across all elements of a
   vector at once.
   The R Commander GUI can be helpful in getting quickly into use
   of R for many standard purposes. It may, depending on require-
   ments, be limiting for serious use of R.
   Use q() to quit from an R session. To retain objects in the
   workspace, accept the offer to save the workspace.
 - Useful help functions are help() (for getting information on a        NB also: Use apropos() to search
   known function) and help.search() (for searching for a word           for functions that include a stated text
   that is used in the header for the help file).                        string as part of their name.
 - The function help.start() starts a browser window from which
   R help information can be accessed.
 - Use the GUI interface in RStudio or R Commander to input rect-        Aliases of read.table() include
   angular files. Or, use read.table() or one of its aliases.            read.csv() and read.delim()
 - Data frames collect together under one name columns that all
   have the same length. Columns of a data frame can be any mix of,
   among other possibilities: logical, numeric, character, or factor.
 - The function with() attaches a data frame temporarily, for the        Use with() in preference to the
   duration of the call to with().                                       attach() / detach() combination.
 - For simple forms of scatterplot, use plot() and associated func-
   tions, or perhaps the lattice function xyplot().
 1.9.2     Exercises
1. Use the following code to to place the file bestTimes.txt in the
   working directory:

                                                                           getting started with r          27
 (a) Examine the file, perhaps using the function file.show().
      Read the file into the workspace, with the name bestTimes.
      ## file.show("bestTimes.txt")
      bestTimes <- read.table("bestTimes.txt")
 (b) The bestTimes file has separate columns that show hours,
      minutes and seconds. Use the following to add the new column
      Time, then omitting the individual columns as redundant
      ## Exercise 1b
      bestTimes$Time <- with(bestTimes,
                                    h*60 + min + sec/60)
        # Time in minutes
      names(bestTimes)[2:4]           # Check column names
      bestTimes <- bestTimes[, -(2:4)]
                                      # omit columns 2:4
 (c) Here are alternative ways to plot the data
      plot(Time ~ Distance, data=bestTimes)
      ## Now use a log scale
      plot(log(Time) ~ log(Distance), data=bestTimes)
      plot(Time ~ Distance, data=bestTimes, log="xy")
 (d) Now save the data into an image file in the working directory   Subsection 2.2.2 discusses the use of
                                                                     the function save().
      save(bestTimes, file="bestTimes.RData")
2. Re-enter the data frame travelbooks.4 Add a column that has       4
                                                                       If necessary, refer back to Section 1.6
   the density (weight/volume) of each book.                         for details.
3. The functions summary() and str() both give summary informa-
   tion on the columns of a data frames Comment on the differences
   in the information provided, when applied to the following data
   frames from the DAAG package:
 (a) nihills;
 (b) tomato.
4. Examine the results from entering:
 (a) ?minimum
 (b) ??minimum                                                       The notation base::minimum tells
 (c) ??base::minimum                                                 the help function to look in R’s base
                                                                     package.
 (d) ??base::min
   For finding a function to calculate the minimum of a numeric
   vector, which of the above gives the most useful information?
5. For each of the following tasks, applied to a numeric vector (nu-
   meric column object), find a suitable function. Test each of the
   functions that you find on the vector volume in Section 1.5:

28  learning and exploring r
(a) Reverse the order of the elements in a column object;
(b) Calculate length, mean, median, minimum maximum, range;
(c) Find the differences between successive values.

2
The R Working Environment

30    learning and exploring r
                                                                        Important R technical terms include
   Object         Objects can be data objects, function objects,        object, workspace, working directory,
                  formula objects, expression objects, . . .            image file, package, library, database
                  Use ls() to list contents of current workspace.       and search list.
   Workspace      User’s “database”, where the user can make
                  additions or changes or deletions.
   Working        Default directory for reading or writing files.
   directory      Use a new working directories for a new project.      Use the relevant menu. or enter
   Image files    Use to store R objects, e.g., workspace contents.     save.image() on the command
                                                                        line, to store or back up workspace
                  (The expected file extension is .RData or .rda)       contents. During a long R session, do
   Search list    search() lists ‘databases’ that R will search.        frequent saves!
                  library() adds packages to the search list
2.1       The Working Directory and the Workspace
Each R session has a working directory and a workspace. If not
otherwise instructed, R looks in the working directory for files, and
saves files that are output to it.
    The workspace is at the base of a list of search locations, known   The workspace is a volatile database
as databases, where R will as needed search for objects. It holds       that, unless saved, will disappear at the
                                                                        end of the session.
objects that the user has created or input, or that were there at the
start of the session and not later removed.
    The workspace changes as objects are added or deleted or
modified. Upon quitting from R (type q(), or use the relevant
menu item), users are asked whether they wish to save the current
workspace. If saved, it is stored in the file .RData, in the current    The file .RData has the name image
working directory. When an R session is next started in that working    file. From it the workspace can, as and
directory, the off-the-shelf action is to look for a file named .RData, when required, be reconstructed.
and if found to reload it.
Setting the Working Directory
When a session is started by clicking on a Windows icon, the icon’s
Properties specify the Start In directory.1 Type getwd() to identify    1
                                                                          When a Unix or Linux command
the current working directory.                                          starts a session, the default is to use
                                                                        the current directory.
    It is good practice to use a separate working directory, and as-
sociated workspace or workspaces, for each different project. On
Windows systems, copy an existing R icon, rename it as desired,
and change the Start In directory to the new working directory. The
working directory can be changed2 once a session has started, either    2
                                                                          To make a complete change to
from the menu (if available) or from the command line. Changing         a new workspace, first save the
                                                                        existing workspace, and type
the working directory from within a session requires a clear head; it
                                                                        rm(list=ls(all=TRUE) to
is usually best to save one’s work, quit, and start a new session.      empty its contents. Then change the
                                                                        working directory and load the new
                                                                        workspace.

                                                                      the r working environment            31
2.2      Code, data, and project Maintenance
2.2.1     Maintenance of R scripts
It is good practice to maintain a transcript from which work done     Note again RStudio’s abilities for
during the session, including data input and manipulation, can as     managing and keeping R scripts.
necessary be reproduced. Where calculations are quickly completed,
this can be re-executed when a new session is started, to get to the
point where the previous session left off.
2.2.2     Saving and retrieving R objects
Use save() to save one or more named objects into an image            The command save.image()) saves
file. Use load() to reload the image file contents back into the      everything in the workspace, by
workspace. The following demonstrate the explicit use of save()       default into a file named .RData in
                                                                      the working directory. Or, from a GUI
and load() commands:                                                  interface, click on the relevant menu
volume <- c(351, 955, 662, 1203, 557, 460)                            item.
weight <- c(250, 840, 550, 1360, 640, 420)
save(volume, weight, file="books.RData")
                                                                      See Subsection 2.3.2 for use of
    # Can save many objects in the same file
                                                                      attach("books.RData") in
rm(volume, weight)                # Remove volume and weight          place of load("books.RData").
load("books.RData")               # Recover the saved objects
     Where it will be time-consuming to recreate objects in the
workspace, users will be advised to save (back up) the current
workspace image from time to time, e.g., into a file, preferably with
a suitably mnemonic name. For example:
                                                                      Before saving the workspace, consider
fnam <- "2014Feb1.RData"                                              use of rm() to remove objects that are
save.image(file=fnam)                                                 no longer required.
     Two further possibilities are:
- Use dump() to save one or more objects in a text format. For
   example:
   volume <- c(351, 955, 662, 1203, 557, 460)
   weight <- c(250, 840, 550, 1360, 640, 420)
   dump(c("volume", "weight"), file="volwt.R")
   rm(volume, weight)
   source("volwt.R")                # Retrieve volume & weight
- Use write.table() to write a data frame to a text file.

 32    learning and exploring r
 2.3       Packages and System Setup
                                                                        For download or installation of R or
   Packages        Packages are structured collections of R             CRAN packages, use for preference
                   functions and/or data and/or other objects.          a local mirror. In Australia http://
                                                                        cran.csiro.au is a good choice. The
   Installation    R Binaries include ’recommended’ packages.           mirror can be set from the Windows
   of packages     Install other packages, as required,                 or Mac GUI. Alternatively (on any
                                                                        system), type chooseCRANmirror()
   library()       Use to attach a package, e.g., library(DAAG)         and choose from the list that pops up.
                   Once attached, a package is added to the list of
                   “databases” that R searches for objects.
 An R installation is structured as a library of packages.
• All installations should have the base packages (one of them is
    called base). These provide the infrastructure for other packages.
• Binaries that are available from CRAN sites include, also, all the
    recommended packages.
• Other packages can be installed as required, from a CRAN mirror        To discover which packages are
    site, or from another repository.                                   attached, enter one of:
                                                                        search()
     A number of packages are by default attached at the start of a     sessionInfo()
 session. To attach other packages, use library() as required.            Use sessionInfo() to get more
                                                                        detailed information.
 2.3.1      Installation of R packages
 Section 1.3 described the installation of packages from the internet.
 Note also the use of update.packages() or its equivalent from the
 GUI menu. This identifies packages for which updates are available,
 offering the user the option to proceed with the update.
     The function download.packages() allows the downloading of         Arguments are a vector of package
 packages for later installation. The menu, or install.packages(),      names and a destination directory
 can then be used to install the packages from the local directory. For destdir where the latest file ver-
                                                                        sions will be saved as .zip or (MacOS
 command line installation of packages that are in a local directory,   X) .tar.gz files.
 call install.packages() with pkgs giving the files (with path, if
 necessary), and with the argument repos=NULL.
     If for example the binary DAAG_1.22.zip has been downloaded        On Unix and Linux systems, gzipped
 to D:\tmp\, it can be installed thus                                   tar files can be installed using the shell
                                                                        command:
 install.packages(pkgs="D:/DAAG_1.22.zip",
                                                                          R CMD INSTALL xx.tar.gz
                         repos=NULL)
                                                                        (replace xx.tar.gz by the file name.)
     On the R command line, be sure to replace the usual Windows
 backslashes by forward slashes.
     Use .path.package() to get the path of a currently attached
 package (by default for all attached packages).
 2.3.2      The search path: library() and attach()
 The R system maintains a search path (a list of databases) that de-
 termines, unless otherwise specified, where and in what order to

                                                                       the r working environment               33
look for objects. The search list includes the workspace, attached     Database 1, where R looks first,
packages, and a so-called Autoloads database. It may include other     is the user workspace, called
items also.                                                            ".GlobalEnv".
    To get a snapshot of the search path, here taken after starting up Packages other than MASS were
and entering library(MASS), type:                                      attached at startup.
search ()
                                                                       If the process runs from RStudio,
  [1]   ". GlobalEnv "           " package :MASS"                      "tools:rstudio" will appear in
  [3]  " tools:RGUI"             " package :stats"                     place of "tools:RGUI".
  [5]  " package : graphics "    " package : grDevices "
  [7]  " package :utils"         " package : datasets "
  [9]  " package : methods "     " Autoloads "
[11]   " package :base"
    For more detailed information that has version numbers of any
packages that are additional to base packages, type:
sessionInfo()
The ’::’ notation
Use notation such as base::print() to specify the package where
a function or other object is to be found. This avoids any risk of
ambiguity when two or more objects with the same name can be
found in the search path.
    In Subsection 7.2.9 the notation latticeExtra::layer()
will be used to indicate that the function layer() from the lat-
ticeExtra package is required, distinguishing it from the func-
tion layer() in the ggplot2 package. Use of the notation               It is necessary that the latticeExtra
latticeExtra::layer() makes unnecessary prior use of                   package has been installed!
library(latticeExtra) or its equivalent.
Attachment of image files
                                                                       Objects that are attached, whether
The following adds the image file books.RData to the search list:      workspaces or packages (using
attach("books.RData")                                                  library()) or other entities, are
                                                                       added to the search list.
The session then has access to objects in the file books.RData. Note   The file becomes a further “database”
that if an object from the image file is modified, the modified copy   on the search list, separate from the
becomes part of the workspace.                                         workspace.
    In order to detach books.RData, proceed thus:                      Alternatively, supply the numeric
                                                                       position of books.RData on the
detach("file:books.RData")                                             search list (if in position 2, then 2) as
                                                                       an argument to detach().
2.3.3      ∗ Where  does the R system keep its files?
                                                                       Note that R expects (and displays)
Type R.home() to see where the R system has stored its files.          either a single forward slash or double
R.home()                                                               backslashes, where Windows would
                                                                       show a single backslash.
[1] "/Library/Frameworks/R.framework/Resources"

34   learning and exploring r
    Notice that the path appears in abbreviated form. Type
normalizePath(R.home()) to get the more intelligible result
    [1] "C:\\Program Files\\R\\R-2.15.2"
    By default, the command system.file() gives the path to the
base package. For other packages, type, e.g.
                    system.file(package="DAAG")
                    [1] "/Library/Frameworks/R.framework/Versions/3.5/Resources/library/DAAG"
    To get the path to a file viewtemps.RData that is stored with the
DAAG package in the misc subdirectory, type:
                    system.file("misc/viewtemps.RData", package="DAAG")
2.3.4    Option Settings
                                                                       To display the setting for the line
Type help(options) to get full details of option settings. There are
                                                                      width (in characters), type:
a large number. To change to 60 the number of characters that will
                                                                      options()$width
be printed on the command line, before wrapping, do:
                                                                      [1] 54
options(width=60)
    The printed result of calculations will, unless the default is
changed (as has been done for most of the output in this document)
often show more significant digits of output than are useful. The
following demonstrates a global (until further notice) change:        Use signif() to affect one statement
                                                                      only. For example
sqrt(10)                                                                signif(sqrt(10),2)
[1] 3.162                                                             NB also the function round().
opt <- options(digits=2) # Change until further notice,
                                   # or until end of session.
sqrt(10)
[1] 3.2
options(opt)                       # Return to earlier setting
    Note that options(digits=2) expresses a wish, which R will
not always obey!
Rounding will sometimes introduce small inconsistencies!
For example:
round(sqrt(85/7), 2)
[1] 3.48
round(c(sqrt(85/7)*9,            3.48*9), 2)
[1] 31.36 31.32

                                                                      the r working environment              35
2.4     Enhancing the R experience — RStudio
                                                                      The screenshots here are for version
The url for RStudio is http://www.rstudio.com/. Click on the          0.98.501 of RStudio.
icon for the downloaded installation file to install it. An RStudio
icon will appear. Click on the icon to start RStudio. RStudio should
find any installed version of R, and if necessary start R. Figure 2.1
shows an RStudio display, immediately after starting up and enter-
ing, very unimaginatively, 1+1.
                                                                      Figure 2.1: Here is shown the RStudio
                                                                      interface, after starting up and entering
                                                                      1+1.

 36   learning and exploring r
     Techncally, RStudio offers an Interactive Development Environ-       Extensive and careful RStudio docu-
 ment. It provides, from a graphical user interface, a range of abilities mentation can be accessed, assuming
 that are helpful for organizing and managing work with R. Helpful        an internet connection, from the Help
                                                                          drop-down menu. The notes included
 features of RStudio include:                                             here are designed to draw attention to
• The organisation of work into projects.                                 some of the more important RStudio
                                                                          abilities and features.
• The recording of files that have been accessed from RStudio, of
   help pages accessed, and of plots. The record of files is maintained
   from one session of a project to the next.
• By default, a miniature is displayed of any graph that is plotted. A
   single click expands the miniature to a full graphics window.
• The editing, maintenance and display of code files.
• Abilities that assist reproducible reporting. Markup text sur-          Alternative available types of markup
   rounds R code that is incorporated into a document, with option        are R Markdown or R HTML or
   settings used to control the inclusion of code and/or computer out-    Sweave with LaTeX.
   put in the final document. Output may include tables and graphs.
• Abilities that help in the creation of packages.
 2.4.1     The RStudio file menu
                                                                          Figure 2.2: The RStudio File drop-
                                                                          down menu. The New File submenu
                                                                          has been further expanded.
     For now, the RStudio drop-down menus that are of most immedi-
 ate importance are File and Help. Here (Figure 2.2) is the File menu,
 with the New File submenu also shown.

                                                                         the r working environment              37
    Here, note the possibility of opening a new R script file, and
entering code into that file. Or, to open an existing R code file, click
on the Open File... submenu.
    The key combination <CTRL><ENTER> can be used to send                Here, <CTRL> is the control key and
code to the command line. Code that has been selected will be sent       <ENTER> is the Enter key.
to the command line. Or if no code has been selected, the line on
which the cursor is placed will be sent to the command line.
2.4.2     Compile a code notebook
Figure 2.3 shows a script file in the upper left panel. The code has
been sent to the command line, so that it also appears in the code
history panel on the upper right.
                                                                         Figure 2.3: Code from the script
                                                                         window has been sent to the command
    In Figure 2.3, take particular note of the icon on which you can     line.
click to create an R notebook. Upon clicking this icon, the system
will ask for a name for the file. It will then create an HTML file that
has, along with the code and comment, the compluter output. An           For the code that is shown, the HTML
alternative to clicking on the icon is to click on the File drop-down    file that results will include the output
menu, and then on Compile Notebook... .                                  from summary(cars) and the graph
                                                                         from plot(cars).

38   learning and exploring r
2.5      Abilities for reproducible reporting
Markdown editors use simple markup conventions to control how
text and other document features will appear. For example:
  **Help** or __Help__ will be rendered as Help
  *Help* or _Help_ will be rendered as Help.
2.5.1     R Markdown
                                                                    R Markdown, as available under
Click on File | New File | R Markdown.... Clicking on HTML (alter-  RStudio, is an enhanced version of
natives are PDF, Word), on Document (alternatives are Presentation, Markdown. It adds the ability to
Shiny, From Template) and then on OK displays a simple skeleton R   include R code, surrounded by markup
Markdown document thus:                                             that controls what code and/or output
                                                                    will appear in the final document.
                                                                      R users are strongly encouraged
---                                                                 to use R Markdown, or another such
title: "Untitled"                                                   markup system that allows embedded
output: html_document                                               R code, for documenting any work
---                                                                 that is more than trivial. Those who
                                                                    are familiar with more sophisticated
                                                                    markdown languages may still, for
This is an R Markdown document. Markdown is a simple
                                                                    some types of work, find benefit in the
formatting syntax for authoring HTML, PDF, and MS                   simplicity and speed of working with
Word documents. For more details on using R Markdown                R markdown.
see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will
be generated that includes both content as well as
the output of any embedded R code chunks within the
document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added                    For tutorial purposes, the file can
to the code chunk to prevent printing of the R                      be processed as it stands. Click the
code that generated the plot.                                       Knit HTML button to start the process
                                                                    of generating the HTML file. When
    In actual use, one would edit out the text and R code and re-   prompted, enter a name for the file.
                                                                    An HTML file will be generated and
place it with one’s own text and R code chunks, then clicking on
                                                                    displayed in a browser.
Knit HTML. When prompted, enter a name for the file.

                                                                       the r working environment        39
R Markdown code chunk options
The markup that surrounds R code can include instructions on what
to do with R code and/or any output, including tables and graphs.
Should code be executed, should it be echoed, and what output text
and/or tables and/or graphs should appear in the final document?
    Here is an example of code with surrounding markup, with
the code chunk options fig.width and fig.height giving
the width and height of the initial figure, and out.width giv-
ing the width to which it should be scaled in the final document:
```{r plotgph, fig.width=7, fig.height=6, out.width="80%"}
plot(cars)
```
    Giving the code chunk a name, here plotgph, is optional. The       Other possible settings include:
fig.width and fig.height settings control the size of the output       echo=FALSE (do not show code), &
plot, before it is scaled to fit within the available line width. The  eval=FALSE (do not evaluate).
out.width setting controls the width (here given as a percentage
of the line width) in the final HTML document. The width may
alternatively be given in pixels, e.g., ‘out.width="600px"‘.
    An image from a file pic.png that has been generated separately
from the markup R code can be input thus:
    ```{r, out.width="80%"}
    knitr::include\_graphics("pic.png")
    ```
∗ Inclusion     of HTML in R Markdown documents
Note also that HTML markup can be included in R Markdown doc-
uments. The following is a less preferred alternative to the R code
knitr::include_graphics("pic.png") whose use was demon-
strated above:
<IMG SRC="pic.png" alt="Show this, if no image" STYLE="width: 1200px"/>
    The image position can if necessary be adjusted thus:
<IMG SRC="pic.png" alt="Show this, if no image" STYLE="position:absolute;
TOP:-25px; LEFT:40px; WIDTH:800px; HEIGHT:500px"/>
R Presentation
Note the R Presentation variant of R Markdown. To display a simple
skeleton document, click on:
   File | New File | R Presentation
An R Presentation document is a specific type of R Markdown docu-
ment that is formatted to provide slides that can be displayed using a
browser.
    Click on Knit HTML to process the document, either as it stands
or after replacing the sample text and code with one’s own text and
code.

40    learning and exploring r
2.5.2     ∗ Other   markup types – HTML, LaTeX, . . .
R HTML
                                                                      Also available is reStructuredText
Click on File | New File | R HTML to display a skeleton HTML doc-     (reST), which is an extended variant of
ument that has embedded R code. The following shows the markup        R Markdown.
format:
<!--begin.rcode fig.width=7, fig.height=6, out.width="600px"
plot(cars)
end.rcode-->
    Again, the document that appears can be processed as it stands –
click on Knit HTML.
R Sweave:
Click on File | New File | R Sweave to display a template for a La-
TeX file. The web page http://maths-people.anu.edu.au/
~johnm/r-book/knitr/ has files that demonstrate the use of knitr
Sweave type markup.
2.5.3     RStudio documentation – markup and other
Extensive RStudio documentation is available online. Click on Help
| RStudio Docs to go to the relevant web page. For R Markdown and
R Presentation, note the documentation files for Using R Mark-
down. LATEX users should note the Sweave and knitr documenta-
tion files.
2.5.4     A strategy for RStudio project management
RStudio is designed to encourage good project management prac-
tices, using a strategy akin to the following:
   Set up each new project in its own working directory.
   For each project, maintain one or more script files that holds the
   code. Script files can be compiled into "notebooks" for purposes
   of keeping a paper record.
   Script files are readily expanded into R Markdown documents –
   a simple form of "reproducible reporting" document. They can as
   required be expanded into a draft for a paper.
2.6      Summary and Exercises
2.6.1     Summary
   Each R session has a working directory, where R will by default
   look for files or store files that are external to R.

                                                                         the r working environment              41
                                                                         From within functions, R will look
   User-created R objects are added to the workspace, which is at the    first in the functions environment,
                                                                         and then if necessary look within the
   base of a search list, i.e., a list of “databases” that R will search search list.
   when it looks for objects.
   It is good practice to keep a separate workspace and associated
   working directory for each major project. Use script files to keep a
   record of work.                                                       Before making big changes to the
                                                                         workspace, it may be wise to save the
   At the end of a session an image of the workspace will typically      existing workspace under a name (e.g.,
   (respond “y” when asked) be saved into the working directory.         Aug27.RData) different from the
   Note also the use of attach() to give access to objects in an         default .RData.
   image (.RData or .rda) file.3                                         3
                                                                           Include the name of the file (option-
                                                                         ally preceded by a path) in quotes.
   R has an extensive help system. Use it!
 2.6.2     Exercises
                                                                         The function DAAG::datafile()
 Data files used in these exercises are available from the web page      is able to place in the working di-
 http://www.maths.anu.edu.au/~johnm/datasets/text/.                      rectory any of the files: fuel.txt
                                                                         molclock1.txt, molclock2.txt, travel-
1. Place the file fuel.txt to your working directory.                    books.txt. Specify, e.g.
                                                                            datafile(file="fuel")
2. Use file.show() to examine the file, or click on the RStudio
   Files menu and then on the file name to display it. Check carefully
   whether there is a header line. Use the RStudio menu to input
   the data into R, with the name fuel. Then, as an alternative, use
   read.table() directly. (If necessary use the code generated by
   RStudio as a crib.) In each case, display the data frame and check
   that data have been input correctly.
                                                                         A shortcut for placing these files in the
3. Place the files molclock1.txt and molclock2.txt in a directory        working directory is:
                                                                            datafile(file=c("molclock1",
   from which you can read them into R. As in Exercise 1, use the                              "molclock2"))
   RStudio menu to input each of these, then using read.table()
   directly to achieve the same result. Check, in each case, that data
   have been input correctly.
   Use the function save() to save molclock1, into an R image file.
   Delete the data frame molclock1, and check that you can recover
   the data by loading the image file.
4. The following counts, for each species, the number of missing val-
   ues for the column root of the data frame DAAG::rainforest:
   library(DAAG)
   with(rainforest, table(complete.cases(root), species))
   For each species, how many rows are “complete”, i.e., have no
   values that are missing?
5. For each column of the data frame MASS::Pima.tr2, determine
   the number of missing values.

  42   learning and exploring r
 6. The function dim() returns the dimensions (a vector that has the
    number of rows, then number of columns) of data frames and
    matrices. Use this function to find the number of rows in the data
    frames tinting, possum and possumsites (all in the DAAG
    package).
 7. Use mean() and range() to find the mean and range of:
  (a) the numbers 1, 2, . . . , 21
  (b) the sample of 50 random normal values, that can be generated
       from a normaL distribution with mean 0 and variance 1 using
       the assignment y <- rnorm(50).                                    The datasets package that has the data
  (c) the columns height and weight in the data frame women.             frame women is by default attached
                                                                         when R is started.
    Repeat (b) several times, on each occasion generating a nwe set of
    50 random numbers.
 8. Repeat exercise 6, now applying the functions median() and
    sum().
 9. Extract the following subsets from the data frame DAAG::ais
  (a) Extract the data for the rowers.
  (b) Extract the data for the rowers, the netballers and the tennis
       players.
  (c) Extract the data for the female basketballers and rowers.
10. Use head() to check the names of the columns, and the first
    few rows of data, in the data frame DAAG::rainforest. Use
    table(rainforest$species) to check the names and numbers
    of each species that are present in the data. The following extracts
    the rows for the species Acmena smithii
    Acmena <- subset(rainforest, species=="Acmena smithii")
    The following extracts the rows for the species Acacia
    mabellae and Acmena smithii:
                      AcSpecies <- subset(rainforest, species %in% c("Acacia mabellae",
                                                                                 "Acmena smithii"))
    Now extract the rows for all species except C. fraseri.

3
Examples — Data analysis with R

44    learning and exploring r
       Science,            Notes on the role of statistics and statistical
       statistics & R      analysis in the wider scientific enterprise
       Scatterplot         Scatterplot matrices can give useful insights on
       matrices            data that will be used for regression or related
                           calculations.
       Transformation      Data often require transformation prior to entry
                           into a regression model.
       Model               Fitting a regression or other such model gives,
       objects             in the first place, a model object.
       Generic             plot(), print() and summary() are examples
       functions           of generic functions. With a dataframe as
                           argument plot() gives a scatterplot matrix.
                           With an lm object, it gives diagnostic plots.
       Extractor           Use an extractor function to extract output from
       function            a model object. Extractor fucntions are generic
                           functions
       List objects        An lm model object is a list object. Lists are
                           used extensively in R.
    This chapter will use examples to illustrate common issues in           Issues that will be noted include
the exploration of data and the fitting of regression models. It will       the use of generic functions such
                                                                            as plot() and print(), the way
round out the discussion of Chapters 1 and 2 by adding some further
                                                                            that regression model objects are
important technical details.                                                structured, and the use of extractor
    The notes that follow assume a knowledge of basic statistical           functions to extract information from
ideas and methods, to the extent that readers will be comfortable           model objects.
with output that includes details of standard errors, t-statistics, and
p-values. At one point, there is a mention of Bayesian prior proba-
bility.
    There is use, in several places, of cross-validation for assessing
predictive accuracy. For this, data is split up into several subsets (10
is a common choice). Each subset is then left out in turn for use to
check predictive accuracy when the model is fitted to the remaining
data. Once the process is complete, predictions made independently
of the observed values are available for all observations. Differences
between observed values and predictions made independently of
those values can then be used to assess predictive accuracy.
    In bootstrap resampling, repeated with replacement samples are
taken from the data. The model can then be refitted to each such
resample, generating multiple estimates of each coefficient or other
statistic of interest. Standard error estimates can then be based on
variation between the multiple estimates.

                                                                            examples — data analysis with r         45
 Notation, when referring to datasets
 Data will be used that is taken from several different R packages.
 The notation MASS::mammals, which can be used in code as well
 as in the textual description, makes it clear that the dataset mammals
 that is required is from the MASS package. Should another attached
 package happen to have a dataset mammals, there is no risk of confu-
 sion.
 3.1      Science, statistics, and R
 How does statistical analysis fit into the wider scientific enterprise?
 While not a central focus of the present notes, the issues that will
 now be noted are too important to be ignored.
     The R system is an enabler that allows users to do effective data           Note, however, the chapters on map
 analysis, and much else besides. These notes hint at its scope, pri-            overlays and on text mining — these
                                                                                 extend into areas that would not
 marily for data manipulation, for data analysis, and for graphics.
                                                                                 ordinarily be described as "data
     For the purposes of this next, the terms "data science" and "statis-        analysis".
 tics" are different names for an endeavour whose concern is to ex-
 tract meaning from data, leading for example to results that might
 be reported in a scientific paper, or that might form the basis for a
 business or government policy. Statistical issues and ideas are funda-
 mental to any use of data to make generalizations that extend beyond
 the particular data that have been collected, or that are otherwise
 available. They are fundamental, in that sense, to any scientific use
 of data. It is, at the same time, important to acknowledge that there
 are strict limits on what statistical analysis can achieve. Statistical
 analysis is a partner to, and not a substitute for, robust scientific pro-
 cesses. The use of experimental data provides the simplest context in
 which to explore this point further.
     For experimental work, over and above what may emerge from
 a statistical analsysis, the demand is that results be replicable. Lab-
 oratory studies have repeatedly shown shown that drinking regular
 caffeinated coffee increases blood pressure, though with minimal
 long term effects.1 It is accepted that there is this effect, not from          1
                                                                                   Green et al. (1996)
 the statistical analysis of results from any individual trial, but be-
 cause the effect has been demonstrated in repeated trials. The role of
 statistical analysis has been:
1. to demonstrate that, collating the evidence from repeated trials, the
    effect does appear real;
2. to assess the magnitude of the effect.
     Worldwide, hundreds of thousands of randomised trials are con-
 ducted annually. What do they tell us? In clinical medicine, follow-
 up trials are common, and clear conclusions will often emerge from
 the careful collation of evidence that, in important cases, is likely to
 follow. In many other areas follow-up trials have until recently been
 uncommon. This is now changing, and for good reason. Independent

 46    learning and exploring r
 replication of the experimental process provides checks on the total
 experimental process, including the statistical analysis. It is unlikely
 that the same mistakes in experimental procedure and/or statistical
 analysis will be repeated.
      Papers that had a key role in getting attention to reproducibility               These replication rates are so low, in
 concerns have been Prinz et al. (2011) and (Begley and Ellis, 2012),                  the areas to which these papers relate,
                                                                                       that they make nonsense of citations
 the first (6 out of 53 "landmark" studies reproduced) relating to drug
                                                                                       to published individual trial results as
 trials, and the second (19 out of 65 "seminal" studies) to cancer                     evidence that a claimed effect has been
 drug trials. Since those studies appeared, results have appeared from                 scientifically demonstrated.
 systematic attempts to reproduce published work in psychology
 (around 40%), in laboratory economics (11 of 18), and in social
 science (12 of 18).
      Many of the problems that these studies identify extend, also,
 into research and associated analyses that works with observational
 data. In any attempt to draw hard conclusions from observational
 data, in a case where the aim is to compare two groups, there are
 certain to be many more differences than the difference that is of
 interest. One application of regression methods is to do "covariate
 adjustments". The limitations of such an approach are not as widely
 understood as they should be. There has to be confidence that all
 relevant covariates are accounted for, that they are measured with
 adequate accuracy, and that the form of the adjustment (e.g., x, or
 log( x), or x2 ) is close to correct.
      In a hard-hitting paper titled "Cargo-cult statistics and scien-
 tific crisis", Stark and Saltelli (2018) comment, quoting also from
 Edwards and Roy (2017):
    While some argue that there is no crisis (or at least not a systemic problem),
    bad incentives, bad scientific practices, outdated methods of vetting and dis-
    seminating results, and techno-science appear to be producing misleading and
    incorrect results. This might produce crisis of biblical proportions: as Ed-
    wards and Roy write: “If a critical mass of scientists become untrustworthy, a
    tipping point is possible in which the scientific enterprise itself becomes inher-
    ently corrupt and public trust is lost, risking a new dark age with devastating
    consequences to humanity.”
 Statistical issues are then front and central in what many are iden-
 tifying as a crisis, but are not the whole story. The crisis is one that
 scientists and statisticians need to tackle in partnership.
      In a paper that deserves much more attention than it has received,
 (Tukey, 1997), John W Tukey argued that, as part of the process of
 fitting a model and forming a conclusion, there should be incisive
 and informed critique of the data used, of the model, and of the
 inferences made. It is important that analysts search out available
 information about the processes that generated the data, and consider
 critically how this may affect the reliance placed on it. Other specific
 types of challenge (this list is longer than Tukey’s) may include:
• For experiments, is the design open to criticism?
• Look for biases in processes that generated the data.
• Look for inadequacies in laboratory procedure.

                                                                        examples — data analysis with r 47
• Use all relevant graphical or other summary checks to critique the
    model that underpins the analysis.
• Where possible, check the performance of the model on test data
    that reflects the manner of use of results. (If for example predic-
    tions are made that will be applied a year into the future, check
    how predictions made a year ahead panned out for historical data.)
• For experimental data, have the work replicated independently
    by another research group, from generation of data through to
    analysis.
• Have analysis results been correctly interpreted, in the light of
    subject area knowledge.
 Exposure to diverse challenges will build (or destroy!) confidence
 in model-based inferences. We should trust those results that have
 withstood thorough and informed challenge.
      Data do not stand on their own. An understanding of the pro-
 cesses that generated the data is crucial to judging how data can
 and connot reasonably be used. So also is application area insight.
 Numerous studies found that women taking combined hormone re-
 placement therapy (HRT) also had a lower incidence of coronary
 heart disease (CHD), relative to women no taking HRT. Random-
 ized trials showed a small but clear increase in risk. The risk was
 lower in the population as a whole because, for reasons associated
 with socio-economic status, women taking HRT were on the whole
 eating healthier food and getting more exercise. In analyses of the
 population data, account had not been taken of lifestyle effects.
 3.1.1     What does R add to the mix?
 R clearly has a huge range of abilities for manipulating data, fitting
 and checking statistical models, and for using graphs and tables
 to present results. More than this, it has extensive reproducible re-
 porting abilities that can be used to allow others to repeat the data
 manipulation, analysis, and steps in the processing of output that
 have led to an eventual paper or report. A file is provided that mixes
 code with the text for the eventual document, and that is then pro-
 cessed ("woven" or "knitted") to provide the final document, com-
 plete with analysis output, tables, graphs, and code (if any) that is
 to be included in the final document. This makes it straightforward
 for referees, or for anyone with an interest in the work, to check the
 analysis and/or try modifications. The publication of data and code
 is an important step on the way to making results more open and
 transparent, and to encouraging informed post-publication critique.
 3.2      Generalization beyond the available data
 A common statistical analysis aim is to assess the extent to which
 available data supports conclusions that extend beyond the circum-

48    learning and exploring r
stances that generated the data. The hope is that available data – the
sample values – can be used as a window into a wider population.
     Introductory statistics courses are likely to focus on models that
assume that error terms are independently and identically normally
distributed — they make the iid normal assumption. This involves
the separate assumptions of independence, assumptions of homo-
geneity of variance (i.e., the standard deviations of all measurements
are the same), and normality. Strict normality is commonly, depend-
ing on the use that will be made of model results, unnecessary. Much
of the art of applied statistics lies in recognizing those assumptions
that are important and need careful checking. Models are said to be
robust against those assumptions that are of relatively minor conse-
quence.
     Most of the standard elementary methods assume that all popula-
tion values are chosen with equal probability, independently between
sample values. In designed experiments and in sample surveys, ran-
domization mechanisms are used to ensure this independence. and
why random sampling is so important in designed .
     Where there has not been explicit use of a randomization mecha-
nism, it is necessary to consider carefully how this may have affected
the data. Is some form of dependence structure likely? Temporal
and spatial dependence arise because values that are close together
in time or space are relatively more similar. Is there clustering that
arises because all individuals within chosen streets or within chosen
families have been included? Two individuals in the same family
or in the same street may be more similar than two individuals cho-
sen at random from the same city suburb. Model choice and model
fitting then needs to account for such effects.
     Models account for both fixed and random effects. In a straight
line model, the fixed effect is the line, while the random effect ac-
counts for variation about the line. The random part of the model can
matter a great deal.
3.2.1      Models for the random component
For each distribution, there are four functions, with names whose
first letter is, respectively, d (probability or probability density), p
(cumulative probability), q (quantile), and r (generate a random
sample). Functions that have d as their first letter are probabilities
for distributions that are discrete, or densities) for continuoua distri-
butions.
     Common discrete distributions are the binomial and the Pois-
son. The betabinomial is often used to model binomial type data
that have a larger than binomial variance. The negative binomial is
widely used to model count data that have a larger than Poisson vari-
ance. Flexible implementations of the betabinomial, including the
ability to model the scale parameter that controls the variance, have
appeared only recently. Alternatives to the betabinomial have been

                                                                          examples — data analysis with r                                       49
little explored. By constrast, for count data, there has been extensive
investigation of the negative binomial, as well as of other alternatives
to the Poisson.
     Easily the most widely used distribution for continuous data is
the normal, also known as the Gaussian distribution. Data where the
error term is not normal will often come close to normal after trans-
formation. The most widely used transformation for this purpose is
the logarithmic.
     The Central Limit Theorem will, in
     Other continuous distributions are common in the context of
special types of model, e.g., the exponential distribution, or the
Weibull of which it is a special case, in waiting time models.
3.3     The Uses of Scatterplots
## Below , the dataset MASS :: mammals will be required
library (MASS , quietly =TRUE)
3.3.1    Transformation to an appropriate scale
                                                                               Among other issues, is there a wide
A first step is to elicit basic information on the columns in the data,        enough spread of distinct values that
including information on relationships between explanatory vari-               data can be treated as continuous.
ables. Is it desirable to transform one or more variables?
    Transformations are helpful that ensure, if possible, that:
• All columns have a distribution that is reasonably well spread out
  over the whole range of values, i.e., it is unsatisfactory to have
  most values squashed together at one end of the range, with a
  small number of very small or very large values occupying the
  remaining part of the range.
• Relationships between columns are roughly linear.
• the scatter about any relationship is similar across the whole range
  of values.
                                                                                                   A: Unlogged data
                                                                                                                                         ●
It may happen that the one transformation, often a logarithmic trans-                       5000
                                                                                                                  ●
formation, will achieve all these at the same time.                                         4000
    The scatterplot in Figure 3.1A, showing data from the dataset                  brain
                                                                                            3000
MASS::mammals, is is an extreme version of the common situation                             2000
                                                                                                   ●
where positive (or non-zero) values are squashed together in the                            1000
                                                                                                   ●●●
                                                                                                    ●
                                                                                                      ●
                                                                                                   ●
                                                                                                   ●
                                                                                                   ●●
                                                                                                   ●
                                                                                                   ●
                                                                                                   ●
lower part of the range, with a tail out to the right. Such a distribu-                        0   ●
                                                                                                   0    1000       3000       5000
tion is said to be “skewed to the right”.
                                                                                                                    body
    Code for Figure 3.1A
plot( brain ~ body , data= mammals )
mtext (side =3, line =0.5 , adj =0,                                                                B: Log scales (both axes)
       "A: Unlogged data", cex =1.1)                                                                                                    ● ●
                                                                                                                             ●
                                                                                           1e+03                                    ●
   Figure 3.1B shows the scatterplot for the logged data. Code for                                                       ●● ●●●
                                                                                                                                  ●●
                                                                                                                               ●● ●
                                                                                                                                  ●
                                                                                                                                  ●
                                                                                           1e+02                          ●● ●●
                                                                                                                               ●
Figure 3.1B is:                                                                    brain                            ● ●
                                                                                                                       ●
                                                                                                                       ●
                                                                                                                       ●
                                                                                                                        ●
                                                                                                                        ●
                                                                                                                        ●
                                                                                                                        ●
                                                                                                                              ●
                                                                                                                 ●● ●●●
                                                                                                                     ●
                                                                                           1e+01
                                                                                                                 ● ●●● ●
                                                                                                             ● ● ● ●
plot( brain ~ body , data=mammals , log="xy")                                                                ● ●●
                                                                                                             ●  ●
                                                                                                                   ●
                                                                                                                       ●
                                                                                           1e+00           ●●●
                                                                                                         ●
                                                                                                       ● ●●
                                                                                                   ●
                                                                                           1e−01
                                                                                                   1e−02        1e+00       1e+02       1e+04
                                                                                                                    body
                                                                               Figure 3.1: Brain weight (g) versus
                                                                               Body weight (kg), for 62 species of
                                                                               mammal. Panel A plots the unlogged
                                                                               data, while Panel B has log scales for
                                                                               both axes, but with axis labels in the
                                                                               original (unlogged) units.

 50    learning and exploring r
 mtext (side =3, line =0.5 , adj =0,
          "B: Log scales (both axes)", cex =1.1)
      Where, as in Figure 3.1A, values are concentrated at one end of
 the range, the small number (perhaps one or two) of values that lie at
 the other end of the range will, in a straight line regression with that
 column as the only explanatory variable, be a leverage point. When
 it is one explanatory variable among several, those values will have
 an overly large say in determining the coefficient for that variable.
      As happened here, a logarithmic transformation will often re-
 move much or all of the skew. Also, as happened here, such transfor-
 mations often bring the added bonus that relationships between the
 resulting variables are approximately linear.
 3.3.2     The Uses of Scatterplot Matrices
 Subsequent chapters will make extensive use of scatterplot matrices.
 A scatterplot matrix plots every column against every other column,                        The datasets package is, in an off-
 with the result in the layout used for correlation matrices. Figure 3.2                    the-shelf installation, attached when R
 shows a scatterplot matrix for the datasets::trees dataset.                                starts.
  Interpreting Scatterplot Matrices:
                                                                                                   65 70    75  80  85
  For identifying the axes for each panel                                                                              ●                        ●
                                                                                                                                                  20
                                                                                                                ●●                       ● ●      18
                                                                                                                 ●                        ●
                                                                                                         ●    ●                     ●●            16
  - look across the row to the diagonal to identify the                           Girth           ●     ●
                                                                                                           ● ●●
                                                                                                           ●         ●●
                                                                                                                               ●● ●●
                                                                                                                              ●● ●
                                                                                                                                    ●             14
                                                                                                            ●                ●●
     variable on the vertical axis.                                                                 ●
                                                                                                      ●
                                                                                                         ●
                                                                                                            ●● ●●● ●        ●
                                                                                                                            ●●●
                                                                                                                             ●●
                                                                                                                             ●
                                                                                                                             ●
                                                                                                                              ●
                                                                                                                                                  12
                                                                                                                                                  10
                                                                                                 ●●    ●                 ●
                                                                                                                         ●                        8
  - look up or down the column to the diagonal for the                                        ●                                                 ●
                                                                      85           ●●                                           ●●
     variable on the horizontal axis.                                 80
                                                                               ●
                                                                              ●●
                                                                                ●    ●
                                                                                      ●
                                                                                          ●
                                                                                          ●●
                                                                                                                             ●
                                                                                                                             ●● ●
                                                                                                                               ● ●
                                                                                                                                           ●
                                                                                                                                         ●●●
                                                                                ●●      ●                                     ●       ●
                                                                      75       ●●  ● ●                Height                 ●
                                                                                                                             ●
                                                                                                                             ●●     ●
                                                                              ●     ● ●                                     ●       ●
  Each below diagonal panel is the mirror image of the                70 ●
                                                                               ●
                                                                                 ●                                       ● ●●
                                                                      65  ●                                              ●● ●
  corresponding above diagonal panel.                                      ●         ●                                   ●
                                                                                              ●                        ●
                                                                                                                                                  70
                                                                                                                                                  60
                                                                                          ●●
                                                                                          ●                     ●●●
                                                                                           ●                    ●                                 50
 ## Code used for the plot                                                              ●                     ●                 Volume            40
                                                                                   ●● ● ●                ●●
                                                                                                               ●●    ●
                                                                                      ●
 plot(trees , cex.labels =1.5)                                                  ●●
                                                                                ●
                                                                                    ●
                                                                                ●● ●●
                                                                                ●                 ●
                                                                                                      ●
                                                                                                        ●
                                                                                                           ●●● ●● ●
                                                                                                                      ●                           30
                                                                                                                                                  20
                                                                              ●
                                                                              ●●                         ● ●     ●
                                                                               ●                    ●
     # Calls pairs(trees)                                                ●●●                     ●●    ●                                          10
                                                                         8   10      14    18                            10      30     50   70
                                                                                            Figure 3.2: Scatterplot matrix for the
      Notice that plot(), called with the dataframe trees, has in                           trees data, obtained using the default
 turn called the plot method for a data frame, i.e., it has called                          plot() method for data frames.
                                                                                            The scatterplot matrix is a graphical
 plot.data.frame() which has in turn called the function
                                                                                            counterpart of the correlation matrix.
 pairs().
      The scatterplot matrix may be examined, if there are enough
 points, for evidence of:
1. Strong clustering in the data, and/or obvious outliers;                                  The scatterplot matrix is best used
                                                                                            as an initial coarse screening device.
2. Clear non-linear relationships, so that a correlation will underesti-                    Skewness in the individual distribu-
    mate the strength of any relationship;                                                  tions is better checked using plots of
                                                                                            density estimates.
3. Severely skewed distributions, so that the correlation is a biased
    measure of the strength of relationship.

                                                                           examples — data analysis with r                          51
3.4     World record times for track and field events
The first example is for world track and road record times,                     Note also the use of these data in
as at 9th August 2006. Data, copied down from the web page                      the exercise at the end of Chapter 2
http://www.gbrathletics.com/wrec.htm, are in the dataset                        (Section 1.9.2)
DAAG::worldRecords.
Data exploration
First, use str() to get information on the data frame columns:
library (DAAG , quietly =TRUE)
str( worldRecords , vec.len =3)
'data.frame ':      40 obs. of 5 variables :
 $ Distance    :    num 0.1 0.15 0.2 0.3 0.4 0.5 0.6 0.8 ...
 $ roadORtrack :    Factor w/ 2 levels "road "," track ": 2 2 2 2 2 2 2 2 ...
 $ Place       :    chr " Athens " " Cassino " " Atlanta " ...
 $ Time        :    num 0.163 0.247 0.322 0.514 ...
 $ Date        :    Date , format : "2005 -06 -14" "1983 -05 -22" ...
    Distinguishing points for track events from those for road events
is easiest if we use lattice graphics, as in Figure 3.3.
## Code
library ( lattice )
xyplot (Time ~ Distance , scales =list(tck =0.5),                                              road             ●       track   ●
        groups = roadORtrack , data= worldRecords ,
                                                                                        1500                                    ●
        auto.key =list( columns =2), aspect =1)
## On a a colour device the default is to use
## different colours , not different symbols ,                                          1000
## to distinguish groups.                                                        Time                               ●
                                                                                                                    ●
                                                                                         500
    Clearly increases in Time are not proportional to increases in                                          ●
                                                                                                                ●
                                                                                                        ●
Distance. Indeed, such a model does not make sense; velocity                              0    ●
                                                                                               ●
                                                                                               ●●
                                                                                                ●
                                                                                                ●
                                                                                                   ●
                                                                                                 ●●●
                                                                                                    ●
decreases as the length of the race increases. Proportionality when                            0    50 100 150 200 250 300
logarithmic scales are used for the two variables does make sense.                                              Distance
    Figure 3.4 uses logarithmic scales on both axes. The two panels
differ only in the labeling of the scales. The left panel uses labels on        Figure 3.3: World record times versus
                                                                                distance, for field and road events.
scales of loge , while the right panel has labels in the orginal units.
Notice the use of auto.key to obtain a key.
## Code for Left panel
xyplot (log(Time) ~ log( Distance ),
        groups = roadORtrack , data= worldRecords ,
        scales =list(tck =0.5),
        auto.key =list( columns =2), aspect =1)
## Right panel
xyplot (Time ~ Distance , groups = roadORtrack ,
        data= worldRecords ,
        scales =list(log =10, tck =0.5),
        auto.key =list( columns =2), aspect =1)

52        learning and exploring r
                                                                                                                                                       Figure 3.4: World record times versus
                       road           ●                 track               ●                  road          ●                 track               ●
                                                                                                                                                       distance, for field and road events,
                                                                                                                                                       using logarithmic scales. The left
                                                                            ●                                                                      ●
                                                                        ●
                                                                                       10^3                                                    ●       panel uses labels on scales of loge ,
                   6                                                ●                                                                      ●
                                                               ●
                                                                ●
                                                                                                                                      ●
                                                                                                                                       ●               while in the right panel, labeling is in
                                                                                       10^2                                       ●
      log(Time)
                                                           ●
                                                          ●●                                                                     ●●
                   4                                    ●●
                                                        ●                                                                      ●●
                                                                                                                               ●                       the orginal units, expressed as powers
                                                                                Time
                                                      ●●                                                                     ●●
                                                    ●●                                                                     ●●
                                               ●
                                                   ●
                                                                                       10^1                           ●
                                                                                                                          ●                            of 10.
                   2                           ●                                                                      ●
                                          ●●
                                          ●                                                                      ●●
                                                                                                                 ●
                                     ●●                                                                     ●●
                   0               ●●                                                  10^0               ●●
                                  ●                                                                      ●
                                 ●                                                                      ●
                            ●●                                                                     ●●
                        ●                                                                      ●
                  −2
                        −2           0              2          4            6                 10^−1 10^0                  10^1        10^2
                                  log(Distance)                                                              Distance
Fitting a regression line
The plots suggest that a line is a good fit. Note however that the
data span a huge range of distances. The ratio of longest to shortest
distance is almost 3000:1. Departures from the line are of the order
of 15% at the upper end of the range, but are so small relative to this
huge range that they are not obvious.
    The following uses the function lm() to fit a straight line fit to                                                                                 The name lm is a mnemonic for linear
the logged data, then extracting the regression coefficients:                                                                                          model.
worldrec.lm <- lm(log(Time) ~ log( Distance ),
                    data= worldRecords )
coef( worldrec.lm )                                                                                                                                    The equation gives predicted times:
     ( Intercept ) log( Distance )                                                                                                                      Time
                                                                                                                                                        [       =     e0.7316 × Distance1.1248
           0.7316          1.1248                                                                                                                               =     2.08 × Distance1.1248
                                                                                                                                                       This implies, as would be expected,
There is no difference that can be detected visually between the                                                                                       that kilometers per minute increase
track races and the road races. Careful analysis will in fact find no                                                                                  with increasing distance. Fitting a line
difference.                                                                                                                                            to points that are on a log scale thus
                                                                                                                                                       allows an immediate interpretation.
3.4.1                  Summary information from model objects
In order to avoid recalculation of the model information each time                                                                                     The name worldrec.lm is used to
that some different information is required, we store the result from                                                                                  indicate that this is an lm object, with
the lm() calculation in the model object worldrec.lm.                                                                                                  data from worldRecords. Use any
                                                                                                                                                       name that seems helpful!
    Note that the function abline() can be used with the model
object as argument to add a line to the plot of log(Time) against                                                                                      Plot points; add line:
log(Distance).                                                                                                                                         plot(log(Time) ~ log( Distance ),
                                                                                                                                                            data = worldRecords )
                                                                                                                                                       abline ( worldrec.lm )
Diagnostic plots
Insight into the adequacy of the line can be obtained by examining                                                                                     By default, there are four “diagnostic”
the “diagnostic” plots, obtained by “plotting” the model object.                                                                                       plots.
Figure 3.5 following shows the first and last of the default plots:
## Code
plot( worldrec.lm , which=c(1,5),
      sub.caption =rep("" ,2))

                                                                                                                                                                        examples — data analysis with r            53
                                                                                                                                                                             Figure 3.5: First and last of the default
                              Residuals vs Fitted                                                             Residuals vs Leverage                                          diagnostic plots, from the linear
                                                                                                                                                                  1
                                                                         Standardized residuals
          0.15
                                                                  40 ●                             3                                            40 ●                         model for log(record time) versus
                                                                  ● 39                                                                      ● 39
                                                                                                                                                                  0.5        log(distance), for field and road
          0.10                                                                                     2
     Residuals
                                                                  ● 24                                                                      ● 24                             events.
                                     ●                                                                                    ●
          0.05   ●                ●    ●●
                                       ●                                                           1                 ●●
                                                                                                                      ●             ●                         ●
                                   ●●     ●
                                                                                                                              ● ●
                                          ●                                                                      ●
                                            ●●●
                                              ●            ● ●                                                  ●●
                                                                                                                ●
                                                                                                                ●             ●
                                                             ●                                                                      ●
          0.00        ●                                                                                                             ●                  ●
                                              ●           ●                                        0            ●         ●
                                                  ●                                                             ●
                                  ●               ●●                                                            ●●
                                                          ●                                                               ●             ●
                              ●                                                                                                             ●
      −0.05               ●                       ●● ●                                            −1            ●● ●                               ●
                                                   ●● ●                                                          ●● ●
                                                      ●
                                                    ●●●                                                             ●
                                                                                                                  ●●●
      −0.10
                                                                                                                 Cook's distance
                                                                                                  −2
                 −2               0       2         4         6                                        0.00          0.04               0.08           0.12
                                      Fitted values                                                                    Leverage
    Panel A is designed to give an indication whether the relationship
really is linear, or whether there is some further systematic com-
ponent that should perhaps be modeled. It does show systematic
differences from a line.
    The largest difference is more than a 15% difference.2 There are                                                                                                         2
                                                                                                                                                                               A difference of 0.05 on a scale
mechanisms for using a smooth curve to account for the differences                                                                                                           of loge translates to a difference of
                                                                                                                                                                             just over 5%. A difference of 0.15
from a line, if these are thought important enough to model.
                                                                                                                                                                             translates to a difference of just over
    The plot in panel B allows an assessment of the extent to which                                                                                                          16%, i.e., slightly more than 15%.
individual points are influencing the fitted line. Observation 40 does
have both a very large leverage and a large Cook’s distance. The plot
on the left makes it clear that this is the point with the largest fitted
time. Observation 40 is for a 24h race, or 1440 min. Examine
worldRecords ["40", ]
     Distance roadORtrack Place Time        Date
40      290.2        road Basle 1440 1998 -05 -03
3.4.2            The model object
Functions that are commonly used to get information about model
objects are: print(), summary() and plot(). These are all
generic functions. The effect of the function depends on the class
of object that is printed (ie, by default, displayed on the screen) or or
plotted, or summarized.
    The function print() may display relatively terse output, while
summary() may display more extensive output. This varies from
one type of model object to another.
    Compare the outputs from the following:
print ( worldrec.lm )                                         # Alternatively , type worldrec.lm
Call:
lm( formula = log(Time) ∼ log( Distance ), data = worldRecords )
Coefficients :
  ( Intercept )                           log( Distance )
         0.732                                     1.125

54   learning and exploring r
summary ( worldrec.lm )
Call:
lm( formula = log(Time) ∼ log( Distance ), data = worldRecords )
Residuals :
      Min         1Q   Median         3Q      Max
-0.0807 -0.0497        0.0028    0.0377    0.1627
Coefficients :
                   Estimate Std. Error t value Pr(>|t|)
( Intercept )        0.73160      0.01241          59    <2e -16
log( Distance )      1.12475      0.00437         257    <2e -16
Residual standard error: 0.0565 on 38 degrees of freedom
Multiple R2 : 0.999 ,          Adjusted R2 : 0.999
F- statistic : 6.63e+04 on 1 and 38 DF , p-value: <2e -16
    Used with lm objects, print() calls print.lm(), while                Internally, summary(wtvol.lm)
summary() calls summary.lm(). Note that typing worldrec.lm               calls UseMethod("summary"). As
                                                                         wtvol.lm is an lm object, this calls
has the same effect as print(worldrec.lm).                               summary.lm().
3.4.3      The lm model object is a list
The model object is actually a list. Here are the names of the list
elements:
names ( worldrec.lm )
  [1] " coefficients " " residuals "            " effects "
"rank"
  [5] " fitted . values " " assign "            "qr"
"df. residual "
  [9] " xlevels "           "call"              "terms"
" model "
These different list elements hold very different classes and dimen-
sions (or lengths) of object. Hence the use of a list; any collection of
different R objects can be brought together into a list.
    The following is a check on the model call:
worldrec.lm $call
lm( formula = log(Time) ∼ log( Distance ), data = worldRecords )
    Commonly required information is best accessed using generic          Use extractor function coef():
extractor functions. Above, attention was drawn to print(),              coef( worldrec.lm )
summary() and plot(). Other commonly used extractor func-
tions are residuals(), coefficients(), and fitted.values().
These can be abbreviated to resid(), coef(), and fitted().
3.5      Regression with two explanatory variables
The dataset nihills in the DAAG package will be used for a regres-
sion fit in Section 8.6. This has record times for Northern Ireland

                                                                                                            examples — data analysis with r                                55
mountain races. Overview details of the data are:
str( nihills )
'data.frame ':                    23 obs. of 4 variables :
  $ dist : num                 7.5 4.2 5.9 6.8 5 4.8 4.3 3 2.5 12 ...
  $ climb : int                1740 1110 1210 3300 1200 950 1600 1500 1500 5080 ...
  $ time : num                 0.858 0.467 0.703 1.039 0.541 ...
  $ timef : num                1.064 0.623 0.887 1.214 0.637 ...
    Figure 3.6 uses the lattice function splom() (from the lattice                                                       The function splom() is a lattice
package) to give scatterplot matrices, one for the unlogged data,                                                        alternative to pairs(), giving a
and the other for the logged data. The left panel shows the unlogged                                                     different panel layout.
data, while the right panel shows the logged data:
   A: Untransformed data                                                          B: Log transformed data
                        ●                  ●                  ●    6                                   ●                      ●                      ●
                                                                           4 5 6                                                                         1.5 0.5 1.5
                                                                   5
                                                                   4                                ●                     ●                      ●       1.0
                                                                                                   ●                   ●                      ●
                                                                       timef 3                                                                           0.5 ltimef
                  ●                 ●                  ●                                     ●●                       ●●                   ●●
                                                                                                 ●                ●                       ●                          0.0
                ●               ●                   ●                         2               ●               ●●●                       ●
                                                                                         ●●● ●                  ●●    ●                ●●
                                                                                                                                        ●
                                                                                          ●                                           ●●
          ● ●●               ● ●●                 ●
                                                  ●                1 2 3            ● ● ●●
                                                                                         ●●●●
                                                                                            ●               ●●●●●●
                                                                                                            ●    ●●                ●
                                                                                                                                   ●●
                                                                                                                                    ●●
                                                                                                                                    ●●
                                                                                                                                                     −1.0 0.0      −0.5
          ●                 ●                   ●●                            1
     ●
        ●
        ●
      ●●●
      ●
        ●
        ●●●
         ●
         ●                ●
                          ●
                           ●●
                            ●
                           ●●
                           ●
                           ●●
                            ●
                             ● ●
                                             ●●
                                                ●
                                                ●
                                               ●●                                    ●                    ●                      ●
                                                                                                                                                                   −1.0
                        ●                  ●    4                               ●                      ●                      ●                                          ●
                                                          3   4                                                                    1.0 0.00.51.0
                                                3                                                   ●                     ●                                        ●
                                                                                                   ●                   ●           0.5                           ●
                  ●                 ●                time   2           ●                    ● ●●                 ● ●
                                                                                                                        ●          0.0 ltime 0.0               ●
                                                                                                                                                              ●●
                ●               ●                                     ●                  ●●● ●●               ●●                                             ●
                                                                                                                                                             ●
                                                                                                                ●● ●                            −0.5       ●●●
          ● ●●                   ●                          1       ●                    ●●●●                 ●●●●                                        ●
                                                                                                                                                          ●●
          ●                ●●● ●                  1    2          ●●●                    ●
                                                                                    ● ● ●●●●                ●
                                                                                                            ●● ●●
                                                                                                            ●                   −1.0 0.0                 ●
                                                                                                                                                         ●
                                                                                                                                                         ●●
                                                                                                                                                          ●
        ●
        ●
        ●
        ●
        ●●●
         ●                 ●
                           ●●
                            ●
                            ●● ●                                 ●
                                                                 ●
                                                                 ●●
                                                                                                                                                −1.0
     ●  ●
      ●●●
      ●  ●                ●
                          ●●●●                                   ●
                                                                ●●                   ●                    ●                                            ●          0.994
                        ●                                     ●                 ●                      ●                                             ●                   ●
                             8000 6000                                                                      9.0
                                                                                                                      8.08.59.0
                                                                                                    ●       8.5                                  ●                 ●
                             6000                                                               ●                                           ●                  ●
                                                                                                            8.0
                                                                                                                  lclimb 8.0
                  ●                                    ●                ●                ● ●       ●                                    ● ● ●               ● ●  ●
                                 climb
                                      4000                                              ●●                                7.5       ● ● ●                ● ●●
            ●   ●                                 ●                 ●               ●●    ●● ● ●                                   ●●●●●●                ●●●
        ●●                                      ●● ●              ●● ●                   ●●                                          ●                    ●●●
                                                                                                                                                          ●  ●
                           2000       2000                                                ● ●●              7.07.58.0 7.0          ●●
                                                                                                                                     ●●                   ●
                                                                                                                                                          ●
     ●●●●
        ●
        ●●●
         ●●
             ●                                ●●
                                              ●●
                                               ●●●
                                                ●
                                                ●
                                                ●
                                                                 ●
                                                                 ●
                                                                 ●
                                                                 ●
                                                                 ●
                                                                  ●
                                                                  ●
                                                                  ●
                                                                   ●                     ●  ●                                       ●
                                                                                                                                    ●                    ●
                                                                                                                                                         ●
                                                                                                                                                         ●
      ●●●●                                   ●●
                                              ●                 ●●                   ●                                           ●             0.924   ●             0.92
                                           ●                  ●                 ●     3.0                                     ●                      ●                   ●
               10   15                                                                         2.0 2.5 3.0
        15                                                                            2.5                              ●  ●                   ● ●                ●●
                                    ●                  ●                ●                                         ●                       ●                   ●
                                ●                   ●                 ●               2.0 ldist 2.0
        10 dist 10                                                                                            ●●      ●
                                                                                                                        ●
                                                                                                                                        ● ●
                                                                                                                                            ●
                                                                                                                                                             ●
                                                                                                                                                             ●●
                                                                                                                                                               ●
                             ● ●                 ●●                ●●                                       ● ●●●●                   ●●
                                                                                                                                    ●●                   ●●●
                           ● ●                  ●                 ●
                                                                                                   1.5      ●●● ●     ●            ●●
                                                                                                                                    ●●●●●                ●
                                                                                                                                                         ●
                                                                                                                                                          ●●
                                                                                                                                                          ●●●
                                                                                                                                                          ●
         5     10     5   ●●●
                            ●                 ●● ●               ●
                                                                  ●●
                                                                                    1.0 1.5 2.0                    ●                ●                    ●
                          ●●
                           ●●● ●
                             ●                ●
                                              ●
                                              ●●●
                                               ●●                ●
                                                                 ●
                                                                 ●
                                                                 ●
                                                                 ●
                                                                  ●
                                                                  ●                                       ●      ●               ● ●                   ● ●
                          ●●●                 ●
                                             ●●                  ●
                                                                ●●                                 1.0           ●        0.78     ●           0.945     ●        0.933
                                                                                                                         Figure 3.6: Scatterplot matrices for
                                                                                                                         the Northern Ireland mountain racing
                                                                                                                         data. The left panel is for the unlogged
    The following panel function was used to show the correlations:                                                      data, while the right panel is for the
showcorr <- function (x,y,... ){                                                                                         logged data. Code has been added that
      panel.xyplot (x,y,...)                                                                                             shows the correlations, in the lower
     xy <- current.panel.limits ()                                                                                       panel.
     rho <- paste(round(cor(x,y) ,3))
     eps <- 0.035*diff(range(y))
      panel.text (max(x), min(y)+eps , rho ,
                               pos =2, offset =-0.2)
}
    Code for the scatterplot matrix in the left panel is:
## Scatterplot matrix ; unlogged data
library ( lattice )
splom (~nihills , xlab="",
               main=list("A: Untransformed data", x=0,
               just="left", fontface ="plain"))
    For the right panel, create a data frame from the logged data:

56    learning and exploring r
lognihills <- log( nihills )
names ( lognihills ) <- paste0 ("l", names( nihills ))
## Scatterplot matrix ; log scales
splom (~ lognihills , lower.panel =showcorr , xlab="",
          main=list("B: Log transformed data", x=0,
          just="left", fontface ="plain"))
     Note that the data are positively skewed, i.e., there is a long tail Unlike paste(), the function
to the right, for all variables. For such data, a logarithmic transfor-   paste0() does not leave spaces
mation often gives more nearly linear relationships. The relation-        between text strings that it pastes
ships between explanatory variables, and between the dependent            together.
variable and explanatory variables, are closer to linear when loga-
rithmic scales are used. Just as importantly, issues with large lever-
age, so that the point for the largest data values has a much greater
leverage and hence much greater influence than other points on the
the fitted regression, are greatly reduced.
     Notice also that the correlation of 0.913 between climb and
dist in the left panel of Figure 3.6 is very different from the corre-
lation of 0.78 between lclimb and ldist in the right panel. Corre-
lations where distributions are highly skew are not comparable with
correlations where distributions are more nearly symmetric. The
statistical properties are different.
     The following regresses log(time) on log(climb) and
log(dist):
nihills.lm <- lm(ltime ~ lclimb + ldist ,
                        data= lognihills )
3.6      One-way Comparisons
The dataset tomato has weights of plants that were grown under one        A common strategy for getting a
of four different sets of experimental comditions. Five plants were       valid comparison is to grow the
grown under each of the treatments:                                       plants in separate pots, with a random
                                                                          arrangement of pots.
- water only
- conc nutrient
- 2-4-D + conc nutrient
- x conc nutrient
Figure 3.7, created using the function quickplot() from the gg-
plot2 package, shows the plant weights. Are the apparent differences
between treatments large enough that they can be distinguished sta-
tistically?                                                               Notice that “water only” is made the
                                                                          reference level. This choice makes
## Code                                                                   best sense for the analysis of variance
library ( ggplot2 )                                                       calculations that appear below.
tomato <- within (DAAG :: tomato ,
                        trt <- relevel (trt , ref="water only"))
quickplot (weight , trt , data=tomato ,
              xlab=" Weight (g)", ylab="")
                                                                          Observe that, to get estimates and SEs
                                                                          of treatment effects, tomato.aov
                                                                          can be treated as an lm (regression)
                                                                          object.

                                                                               examples — data analysis with r              57
             conc nutrient              ●     ●  ●          ●            ●
                                                                                    Figure 3.7: Weights (g) of tomato
                                                                                    plants grown under four different
          3x conc nutrient ● ● ●  ●     ● ●                                         treatments.
     2−4−D + conc nutrient   ● ●      ●          ●    ●
               water only                 ●   ●       ●        ●
                                 1.0         1.5        2.0      2.5       3.0
                                                Weight (g)
    The command aov(), followed by a call to summary.lm(), can
be used to analyse these data, thus:
tomato.aov <- aov( weight ~ trt , data= tomato )
round (coef( summary.lm ( tomato.aov )), 3)
                                     Estimate Std. Error t value Pr(>|t|)
( Intercept )                             1.683          0.187     9.019       0.000
trt2 -4-D + conc nutrient                -0.358          0.264 -1.358          0.190
trt3x conc nutrient                      -0.700          0.264 -2.652          0.015
trtconc nutrient                          0.067          0.264     0.253       0.803
Because we made “water only” the reference level,
“(Intercept)” is the mean for water only, and the other coef-
ficients are for differences from water only.
A randomized block comparison
Growing conditions in a glasshouse or growth chamber — tempera-
ture, humidity and air movement — will not be totally uniform. This
makes it desirable to do several repeats of the comparison between
treatments3 , with conditions within each repeat ("block") kept as                  3
                                                                                      In language used originally in con-
uniform as possible. Each different "block" may for example be a                    nection with agricultural field trials,
                                                                                    where the comparison was repeated on
different part of the glasshouse or growth chamber.
                                                                                    different blocks of land, each different
    The dataset DAAG::rice is from an experiment where there were                   location is a "block".
six treatment combinations — three types of fertilizer were applied
to each of two varieties of rice plant. There were two repeats, i.e.,
two blocks.
    For these data, Figure 3.8 gives a clear picture of the result. For             The effect of an appropriate choice of
fertilizers NH4Cl and NH4NO3, any difference between the varieties                  clocks, then carrying out an analysis
is inconsequential. There is strong “interaction” between fert and                  that accounts for block effects, is to
                                                                                    allow a more precise comparison
variety. A formal analysis, accounting for block differences, will                  between treatments.
confirm what seems already rather clear.
3.7      Time series – Australian annual climate data
                                                                                    Data are from the website
The data frame bomregions2012 from the DAAG package has                                http://www.bom.gov.au/
annual rainfall data, both an Australian average and broken down by                 climate/change/
location within Australia, for 1900 – 2012. Figure 3.9 shows annual
rainfall in the Murray-Darling basin, plotted against year.

58   learning and exploring r
                                                                                                                          Figure 3.8: Interaction plot for the
                                                                                         variety
                         mean of ShootDryMass
                                                100                                                                       terms fert and variety, with
                                                                                                     wt                   ShootDryMass as the dependent
                                                80                                                   ANU843               variable. Notice that for fertilizer F10,
                                                                                                                          there is a huge variety difference in
                                                60
                                                                                                                          the response. For the other fertilizers,
                                                                                                                          there is no difference of consequence.
                                                40
                                                20
                                                       F10       NH4Cl              NH4NO3
                                                                        fert
## Code
library (DAAG)
with(rice , interaction.plot ( x.factor =fert ,
                               trace.factor =variety ,
                               ShootDryMass ,
                               cex.lab =1.4))
                                                                                                                      ●   Figure 3.9: Annual rainfall in the
                 800                                                            ●
                                                                            ●                                             Australian Murray-Darling Basin.
                                                                                             ●
                                                                                                                          by year. The lowess() function is
                 700
                                                                                             ●                            used to The dashed curve with f=2/3
                                                                                                     ●
                                            ●         ●                         ●                ●                        captures the overall trend, while the
                                                      ● ●
       mdbRain
                 600                                                                                                ●
                                                                        ●                                                 solid curve with f=0.1 captures trends
                                                       ● ●   ●                                       ● ● ●  ●●
                                                                                                             ●
                               ●                                 ●          ●●       ●       ●●            ●              on a scale of around eleven years.
                                                ●●
                                               ● ●            ●                      ●                 ●● ●
                 500                      ●●●                ●●                                    ●     ●          ●
                                                ●     ●●●● ●                                                              (10% of the 113 year range from 1900
                                        ●                 ●                                           ●         ●●
                          ●           ●       ●                                                      ●     ●    ● ●
                           ●●● ●     ●●                    ●                                            ●      ●          to 2012 is a little more than 11 years.)
                        ●                         ● ●                                                ●
                 400                     ●      ●● ●                                             ●            ●   ●
                               ●    ●                                                             ●
                        ●       ● ●         ● ●                                                    ●
                                      ●    ●●                  ●
                                 ● ● ●                                                                    ●
                                  ●                   ●   ●
                 300                          ●             ●
                                                ●                                                    ●          ● ●
                         ●
                       1900                           1920       1940            1960            1980         2000
                                                                            Year

                                                                         examples — data analysis with r            59
 ## Code
 library (DAAG)
 plot( mdbRain ~ Year , data= bomregions2012 )
 ## Calculate and plot curve showing long-term trend
 with( bomregions2012 , lines( lowess ( mdbRain ~ Year , f=2/3), lty =2))
 ## Calculate and plot curve of short-term trends
 with( bomregions2012 , lines( lowess ( mdbRain ~ Year , f=0.1),
                                     lty =1, col=" gray45 "))
     The lowess() function has been used to fit smooth curves,                For each smoothing window, a line
 formed by moving a smoothing window across the data. The dashed              or other simple response function is
 curve with f=2/3 (include 2/3 of the data in the smoothing window)           fitted. Greatest weight to points near
 captures the overall trend in the data. The choice of f=0.1 for the          the centre of the smoothing window,
                                                                              with weights tailing off to zero at the
 solid curve has the effect that somewhat more than ten years of data         window edge.
 are used in determining each fitted value on the smooth.
     This graph is exploratory. A next step might to model a correla-         The functions acf() and pacf()
 tion structure in residuals from the overall trend. There are extensive      might be used to examine the correla-
 abilities for this. For graphical exploration, note lag.plot() (plot         tion structure in the residuals.
 series against lagged series).
     The cube root of average rainfall has a more symmetric distri-
 bution than rainfall. Thus, use this in preference to average rainfall
 when fitting models.
 3.8      Exercises
1. Plot Time against Distance, for the worldRecords data. Ignor-
    ing the obvious curvature, fit a straight line model. Use plot.lm
    to obtain diagnostic plots. What do you notice?
2. The data set LakeHuron (datasets package) has mean July aver-
    age water surface elevations (ft) for Lake Huron, for 1875-1972.
    The following reates a data frame that has the same information:
    Year=as(time( LakeHuron ), " vector ")
    huron <- data.frame (year=Year , mean.height = LakeHuron )
 (a) Plot mean.height against year.
                                                                              This plots the level in each year
 (b) To see how each year’s mean level is related to the previous
                                                                              against the level in the previous year.
       year’s mean level, use
       lag.plot (huron$ mean.height )
 (c) *Use the function acf() to plot the autocorrelation function.            For an explanation of the autocorrela-
       Compare with the result from the pacf() (partial autocorrela-          tion function, look up “Autocorrela-
       tion). What do the graphs suggest?                                     tion” on Wikepedia.

60 learning and exploring r
4
Data Objects and Functions

62    learning and exploring r
                                                                     Data objects and functions are two
 Different types of data objects:                                    of several types of objects (others
                                                                     include model objects, formulae, and
   Vectors    These collect together elements of the same mode.      expressions) that are available in R.
              (Possible modes are "logical", "integer", "numeric",   Users can create and work with such
              "complex", "character" and "raw")                      objects in a user workspace. All can,
                                                                     if the occasion demands, be treated as
   Factors    Factors identify category levels in categorical data.  data!
              Modeling functions know how to represent factors.
              (Factors do not quite manage to be vectors! Why?)
   Data       A list of columns – same length; modes may differ.
   frame      Data frames are a device for organizing data.
   Lists      Lists group together an arbitrary set of objects
              (Lists are recursive; elements of lists are lists.)
   NAs        Use is.na() to check for NAs.
     We start this chapter by noting data objects that may appear as
columns of a data frame.
4.1      Column Data Objects – Vectors and Factors
Column objects is a convenient name for one-dimensional data
structures that can be included as columns in a data frame. This
includes vectors1 , factors, and dates.                              1
                                                                       Strictly, the vectors that we discuss
                                                                     here are atomic vectors. Their ele-
                                                                     ments are not, as happens with lists,
4.1.1     Vectors                                                    wrappers for other language objects.
Examples of vectors are                                              Common vector modes are logical,
                                                                     numeric and character. The 4 lines of
c(2 ,3 ,5 ,2 ,7 ,1)
                                                                     code create vectors that are, in order:
3:10 # The numbers 3, 4,.. , 10
                                                                     numeric, numeric, logical, character.
c(TRUE , FALSE , FALSE , FALSE , TRUE , TRUE , FALSE)
c("fig"," mango","apple","prune")
     Use mode() to show the storage mode of an object, thus:
x <- c(TRUE , FALSE , FALSE , FALSE , TRUE , TRUE , FALSE)
mode(x)
[1] " logical "
     The missing value symbol is NA. Subsection 4.1.3 will discuss
issues that arise when one or more vector elements is an NA.
Subsets of Vectors
There are four common ways to extract subsets of vectors.
     1. Specify the subscripts of elements that are to be extracted:
x <- c(3 ,11 ,8 ,15 ,12)       # Assign to x the values
x[c(2 ,4)]                     # Extract elements 2 and 4

                                                                         data objects and functions            63
[1] 11 15
Negative numbers may be used to omit elements:2                         2
                                                                          Mixing of positive and negative
                                                                        subscripts is not allowed.
x <- c(3 ,11 ,8 ,15 ,12)
x[-c (2 ,3)]
[1]       3 15 12
       2. Specify a vector of logical values. The elements that are     Arithmetic relations that may be used
extracted are those for which the logical value is TRUE. Thus suppose   for extraction of subsets are >=, ==,
we want to extract values of x that are greater than 10.                != and %in%. The first four compare
                                                                        magnitudes, == tests for equality, !=
x >10       # Values are logical (TRUE or FALSE)                        tests for inequality, and %in% tests
                                                                        whether any element matches.
[1] FALSE        TRUE FALSE      TRUE    TRUE
x[x > 10]
[1] 11 15 12
"John" %in% c("Jeff", "Alan", "John")
[1] TRUE
       3. Where elements have names, these can be used to extract
elements:
altitude <- c( Cambarville =800 , Bellbird =300 ,
                      "Allyn River"=300 ,
                      "Whian Whian"=400 ,
                      Byrangery =200 , Conondale =400 ,
                      Bulburin =600)
##
## Names can be used to extract elements
altitude [c(" Cambarville ", " Bellbird ")]
Cambarville            Bellbird
             800             300
       4. Use subset(), with the vector as the first argument, and a
logical statement that identifies the elements to be extracted as the
second argument. For example:
subset (altitude , altitude >400)
Cambarville            Bulburin
             800             600
4.1.2       Factors
                                                                        Factors are an economical way to store
Factors are column objects whose elements are integer values 1, 2,      vectors of repetitive text strings. By
. . . , k, where k is the number of levels. They are distinguished from default, when a vector of text strings
integer vectors by having the class factor and a levels attribute.      becomes a column in a data frame, it
       For example, create a character vector fruit, thus:              is incorporated as a factor.

64   learning and exploring r
fruit <- c("fig","mango","apple","plum", "fig")
This might equally well be stored as a factor, thus:
fruitfac <- factor (fruit)
    Internally, the factor is stored as the integer vector 2, 3, 1, 4, 2. Thus 1 is interpreted as "apple";
These numbers are interpreted according to the attributes table:          2:"fig"; 3:"mango"; 4:"plum".
          1           2           3           4
      "apple"      "fig"     "mango"      "plum"
By default, the levels are taken in alphanumeric order.
    The function factor(), with the levels argument specified,
can be used both to specify the order of levels when the factor is
created, or to make a later change to the order.3 For example, the        3
                                                                            Where counts are tabulated by factor
following orders levels according to stated glycemic index:               level, or lattice or other graphs have
                                                                          one panel per factor level, these are in
glycInd <- c(apple =40, fig =35, mango =55, plum =25)                     order of the levels.
## Take levels in order of stated glycInd index
fruitfac <- factor (fruit ,
                          levels =names(sort( glycInd )))
levels ( fruitfac )
[1] "plum"       "fig"     "apple" "mango"
unclass ( fruitfac )      # Examine stored values
[1] 2 4 3 1 2
attr (," levels ")
[1] "plum" "fig"           "apple" "mango"                                 Mis-spelt name, example:
                                                                          trt <- c("A","A"," Control ")
    Incorrect spelling of the level names generates missing values,       trtfac <- factor (trt ,
for the level that was mis-spelled. Use the labels argument if you           levels =c(" control ","A"))
                                                                          table ( trtfac )
wish to change the level names, but be careful to ensure that the
label names are in the correct order.                                     trtfac
    In most places where the context seems to demand it, the integer      control             A
                                                                                  0           2
levels are translated into text strings, thus:
fruit <- c("fig","mango","apple", "plum","fig")
fruitfac <- factor (fruit)
fruitfac == "fig"
[1]    TRUE FALSE FALSE FALSE          TRUE
    Section 8.5 has detailed examples of the use of factors in model
formulae.
Ordered factors
In addition to factors, note the existence of ordered factors, created
using the function ordered(). For ordered factors, the order of
levels implies a relational ordering. For example:
windowTint <- ordered (rep(c("lo","med","hi"), 2),
                               levels =c("lo","med","hi"))
windowTint

                                                                       data objects and functions         65
[1] lo med hi lo med hi
Levels : lo < med < hi
sum( windowTint > "lo")
[1] 4
Subsetting of factors
Consider the factor fruitfac that was created earlier:
fruitfac <- factor (c("fig","mango","apple","plum", "fig"))
We can remove elements with levels fig and plum thus:
ff2 <- fruitfac [! fruitfac %in% c("fig","plum")]
ff2
[1] mango apple
Levels : apple fig mango plum
table (ff2)
ff2
apple      fig mango     plum
      1      0       1       0
                                                                      Note also:
The levels fig and plum remain, but with the table showing 0 values
for these levels. Use the function droplevels() to remove levels      table ( droplevels (ff2 ))
that are not present in the data:
droplevels (ff2)                                                      apple mango
                                                                           1       1
[1] mango apple
Levels : apple mango
Why is a factor not a vector?
Two factors that have different levels vectors are different types of Vectors can be concatenated (joined).
object. Thus, formal concatenation of factors with different levels   Two or mare factors can be sensi-
vectors is handled by first coercing both factors to integer vectors. bly concatenated only if they have
                                                                      identical levels vectors.
The integer vector that results is not, in most circumstances, mean-
ingful or useful.
4.1.3     Missing Values, Infinite Values and NaNs
Any arithmetic or logical operation with NA generates an NA. The      Failure to understand the rules for
consequences are more far-reaching than might be immediately          calculations with NAs can lead to
obvious. Use is.na() to test for a missing value:                     unwelcome surprises.
is.na (c(1, NA , 3, 0, NA))
[1] FALSE      TRUE FALSE FALSE       TRUE

66    learning and exploring r
     An expression such as c(1, NA, 3, 0, NA) == NA returns a
vector of NAs, and cannot be used to test for missing values.
c(1, NA , 3, 0, NA) == NA
[1] NA NA NA NA NA
As the value is unknown, it might or might not be equal to 1, or to
another NA, or to 3, or to 0.
     Note that different functions handle NAs in different ways.         The modeling function lm()
Functions such as mean() and median() accept the argument                accepts any of the arguments
na.rm=TRUE, which causes observations that have NAs to be ig-            na.action=na.omit (omit),
                                                                         na.action=na.exclude (omit
nored. The plot() function omits NAs, infinities and NaNs. For use       NAs when fitting; replace by NAs when
of lowess() to put a smooth curve through the plot, NAs must first       fitted values and residuals are calcu-
be removed. By default, table() ignores NAs.                             lated), and na.action=na.fail.
     Problems with missing values are a common reason why calcu-
lations fail. Infinite values and NaNs are a further potential source of
difficulty.
Inf and NaN
The expression 1/0 returns Inf. The expression log(0) returns            Note that sqrt(-1+0i) returns 0+1i.
-Inf, i.e., smaller than any real number. The expressions 0/0 and        R distinguishes between the real
log(-1) both return NaN.                                                 number -1 and the complex number
                                                                         -1+0i.
NAs in subscripts?
It is best to ensure that NAs do not appear, when there is an assign-
ment, in subscript expressions on either side of the expression.
4.2      Data Frames, Matrices, Arrays and Lists
                                                                         Data frames with all columns numeric
Data frames: Data frames are lists of column objects. The require-       can sometimes be handled in the same
ment that all of the column objects have the same length gives data      way as matrices. In other cases, a
frames a row by column rectangular structure. Different columns can      different syntax may be needed, or
have different column classes — commonly numeric or character or         conversion from one to the other.
                                                                         Proceed with care!
factor or logical or date.
                                                                         Internally, matrices are stored as one
Matrices – vectors with a Dimension: When printed, matrices              long vector in which the columns are
appear in a row by column layout in which all elements have the          stacked one above the other. The first
same mode – commonly numeric or character or logical.                    element in the dimension attribute
                                                                         gives the number of rows in each
                                                                         column.
Arrays and tables: Matrices are two-dimensional arrays. Arrays
more generally can have an arbitrary number of dimensions. Tables
have a structure that is identical to that of arrays.
     The data frame travelbooks will feature in the subsequent
discussion. Look back to Section 1.7 to see how it can be entered.

                                                                        data objects and functions           67
 4.2.1     Data frames versus matrices and tables
 Modeling functions commonly return larger numeric objects as          Computations that can be performed
 matrices rather than data frames. The principal components function   with matrices are typically much
 prcomp() returns scores as a matrix, as does the linear discriminant  faster than their equivalents with data
 analysis function lda() from the MASS package.                        frames. See Section 6.4.
     Functions are available to convert data frames into matrices, and
 vice versa. For example:
 travelmat <- as.matrix ( travelbooks [, 1:4])
    # From data frame to matrix
 newtravelbooks <- as.data.frame ( travelmat )
    # From matrix to data frame
     In comparing data frames with matrices, note that:
                                                                       Alternatively, do:
• Both for data frames and for matrices or two-way tables, the func-
                                                                       attr(travelmat , "dim")
   tion dim() returns number of rows by number of columns, thus:
   travelmat <- as.matrix ( travelbooks [, 1:4])                       [1] 6 4
   dim( travelmat )
   [1] 6 4
• For a matrix, length() returns the number of elements. For a         A data frame is a list of columns. The
   data frame it returns the number of columns.                        function length() returns the list
                                                                       length.
   c( dframelgth = length ( travelbooks ),
      matlgth = length ( travelmat ))
   dframelgth        matlgth
               6            24
• The notation that uses single square left and right brackets to
   extract subsets of data frames, introduced in Section 1.6 works in
   just the same way with matrices. For example
   travelmat [, 4]
   travelmat [, " weight "]
   travelmat [, 1:3]
   travelmat [2,]
   Negative indices can be used to omit rows and/or columns.
• Use of the subscript notation to extract a row from a data frame
   returns a data frame, whereas extraction of a column yields a
   column vector. Thus:
  – Extraction of a row from a data frame, for example                 Use unlist(travelbooks[6,
      travelbooks["Canberra - The Guide", ] or                         ]) to turn row from the data frame
                                                                       into a vector. All elements are coerced
      travelbooks[6, ], yields a data frame, i.e., a special form      to a common mode, in this case
      of list.                                                         numeric. Thus the final element
  – travelbooks$volume (equivalent to travelbooks[,1] or               becomes 1.0 (the code that is stored),
                                                                       rather than Guide which was the first
      travelbooks[,"volume"])) is a vector.                            level of the factor type.
• For either a data frame or a matrix, the function rownames()
   can be used to extract row names, and the function colnames()
   to extract column names. For data frames, row.names() is an
   alternative to rownames(), while names() is an alternative to
   colnames().

68   learning and exploring r
    Note also a difference in the mechanisms for adding columns.
The following adds new columns area (area of page), and density
(weight to volume ratio) to the data frame travelbooks:
travelbooks $area <- with( travelbooks , width* height )
travelbooks $ density <- with( travelbooks ,
                                    weight / volume )
names ( travelbooks )      # Check column names
[1] " thickness " "width"           " height "     " weight "
" volume "      "type"
[7] "area"           " density "
Columns are added to the data frame as necessary.
    For matrices, use cbind(), which can also be used for data
frames, to bind in new columns.
4.2.2     Inclusion of character vectors in data frames
When data frames are created, whether by use of read.table()
or another such function to input data from a file, or by use of the
function data.frame() to join columns of data together into a data
frame, character vectors are converted into factors. Thus, the final
column (type) of travelbooks became, by default, a factor.4 To             4
                                                                             This assumes that the global
prevent such type conversions, specify stringsAsFactors=FALSE              option stringsAsFactors is
                                                                           FALSE. To check, interrogate
in the call to read.table() or data.frame().
                                                                           options()$stringsAsFactors.
4.2.3     Factor columns in data frame subsets
The data frame ais (DAAG) has physical charateristics of athletes,
divided up thus between ten different sports:
with(ais , table(sport ))
sport
  B_Ball      Field       Gym Netball          Row     Swim    T_400m T_Sprnt     Tennis
       25        19         4         23        37        22        29      15         11
  W_Polo
       17
    Figure 7.2.1 in Subsection 7.9 limits the data to swimmers and
rowers. For this, at the same time removing all levels except Row and
Swim from the factor sport, do:
rowswim <- with(ais , sport %in% c("Row", "Swim"))                         If redundant levels were left in place,
aisRS <- droplevels ( subset (ais , rowswim ))                             the graph would show empty panels
xtabs (~sport , data=aisRS)                                                for each such level.
sport
  Row Swim
   37     22
Contrast the above with:
xtabs (~sport , data= subset (ais , rowswim ))

                                                                           data objects and functions         69
sport
  B_Ball      Field      Gym Netball         Row     Swim   T_400m T_Sprnt       Tennis
         0         0        0        0        37       22          0        0            0
  W_Polo
         0
4.2.4      Handlng rows that include missing values
The function na.omit() omits rows that contain one or more miss-
ing values. The argument may be a data frame or a matrix. The
function complete.cases() identifies such rows. Thus:
test.df <- data.frame (x=c(1:2 , NA), y=1:3)
test.df
    x  y
1 1    1
2 2    2
3 NA   3
## complete.cases ()
complete.cases ( test.df )
[1]    TRUE     TRUE FALSE
## na.omit ()
na.omit ( test.df )
   x y
1 1 1
2 2 2
4.2.5      Arrays — some further details
                                                                          Tables, which will be the subject
A matrix is a two-dimensional array. More generally, arrays can           of the next subsection, have a very
have an arbitrary number of dimensions.                                   similar structure to arrays.
Removal of the dimension attribute
The dimension attribute of a matrix or array can be changed or re-
moved, thus:
travelvec <- as.matrix ( travelbooks [, 1:4])
dim( travelvec ) <- NULL # Columns of travelmat are stacked into one
                              # long vector
travelvec
  [1]       1.3      3.9    1.2    2.0       0.6     1.5    11.3     13.1     20.0       21.1
[11]       25.8    13.1    23.9   18.7     27.6     28.5    36.0     23.4   250.0      840.0
[21]     550.0 1360.0    640.0   420.0
   # as(travelmat , " vector ") is however preferable

70    learning and exploring r
     Note again that the $ notation, used with data frames and other
list objects to reference the contents of list elements, is not relevant
to matrices.
4.2.6      Lists
A list is a collection of arbitrary objects. As noted above, a data      Elements of lists are themselves lists.
frame is a specialized form of list. Consider for example the list       Distinguish rcanberra[4], which
                                                                         is a sub-list and therefore a list, from
rCBR <- list( society ="ssai", branch =" Canberra ",                     rcanberra[[4]] which extracts
                   presenter ="John",                                    the contents of the fourth list element.
                   tutors =c("Emma", "Chris", "Frank"))
     First, extract list length and list names:
length (rCBR)              # rCBR has 4 elements
names (rCBR)
[1] 4
[1] " society "         " branch "      " presenter " " tutors "
     The following extracts the 4th list element:
rCBR [4]                   # Also a list ,     name is ' tutors '
$tutors
[1] "Emma"        "Chris" "Frank"
     Alternative ways to extract the contents of the 4th element are:
                                                                         List elements can be accessed by
rCBR [[4]]                 # Contents of 4th list element                name. Thus, to extract the contents
                                                                         of the 4th list element, alterna-
                                                                         tives to rcanberra[[4]] are
[1] "Emma"        "Chris" "Frank"                                        rcanberra[["tutors"]] or
                                                                         rcanberra$tutors.
rCBR$ tutors               # Equivalent to rCBR [[" tutors "]]
[1] "Emma"        "Chris" "Frank"
Model objects are lists
As noted in Subsection 3.4.2, the various R modeling functions all       Recall again, also, that data frames
return their own particular type of model object, either a list or as an are a specialized form of list, with the
S4 object.                                                               restriction that all columns must all
                                                                         have the same length.

                                                                       data objects and functions        71
4.3     Functions
 Different Kinds of Functions:
  Generic         The ’class’ of the function argument determines the
                  action taken. E.g., print(), plot(), summary()
  Modeling        For example, lm() fits linear models.
                  Output may be stored in a model object.
  Extractor       These extract information from model objects.
                  Examples include summary()), coef()),
                  resid()), and fitted()
  User            Use, e.g., to automate and document computations
  Anonymous       These are user functions that are defined at the
                  point of use, and do not need a name.
    The above list is intended to include the some of the most impor-
tant types of function. These categories may overlap.
    The language that R implements has many of the features of a      Functions for working with dates are
functional language. Functions have accordingly featured throughout   discussed in Section 4.3.9 immediately
the earlier discussion. Here will be noted functions that are com-    following.
monly important.
4.3.1     Built-In Functions
Common useful functions
 ## Use with any R object as argument
 print ()                # Prints a single R object
 length ()               # Number of elements in a vector or of a list
 ## Concatenate and print R objects [does less coercion than print ()]
 cat ()                  # Prints multiple objects , one after the other
 ## Use with a numeric vector argument
 mean ()                 # If argument has NA elements , may want na.rm=TRUE
 median ()               # As for mean (), may want na.rm=TRUE
 range ()                # As for mean (), may want na.rm=TRUE
 unique ()               # Gives the vector of distinct values
 diff ()                 # Vector of first differences
                         # N. B. diff(x) has one less element than x
 cumsum ()               # Cumulative sums , c.f., also , cumprod ()
 ## Use with an atomic vector object
 sort ()                 # Sort elements into order , but omitting NAs
 order ()                # x[order(x)] orders elements of x, with NAs last
 rev ()                  # reverse the order of vector elements
 any ()                  # Returns TRUE if there are any missing values
 as()                    # Coerce argument 1 to class given by argument 2
                         # e.g. as (1:6 , " factor ")
 is()                    # Is argument 1 of class given by argument 2?
                         # is (1:6 , " factor ") returns FALSE

72    learning and exploring r
                         # is(TRUE , " logical ") returns TRUE
 is.na ()                # Returns TRUE if the argument is an NA
 ## Information on an R object
 str ()                  # Information on an R object
 args ()                 # Information on arguments to a function
 mode ()                 # Gives the storage mode of an R object
                         # (logical , numeric , character , . . ., list)
 ## Create a vector
 numeric ()              #  numeric (5) creates a numeric vector , length 5,
                         #  all elements 0.
                         #  numeric (0) ( length 0) is sometimes useful .
 character ()            #  Create character vector ; c.f. also logical ()
    The function mean(), and a number of other functions, takes
the argument na.rm=TRUE; i.e., remove NAs, then proceed with the
calculation. For example
mean(c(1, NA , 3, 0, NA), na.rm=T)
[1] 1.333
    Note that the function as() has, at present, no method for coerc-
ing a matrix to a data frame. For this, use as.data.frame().
Functions in different packages with the same name
For example, as well as lattice function dotplot() the graphics
package has a defunct function dotplot(). To be sure of getting the
lattice function dotplot(), refer to it as lattice::dotplot.
4.3.2     Functions for data summary and/or manipulation              For data manipulation, note:
4.3.3     Functions for creating and working with tables              - the apply family of functions
                                                                         (Subsection 4.3.7).
4.3.4     Tables of Counts                                            - data manipulation functions in
                                                                         the reshape2 and plyr packages
Use either table() or xtabs() to make a table of counts. Use             (Chapter 6).
xtabs() for cross-tabulation, i.e., to determine totals of numeric
values for each table category.
The table() function
For use of table(), specify one vector of values (often a factor) for
each table margin that is required. For example:
library (DAAG)              # possum is from DAAG
with(possum , table(Pop , sex ))
          sex
Pop         f m
   Vic     24 22
   other 19 39

                                                                       data objects and functions            73
NAs in tables
By default, table() ignores NAs. To show information on NAs,
specify exclude=NULL, thus:
library (DAAG)
table ( nswdemo $re74 ==0, exclude =NULL)
FALSE     TRUE   <NA >
   119     326     277
The xtabs() function
This more flexible alternative to table() uses a table formula to
specify the margins of the table:
xtabs (~ Pop+sex , data= possum )
          sex
Pop         f m
   Vic     24 22
   other 19 39
    A column of frequencies can be specified on the left hand side of Manipulations with data frames are
the table formula. In order to demonstrate this, the three-way table  in general conceptually simpler than
UCBAdmissions (datasets package) will be converted into its data      manipulations with tables. For tables
                                                                      that are not unreasonably large, it
frame equivalent. Margins in the table become columns in the data     is in general a good strategy to first
frame:                                                                convert the table to a data frame and
UCBdf <- as.data.frame.table ( UCBAdmissions )                        make that the starting point for further
head(UCBdf , n=3)                                                     calculations.
       Admit Gender Dept Freq
1 Admitted       Male     A 512
2 Rejected       Male     A 313
3 Admitted Female         A     89
    The following then forms a table of total admissions and rejec-
tions in each department:
xtabs (Freq ~      Admit+Dept , data=UCBdf)
              Dept
Admit            A     B  C     D   E    F
   Admitted 601 370 322 269 147 46
   Rejected 332 215 596 523 437 668
Information on data objects
The function str() gives basic information on the data object that is
given as argument.
library (DAAG)
str( possumsites )

74    learning and exploring r
'data.frame ':         7 obs. of 3 variables :
  $ Longitude : num 146 149 151 153 153 ...
  $ Latitude : num -37.5 -37.6 -32.1 -28.6 -28.6 ...
  $ altitude : num 800 300 300 400 200 400 600
4.3.5      Utility functions
 dir ()                   #  List files in the working or other specified directory
  sessionInfo ()          #  Print version numbers for R and for attached packages
 system .file ()          #  By default , show path to ' package =" base " '
 R.home ()                #  Path to R home directory
 . Library                #  Path to the default library
 . libPaths ()            #  Get/set paths to library directories
Section A has further details.
4.3.6      User-defined functions
                                                                           Note also that functions can be defined
The function mean() calculates means, The function sd() calcu-             at the point of use. Such functions
lates standard deviations. Here is a function that calculates mean and     do not need a name, and are called
standard deviation at the same time:                                       anonymous functions. Section 4.3.4
                                                                           has an example.
mean.and.sd <- function (x){
      av <- mean(x)
      sdev <- sd(x)
      c(mean=av , sd = sdev)          # return value
}
The parameter x is the argument that the user must supply. The body
of the function is enclosed between curly braces. The value that the
function returns is given on its final line. Here the return value is a
vector that has two named elements.
    The following calculates the mean and standard deviation of
heterozygosity estimates for seven different Drosophila species.5          5
                                                                             Data are from Lewontin, R. 1974.
                                                                           The Genetic Basis of Evolutionary
hetero <- c(.43 ,.25 ,.53 ,.47 ,.81 ,.42 ,.61)                             Change.
mean.and.sd ( hetero )
   mean        sd
0.5029 0.1750
    It is useful to give the function argument a default value, so that it
can be run without user-supplied parameters, in order to see what it
does. A possible choice is a set of random normal numbers, perhaps
generated using the rnorm() function. Here is a revised function
definition. Because the function body has been reduced to a single         Note that a different set of random
line, the curly braces are not needed.                                     numbers will be returned, giving a
                                                                           different mean and SD, each time that
mean.and.sd <- function (x = rnorm (20))                                   the function is run with its default
                        c(mean=mean(x), sd=sd(x))                          argument.
mean.and.sd ()
    mean           sd
-0.1610      0.9986

                                                                         data objects and functions          75
mean.and.sd ()
    mean          sd
0.08901 0.85100
4.3.7     The apply family of functions
                                                                        For the apply family of functions,
 apply(), sapply() and friends
                                                                        specify as the FUN argument any
   apply()       Use apply() to apply a function across rows            function that will not generate an
                 or columns of a matrix (or data frame)                 error. Obviously, log("Hobart") is
                                                                        not allowed!
   sapply()      sapply() and lapply() apply functions in               Note also the function tapply(),
   & friends     parallel across columns of a data frame, or across     which will not be discussed here.
                 elements of a list, or across elements of a vector.
apply(): The function apply() is intended for use with matrices         If used with a data frames, the data
or, more generally, with arrays. It has three mandatory arguments, a    frame is first coerced to matrix.
matrix or data frame, the dimension (1 for rows; 2 for columns) or
dimensions, and a function that will be applied across that dimension
of the matrix or data frame.
    Here is an example:                                                  Code that will input molclock1:
apply (molclock , 2, range)                                             library (DAAG)
                                                                        datafile (" molclock1 ")
                                                                        molclock <-
    The following tabulates admissions, in the three-way table             read.table (" molclock1.txt ")
UCBAdmissions, according to sex:
apply ( UCBAdmissions , c(1,2), sum)
              Gender
Admit          Male Female
   Admitted 1198          557
   Rejected 1493        1278
sapply() and lapply(): Use sapply() and lapply() to apply               Warning: Use apply() with
a function (e.g., mean(), range(), median()) in parallel to all         COLUMN=2, to apply a function to
columns of a data frame. They take as arguments the name of the         all columns of a matrix. If sapply()
                                                                        or lapply() is given a matrix as
data frame, and the function that is to be applied.                     argument, the function is applied to
    The function sapply() returns the same information as               each element (the matrix is treated as a
lapply(). But whereas lapply() returns a list, sapply() tries           vector).
if possible to simplify the result to give a vector or matrix or array.
    Here is an example of the use of sapply():
sapply (molclock , range)
       Gpdh Sod Xdh AvRate Myr
[1 ,] 1.5 12.6 11.5           11.9     55
[2 ,] 40.0 46.0 31.7          24.9 1100
                                                                         Use of na.rm=TRUE:
    A third argument na.rm=TRUE can be supplied to the function         sapply (molclock , range ,
sapply. This argument is then automatically passed to the function               na.rm =TRUE)
that is given in the second argument position.
                                                                               Gpdh Sod Xdh AvRate Myr
                                                                        [1 ,] 1.5 12.6 11.5          11.9    55
                                                                        [2 ,] 40.0 46.0 31.7         24.9 1100

76   learning and exploring r
    More generally, the first argument to sapply() or lapply() can
be any vector.
sapply() – Application of a user function
We will demonstrate the use of sapply() to apply a function that
counts the number of NAs to each column of a data frame. A suitable
function can be defined thus:
countNA <- function (x)sum(is.na(x))
    An alternative is to define a function6 in place, without a name,        6
                                                                               This is called an anonymous func-
that counts number of NAs. The alternatives are:                             tion.
Use function defined earlier:                         Define function at place of call:
library (MASS)                                        sapply ( Pima.tr2 [, 1:5] ,
sapply ( Pima.tr2 [, 1:5] , countNA )                          function (x)sum(is.na(x)))
npreg       glu     bp   skin      bmi                npreg     glu     bp  skin        bmi
      0       0     13      98       3                    0       0     13      98         3
4.3.8      Functions for working with text strings
The functions paste() and paste0() join text strings. The func-              For paste(), the default is to use a
tion sprintf(), primarily designed for formatting output for print-          space as a separator; paste0() omits
ing, usefully extends the abilities of paste() and paste0().                 the space.
    Other simple string operations include substring() and
nchar() (number of characters). Both of these, and strsplit()
noted in the next paragraph, can be applied to character vectors.
    The function strsplit(), used to split strings, has an argument          Other functions that accept an ar-
fixed that by default equals FALSE. The effect is that the argument          gument fixed include the search
                                                                             functions grep() and regexpr(),
split, which specifies the character(s) on which the string will
                                                                             and the search and replace functions
split, is assumed to be a regular expression. See help(regexp) for           sub() and gsub().
details. For use of a split character argument, call strsplit()
with fixed=FALSE.
    Bird species in the dataset cuckoos (DAAG) are:
(spec <- levels ( cuckoos $ species ))
[1] " hedge . sparrow " " meadow .pipit"       "pied. wagtail "
[4] " robin "             "tree.pipit"         "wren"
                                                                              Regular expression substitution:
Now replace the periods in the names by spaces:                              specnam <- sub("\\.",
                                                                                                 " ", spec)
( specnam <- sub(".", " ", spec , fixed=TRUE ))
                                                                             In regular expressions enter a period
[1] " hedge sparrow " " meadow pipit"          "pied wagtail "               (".") as "\\."
[4] " robin "             "tree pipit"         "wren"
    For string matching, use match(), pmatch() and charmatch().              See help(regex) for information on
For matching with regular expressions, note grep() and                       the use of regular expressions.
regexpr(). For string substitution, use sub() and gsub().
    Web pages with information on string manipulation in R include:

                                                                     data objects and functions           77
http://www.stat.berkeley.edu/classes/s133/R-6.html
http://en.wikibooks.org/wiki/R_Programming/Text_Processing
The first is an overview, with the second more detailed.
    The package stringr, due to Hadley Wickham, provides what        For strings representing biological se-
may be a more consistent set of functions for string handling than  quences, install the well-documented
                                                                    Bioconductor package Biostrings.
are available in base R.
4.3.9     Functions for Working with Dates (and Times)
                                                                    Good starting points for learning
Use as.Date() to convert character strings into dates. The default  about dates in R are the help pages
format has year, then month, then day of month, thus:               help(Dates), help(as.Date)
                                                                    and help(format.Date).
# Electricity Billing Dates
dat <- c("2003 -08-24 ","2003 -11-23 ","2004 -02-22 ",
             "2004 -05-03 ")
dd <- as.Date (dat)
    Use format() to set or change the way that a date is formatted.
The following is a selection of the available symbols:
     %d:      day, as number
     %a:      abbreviated weekday name (%A: unabbreviated)
     %m:      month (00-12)
     %b:      month abbreviated name (%B: unabbreviated)
     %y:      final two digits of year (%Y: all four digits)
    The default format is "%Y-%m-%d". The character / can be used
in place of -. Other separators (e.g., a space) must be explicitly
specified, using the format argument, as in the examples below.
    Date objects can be subtracted:                                 Subtraction yields a time difference
                                                                    object. If necessary, use unclass()
as.Date ("1960 -12-1") - as.Date ("1960 -1-1")
                                                                    to convert this to a numeric vector.
Time difference of 335 days
                                                                     Use unclass() to turn a time
There is a diff() method for date objects:                          difference object into an integer
dd <- as.Date (c("2003 -08-24 ","2003 -11-23 ",                     vector:
                      "2004 -02-22 ", "2004 -05-03 "))              unclass (diff(dd ))
diff(dd)
Time differences in days
[1] 91 91 71
Formatting dates for printing: Use format() to fine tune the
formatting of dates for printing.                                   See help(format.Date).
dec1 <- as.Date ("2004 -12-1")
format (dec1 , format ="%b %d %Y")
[1] "Dec 01 2004"
format (dec1 , format ="%a %b %d %Y")
[1] "Wed Dec 01 2004"

78    learning and exploring r
   Such formatting may be used to give meaningful labels on
graphs. Figure 4.1 provides an example:
## Labeling of graph: data frame jobs (DAAG)
library (DAAG ); library ( lattice )
fromdate <- as.Date ("1 Jan1995 ", format ="%d%b%Y")
startofmonth <- seq(from=fromdate , by="1 month",
                      length =24)
atdates <- seq(from=fromdate , by="6 month",                                 1840                                                   ●
                 length =4)                                                                                                         ●
                                                                             1820                                               ●
xyplot (BC ~ startofmonth , data=jobs ,                                                                                 ●
                                                                                                                            ●
        scale=list(x=list(at=atdates ,                                       1800                                     ●●●
                                                                                                                                ●
                                                                        BC                                      ●●
                                                                                                                  ●
                             labels = format (atdates ,                      1780                     ●●
                                                                                                        ●
                                              "%b%y"))))                                  ●
                                                                                              ●
                                                                                                  ●         ●
                                                                             1760                ●          ●
                                                                                      ●        ●
                                                                             1740         ●
Conversion of dates to and from integer number of days: By de-                      Jan95 Jul95 Jan96 Jul96
fault, dates are stored in integer numbers of days. Use julian()                                 startofmonth
to convert a date into its integer value, by default using January 1
                                                                       Figure 4.1: Canadian worker force
1970 as origin. Use the argument option to specify some different      numbers, with dates used to label the
origin:                                                                x-axis. See Figure 7.12 in Subsection
                                                                       7.2.6 for data from all Canadian
dates <- as.Date (c("1908 -09-17 ", "1912 -07-12 "))
                                                                       provinces.
julian ( dates)
[1] -22386 -20992
attr (," origin ")
[1] "1970 -01 -01"
julian (dates , origin = as.Date ("1908 -01-01 "))
[1] 260 1654
attr (," origin ")
[1] "1908 -01 -01"
     Note also weekdays(), months(), and quarters():
dates <- as.Date (c("1908 -09-17 ", "1912 -07-12 "))
weekdays ( dates)
[1] " Thursday " " Friday "
months ( dates)
[1] " September " "July"
quarters ( dates)
[1] "Q3" "Q3"
Regular sequences of dates: Use the function help(seq.Date).
   Given a vector of ‘event’ times, the following function can be
used to count the number of events in each of a regular sequence of
time intervals:

                                                                                   data objects and functions          79
intervalCounts <- function (date , from=NULL , to=NULL , interval ="1 month"){
   if( is.null (from )) from <- min(date)
   if( is.null (to))to <- max(date)
   dateBreaks <- seq(from=from , to=to , by= interval )
   dateBreaks <- c(dateBreaks , max( dateBreaks )+ diff( dateBreaks [1:2]))
   cutDates <- cut(date , dateBreaks , right=FALSE)
   countDF <- data.frame (Date= dateBreaks [ -length ( dateBreaks )],
                                num= as.vector (table( cutDates )))
   countDF
}
    The following counts the number of events by year:
dates <- c("1908 -09-17 ", "1912 -07-12 ", "1913 -08-06 ", "1913 -09-09 ", "1913 -10-17 ")
dates <- as.Date (dates)
( byYear <- intervalCounts (dates , from= as.Date ("1908 -01-01 "), interval ='1 year '))
          Date num
1  1908 -01 -01    1
2  1909 -01 -01    0
3  1910 -01 -01    0
4  1911 -01 -01    0
5  1912 -01 -01    1
6  1913 -01 -01    3
Further useful functions for working with dates: Note also date()                 The CRAN Task View for Time Series
which returns the current date and time, and Sys.Date() which                     Analysis has notes on classes and
returns the date. For information on functions for working with                   methods for times and dates, and on
                                                                                  packages that give useful functionality
times, see help(ISOdatetime).
4.3.10       Summaries of Information in Data Frames
A common demand is to obtain a tabular summary of information
in each of several columns of a data frame, broken down according
to the levels of one or more grouping variables. Consider the data
frame nswdemo (DAAG). Treatment groups are control (trt==0) and
treatment (trt==1) group, with variables re74 (1974 income), re75
(1975) and re78 (1978),
    The following calculates the number of zeros for each of the
three variables, and for rach of the two treatment categories:
                                                                                  The data frame is split according to
## Define a function that counts zeros
                                                                                  the grouping elements specified in
countzeros <- function (x)sum(!is.na(x) & x==0)
                                                                                  the by argument. The function is then
aggregate ( nswdemo [, c("re74", "re75", "re78")],
                                                                                  applied to each of the columns in each
                by=list(group= nswdemo $trt),
                                                                                  of the splits.
                FUN= countzeros )
   group re74 re75 re78
1        0 195 178 129
2        1 131 111         67
    Now find the proportion, excluding NAs, that are zero. The result
will be printed out with improved labeling of the rows:
## countprop () counts proportion of zero values
countprop <- function (x){
      sum(! is.na(x) & x==0)/ length ( na.omit (x))}

80    learning and exploring r
prop0 <-
   aggregate ( nswdemo [, c("re74","re75","re78")],
                by=list(group= nswdemo $trt),
                FUN= countprop )
## Now improve the labeling
rownames ( prop0) <- c(" Control ", " Treated ")
round (prop0 ,2)
           group re74 re75 re78
Control         0 0.75 0.42 0.30
Treated         1 0.71 0.37 0.23
    The calculation can alternatively be handled by two calls to the
function sapply(), one nested within the other, thus:
                                                                      The argument z in the ‘in place’
prop0 <-
                                                                      function is a data frame. The argument
   sapply ( split( nswdemo [, c("re74","re75","re78")],
                                                                      x to countprop() is a column of a
                    nswdemo $trt),
                                                                      data frame.
             FUN= function (z) sapply (z, countprop ))
round (t( prop0), 2)
   re74 re75 re78
0 0.75 0.42 0.30
1 0.71 0.37 0.23
4.4      *Classes and Methods (Generic Functions)
 Key language constructs:
  Classes      Classes make generic functions (methods) possible.
  Methods      Examples are print(), plot(), summary(), etc.
    There are two implementation of classes and methods, the orig-
inal S3 implementation, and the newer S4 implementation that is
implemented in the methods package. Here, consider the simpler S3
implementation.
    All objects have a class. Use the function class() to get this
information.
    For many common tasks there are generic functions – print(),      Thus print() calls a method thus:
summary(), plot(), etc., whose action varies according to the class   factor: print.factor();
                                                                        data frame:
of object to which they are applied.
                                                                      print.data.frame(); and so
    To get details of the S3 methods that are available for a generic on. Ordered factors “inherit” the
function such as plot(), type, e.g., methods(plot). To get a list     print method for factors. For objects
of the S3 methods that are available for objects of class lm, type,   without an explicit print method,
e.g., methods(class="lm")                                             print.default() is called.
4.4.1     ∗ S4 methods
                                                                      Packages that use S4 classes and
The S4 conventions and mechanisms extend the abilities available      methods include lme4, Bioconductor
under S3, build in checks that are not available with S3, and are     packages, and most of the spatial
more conducive to good software engineering practice.                 analysis packages.

                                                                          data objects and functions                                                   81
Example – a spatial class
                                                                          Classes defined in the sp package
The sp package defines, among other possibilities, spatial data           are widely used across R spatial data
classes SpatialPointsDataFrame and SpatialGridDataFrame.                  analysis packages.
    The sp function bubble(), for plotting spatial measurement
data, accepts a spatial data object as argument.7 The function            7
                                                                            Each point (location) is shown as
coordinates() can be used, given spatial coordinates, to turn a           a bubble, with area proportional to a
                                                                          value for that point.
data frame or matrix into an object of one of the requisite classes.
    Data from the data frame meuse8 , from the sp package, will be        8
                                                                            Data are from the floodplain of the
used for an example. A first step is to create an object of one of the    river Meuse, in the Netherlands. It
                                                                          includes concentrations of various
classes that the function bubble() accepts as argument, thus:
                                                                          metals (cadmium, copper, lead,
library (sp)                                                              zinc), with Netherlands topographi-
data( meuse )                                                             cal map coordinates.
class ( meuse)
[1] "data. frame"
coordinates (meuse) <- ~ x + y                                                                                         zinc
class ( meuse)
                                                                                                                                     ●●●●
                                                                                                                                ●   ●●●●●●●●
                                                                                                                                ●●● ●●
                                                                                                                                ● ●
                                                                                     333000
                                                                                                                            ●●
                                                                                                                             ●●  ●
                                                                                                                               ● ●
[1] " SpatialPointsDataFrame "                                                                                              ●
                                                                                                                            ●●  ●●
                                                                                                                             ● ●●
                                                                                                           ●●●●●● ●●●
attr (," package ")                                                                                     ●●
                                                                                                         ●●
                                                                                                          ●●
                                                                                                            ●●●●● ● ●
                                                                                                           ● ●●
                                                                                                                                               ●
                                                                                                                                                   113
                                                                          Northing
                                                                                     332000            ●
                                                                                                       ●●●  ●●
                                                                                                            ●●
                                                                                                                   ●        ●                  ●   198
                                                                                                      ●  ●    ● ●● ●
                                                                                                                            ●
                                                                                                                                                   326
[1] "sp"                                                                                              ●●        ●●
                                                                                                    ●●●●● ●●●● ●●
                                                                                                                            ●
                                                                                                                                               ●
                                                                                                                                               ●   674.5
                                                                                                  ●●
                                                                                                 ●   ●   ●
                                                                                                              ●
                                                                                                                 ●      ●
                                                                                                                                               ●   1839
                                                                                     331000
                                                                                               ●●
                                                                                                ●●
                                                                                                 ●
                                                                                                 ●
                                                                                                  ●●
                                                                                                  ●
                                                                                                  ●● ●
                                                                                                           ●●  ●
                                                                                                            ●● ●
                                                                                                                  ●
                                                                                               ●
                                                                                               ●●●●
                                                                                                  ●●   ●
                                                                                                  ●            ●
This has created an object of the class SpatialPointsDataFrame.                               ● ●●●
                                                                                                  ●●
                                                                                                  ●
                                                                                                  ●●
                                                                                                 ● ● ●
                                                                                                       ●
                                                                                                        ●
                                                                                                           ●
                                                                                                                       ●●       ●
                                                                                     330000                ●
                                                                                               ● ●●●●●
   Code that creates the plot, shown in Figure 4.2, is:
                                                                                          178500 179500 180500 181500
bubble (meuse , zcol="zinc", scales =list(tck =0.5),                                                       Easting
        maxsize =2, xlab=" Easting ", ylab=" Northing ")
                                                                          Figure 4.2: Bubble plot for zinc
The function bubble() uses the abilities of the lattice package. It       concentrations. Areas of bubbles are
returns a trellis graphics object.                                        proportional to concentrations.
    The coordinates can be extracted using coordinates(meuse).
Remaining columns from the original data frame are available from
the data frame meuse@data.
    Use slotNames() to examine the structure of the object:
slotNames ( meuse)
[1] "data"            " coords .nrs" " coords "
[4] "bbox"            " proj4string "
Typing names(meuse) returns the column names for the data slot.           Note that meuse@data is shorthand
The effect is the same as that of typing names(meuse@data). To get        for slot(meuse, "data").
a list of the S4 methods that are available for a generic function, use
showMethods(). Section 11.4 has further details.
4.5    Common Sources of Surprise or Difficulty
  Character vectors, when incorporated as columns of a data frame,
  become by default factors.

 82   learning and exploring r
   Factors can often be treated as vectors of text strings, with values
   given by the factor levels. Watch however for contexts where the
   integer codes are used instead.
   Use is.na() to check for missing values. Do not try to test for
   equality with NA. Refer back to Section 4.1.3.
   If there is a good alternative, avoid the attaching of data frames.  Assignment of new values to an
   If you do use this mechanism, be aware of the traps.                 attached data frame creates a new
                                                                        local data frame with the same name.
   The syntax elasticband[,2], extracts the second column from          The new local copy remains in the
                                                                        workspace when the data frame is
   the data frame elasticband, yielding a numeric vector. Observe
                                                                        detached.
   however that elasticband[2, ] yields a data frame, rather than
   the numeric vector that the user may require. Use the function
   unlist() to extract the vector of numeric values.
 4.6      Summary
   Important R data structures are vectors, factors, data frames and
   lists. Vector modes include numeric, logical, character or complex.
   Factors, used for categorical data, can be important in the use of
   many of R’s modeling functions. Ordered factors are appropriate
   for use with ordered categorical data.
   Use table() for tables of counts, and xtabs() for tables of
   counts or totals.
   R allows the use of infinite Values (Inf or -Inf) and NaNs (not
   a number) in calculations. Introduce such quantities into your
   calculations only if you understand the implications.
   A matrix is a vector that is stacked column upon column into
   a rectangular array that has dimensions given by its dimension
   attribute. A data frame is, by contrast, a list of columns.
   Matrices are in some (not all) contexts handled similarly to data    Calculations with matrices are likely
                                                                        to be much faster than with data
   frames whose elements are all of one type (typically all numeric).   frames.
   Lists are “non-atomic” vectors. Use the function c() (concate-
   nate) to join lists, just as for “atomic” vectors.
   Modeling functions typically output a model object that has a list   Generic functions that may be used
   structure. This holds information from the model fit, in a form      with model objects typically include
   from which generic model functions can then extract commonly         print(), summary(), fitted(),
                                                                        coef() and resid().
   required forms of output.
 4.7      Exercises
1. Find an R function that will sort a vector. Give an example.

                                                                         data objects and functions 83
2. Modify the function mean.and.sd() so that it outputs, in addi-
   tion to mean and standard deviation, the number of vector ele-
   ments.
3. ∗ What  is the mode of: (i) a factor; (ii) a dataframe?; (iii) a list
   that is not necessarily a dataframe? Apply the function mode() to
   objects of each of these classes. Explain what you find.
4. The attempt to assign values to an expression whose subscripts
   include missing values generates an error. Run the following code
   and explain the error that results:
   y <- c(1, NA , 3, 0, NA)
   y[y > 0]
   y[y > 0] <- c(11, 12)
5. Run the following code:
   gender <- factor (c(rep(" female ", 91), rep("male", 92)))
   table ( gender )
   gender <- factor (gender , levels =c("male", " female "))
   table ( gender )
   gender <- factor (gender , levels =c("Male", " female ")) # Note the mistake
                                         # The level was "male", not "Male"
   table ( gender )
   rm( gender )                          # Remove gender
   The output from the final table(gender) is
   gender
      Male female
          0       91
   Explain the numbers that appear.
6. In the data set nswpsdi1 (DAAGxtras), do the following for each
   of the two levels of trt:
 (a) Determine the numbers for each of the levels of black;
 (b) Determine the numbers for each of the levels of hispanic;
      item Determine the numbers for each of the levels of marr
      (married).
7. Sort the rows in the data frame Acmena in order of increasing
   values of dbh.
   [Hint: Use the function order(), applied to age to determine the
   order of row numbers required to sort rows in increasing order of
   age. Reorder rows of Acmena to appear in this order.]
   Acmena <- subset (rainforest , species ==" Acmena smithii ")
   ord <- order( Acmena $dbh)
   acm <- Acmena [ord , ]
   Sort the row names of possumsites (DAAG) into alphanumeric
   order. Reorder the rows of possumsites in order of the row
   names.

  84    learning and exploring r
 8.(a) Create a for loop that, given a numeric vector, prints out one
        number per line, with its square and cube alongside.
  (b) Look up help(while). Show how to use a while loop to
        achieve the same result.
   (c) Show how to achieve the same result without the use of an
        explicit loop.
 9. Here are examples that illustrate the use of paste() and
     paste0():
     paste ("Leo", "the", "lion")
     paste ("a", "b")
     paste0 ("a", "b")
     paste ("a", "b", sep="")
     paste (1:5)
     paste (1:5 , collapse ="")
     What are the respective effects of the parameters sep and
     collapse?
10. The following function calculates the mean and standard deviation
     of a numeric vector.
     meanANDsd <- function (x){
           av <- mean(x)
           sdev <- sd(x)
           c(mean=av , sd = sdev) # The function returns this vector
     }
     Modify the function so that: (a) the default is to use rnorm()
     to generate 20 random normal numbers, and return the standard
     deviation; (b) if there are missing values, the mean and standard
     deviation are calculated for the remaining values.
11. Try the following:
     class (2)
     class ("a")
     class ( cabbages $ HeadWt )        # cabbages is in the datasets package
     class ( cabbages $Cult)
     Now do sapply(cabbages, class), and note which columns
     hold numerical data. Extract those columns into a separate data
     frame, perhaps named numtinting.
     [Hint: cabbages[, c(2,3)] is not the correct answer, but it is,
     after a manner of speaking, close!]
12. Functions that may be used to get information about data frames
     include str(), dim(), row.names() and names(). Try each
     of these functions with the data frames allbacks, ant111b and
     tinting (all in DAAG).
     For getting information about each column of a data frame, use
     sapply(). For example, the following applies the function
     class() to each column of the data frame ant111b.

                                                            data objects and functions 85
library (DAAG)
sapply (ant111b , class)
For columns in the data frame tinting that are factors, use
table() to tabulate the number of values for each level.

86 learning and exploring r
5
Data Input and Storage

88    learning and exploring r
5.1      ∗ Data   Input from a File
                                                                        Most data input functions allow
.                                                                       import from a file that is on the web
    Use of the RStudio menu is recommended. This is fast, and           — give the URL when specifying
allows a visual check of the data layout before input proceeds. If      the file. Another possibility is to
input options are incorrectly set, these can be changed as necessary    copy the file, or a relevant part of it,
                                                                        to the clipboard. For reading from
before proceeding. The code used for input is shown. In those rare
                                                                        and writing to the clipboard under
cases where input options are required for which the menu does not      Windows, see http://bit.ly/
make provision, the command line code can be edited as needed,          2sxyOhG. For MacOS, see http:
before proceeding.                                                      //bit.ly/2t1nX0I
                                                                        It is important to check, when data
5.1.1     Managing input is from the RStudio menu                       have been entered, that data values
                                                                        appear sensible. Do minimal checks
Data input that is initiated from the RStudio menu uses func-           on: ranges of variable values, the
tions from the package readr for input of tabular data. The             mode of the input columns (numeric
function readr::read_table() replaces read.table(),                     or factor, or . . . ). Scatterplot matrices
readr::read_csv() replaces read.csv(), and similarly for other          are helpful both for checking variable
                                                                        ranges and for identifying impossible
read.table() aliases.                                                   or unusual combinations of variable
    It uses the function readxl::readxl() for Excel spreadsheet         values.
data. There is provision, also, using functions from the package
haven, to import data from SPSS (POR and SAV files), from SAS
(XPT and SAS files), and from Stata (DTA files).                        See vignette("semantics",
    Output is in all cases to a tibble, which is a specialized form of  package="haven") for details of the
data frame. Character columns are not automatically converted to        way that labelled data and missing
                                                                        values are handled, for input from
factors, column names are not converted into valid R identifiers,       SPSS, SAS, and Stata.
and row names are not set. For subsequent processing, there are
important differences between tibbles and data frames that users
need to note.
5.1.2     Input using the read.table() family of functions
There are several aliases for read.table() that have different set-     Non-default option settings can
tings for input defaults. Note in particular read.csv(), for reading    however, for very large files, severely
in comma delimited .csv files such as can be output from Excel          slow data input.
spreadsheets. See help(read.table). Recall that                         For factor columns check that the
                                                                        levels are as expected.
- Character vectors are by default converted into factors. To prevent
   such type conversions, specify stringsAsFactors=FALSE.
- Specify heading=TRUE1 to indicate that the first row of input has     1
                                                                          By default, if the first row of the file
   column names. Use heading=FALSE to indicate that it holds data.      has one less field than later rows, it is
                                                                        taken to be a header row. Otherwise, it
   [If names are not given, columns have default names V1, V2, . . . .] is taken as the first row of data.
- Use the parameter row.names, then specifying a column number,
   to specify a column for use to provide row names.
Issues that may complicate input
                                                                        NB also that count.fields() counts
Where data input fails, consider using read.table() with the            the number of fields in each record
argument fill=TRUE, and carefully check the input data frame.           — albeit watch for differences from
                                                                        input fields as detected by the input
                                                                        function.

                                                                                   data input and storage          89
Blank fields will be implicitly added, as needed, so that all records
have an equal number of identified fields.
    Carefully check the parameter settings2 for the version of the          2
                                                                              For text with embedded single
input command that is in use. It may be necessary to change the             quotes, set quote = "". For text with
                                                                            # embedded; change comment.char
field separators (specify sep), and/or the missing value character(s)
                                                                            suitably.
(specify na.strings). Embedded quotes and comment characters
(#; by default anything that follows # on the same line is ignored.)
can be a source of difficulty.                                              Among other possibilities, there
    Where a column that should be numeric is converted to a factor          may be a non-default missing value
this is an indication that it has one or more fields that, as numbers,      symbol (e.g., "."), but without using
                                                                            na.strings to indicate this.
would be illegal. For example, a "1" (one) may have been mistyped
as an "l" (ell), or "0" (zero) as "O" (oh).
    Note options that allow the limiting of the number of input rows.
For read.table()) and aliases, set nrows. For functions from
the readr package, set n_max. For scan(), discussed in the next
subsection, set nlines. All these functions accept the argument
skip, used to set the number of lines to skip before input starts.
5.1.3     ∗ The   use of scan() for flexible data input
Data records may for example spread over several rows. There
seems no way for read.table() to handle this.
    The following code demonstrates the use of scan() to read in
the file molclock1.txt. To place this file in your working directory,
attach the DAAG package and type datafile("molclock1").
                                                                            There are two calls to scan(), each
colnam <- scan(" molclock1.txt ", nlines =1, what="")
                                                                            time taking information from the
molclock <- scan(" molclock1.txt ", skip =1,
                                                                            file molclock1.txt. The first, with
                        what=c(list(""), rep(list (1) ,5)))
                                                                            nlines=1 and what="", input
molclock <- data.frame (molclock , row.names =1)
                                                                            the column names. The second, with
   # Column 1 supplies row names
                                                                            skip=1 and what=c(list(""),
names ( molclock ) <- colnam
                                                                            rep(list(1),5)))], input the
The what parameter should be a list, with one list element for each         several rows of data.
                                                                             For repeated use with data files that
field in a record. The "" in the first list element indicates that the data have a similar format, consider putting
is to be input as character. The remaining five list elements are set to    the code into a function, with the what
1, indicating numeric data. Where records extend over several lines,        list as an argument.
set multi.line=TRUE.
5.1.4     The memisc package: input from SPSS and Stata
                                                                            Note also the haven package, men-
The memisc package has highly effective abilities for examining and         tioned above, and the foreign package.
inputting data from various SPSS formats. These include .sav, .por,         The foreign package has functions that
and Stata .dta data types. Note in particular the ability to check the      allow input of various types of files
contents of the columns of the dataset before importing part or all of      from Epi Info, Minitab, S-PLUS, SAS,
                                                                            SPSS, Stata, Systat and Octave. There
the file.
                                                                            are abilities for reading and writing
    An initial step is to use an importer function to create an importer    some dBase files. For further infor-
object. As of now, importer functions are: spss.fixed.file(),               mation, see the R Data Import/Export
spss.portable.file() ( .por files), spss.system.file()                      manual.
(.sav files), and Stata.file() (.dta files). The importer object

90    learning and exploring r
has information about the variables: including variable labels, value
labels, missing values, and for an SPSS ‘fixed’ file the columns that
they occupy, etc.                                                        Additionally, it has also information
    Functions that can be used with an importer object include:          from further processing of the file
                                                                         header and/or the file proper that is
- description(): column header information;                              needed in preparation for importing
                                                                         the file.
- codebook(): detailed information on each column;
- as.data.set(): bring the data into R, as a ‘data.set’ object;
- subset(): bring a subset of the data into R, as a ‘data.set’ object
                                                                         Use as.data.frame() to coerce
    The functions as.data.set() and subset() yield ‘data.set’            data.set objects into data frames. In-
objects. These have structure that is additional to that in data frames. formation that is not readily retainable
Most functions that are available for use with data frames can be        in a data frame format may be lost in
                                                                         the process.
used with data.set class objects.
    The vignette anes48 that comes with the memisc package illus-
trates the use of the above abilities.
Example
                                                                         To substitute your own file, store the
A compressed version of the file “NES1948.POR” (an SPSS                  path to the file in path2file.
‘portable’ dataset) is stored as part of the memisc installation. The
following does the unzipping, places the file in a temporary direc-
tory, and stores the path to the file in the text string path2file:
library ( memisc )
## Unzip ; return path to " NES1948.POR "
path2file <- unzip( system.file ("anes/ NES1948.ZIP ",package =" memisc "),
                            " NES1948.POR ",exdir= tempfile ())
    Now create an ‘importer’ object, and get summary information:
# Get information about the columns in the file
nes1948imp <- spss.portable.file ( path2file )
show( nes1948imp )
SPSS portable file '/var/ folders /00/ _kpyywm16hnbs2c0dvlf0mwr0000gq /T// RtmpbgTESJ / file4d0
            with 67 variables and 662 observations
There will be a large number of messages that draw attention to
duplicate labels.
    Before importing, it may be well to check details of what is in the  Use labels()) to change labels, or
file. The following, which restricts attention to columns 4 to 9 only,   missing.values() to set missing
                                                                         value filters, prior to data import.
indicates the nature of the information that is provided.
## Get details about the columns (here , columns 4 to 9 only)
description ( nes1948imp )[4:9]
$v480002
[1] " INTERVIEW NUMBER "
$v480003
[1] "POP CLASSIFICATION "

                                                                           data input and storage        91
$v480004
[1] " CODER "
$v480005
[1] " NUMBER OF CALLS TO R"
$v480006
[1] "R REMEMBER PREVIOUS INT"
$v480007
[1] "INTR INTERVIEW THIS R"
As there are in this instance 67 columns, it might make sense to look
at columns perhaps 10 at a time.
    More detailed information is available by using the R function
codebook(). The following gives the codebook information for
column 5:
                                                                      This is more interesting than what
## Get codebook information for column 5                              appears for columns (1 - 4).
codebook ( nes1948imp [, 5])
======================================================
    nes1948imp [, 5] 'POP CLASSIFICATION '
------------------------------------------------------
    Storage mode: double
    Measurement : nominal
            Values and labels         N      Percent
    1    'METROPOLITAN AREA '       182    27.5 27.5
    2    'TOWN OR CITY '            354    53.5 53.5
    3    'OPEN COUNTRY '            126    19.0 19.0
    The following imports a subset of just four of the columns:
vote.socdem.48 <- subset (nes1948imp ,
                  select =c(
                        v480018 ,
                        v480029 ,
                        v480030 ,
                        v480045
                        ))
    To import all columns, do:
socdem.48 <- as.data.set ( nes1948imp )
                                                                       Look also at the vignette:
    For more detailed information, type:
                                                                      vignette (" anes48 ")
## Go to help page for ' importers '
help( spss.portable.file )

92   learning and exploring r
5.2      ∗ Input   of Data from a web page
                                                                         The web page:
This section notes some of the alternative ways in which data that          http://www.visualizing.
is available from the web can be input into R. The first subsection      org/data/browse/ has an ex-
below comments on the use of a point and click interface to identify     tensive list of web data sources. The
and download data.                                                       World Bank Development Indicators
                                                                         database will feature prominently in
    A point and click interface is often convenient for an initial look.
                                                                         the discussion below.
Rather than downloading the data and then inputting it to R, it may
be better to input it directly from the web page. Direct input into
R has the advantage that the R commands that are used document
exactly what has been done.3                                             3
                                                                           This may be especially important
    Note that the functions read.table(), read.csv(), scan(),            if a data download will be repeated
                                                                         from time to time with updated data,
and other such functions, are able to read data directly from a file
                                                                         or if data are brought together from a
that is available on the web. There is a limited ability to input part   number of different files, or if a subset
only of a file.                                                          is taken from a larger database.
    Suppose however that the demand is to downlaod data for several
of a large number of variables, for a specified range of years, and for
a specified geographical area or set of countries. A number of data      GML, or Geography Markup Lan-
archives now offer data in one or more of several markup formats         guage, is based on XML.
that assist selective access. Formats include XML, GML, JSON and
JSONP.
                                                                         4
A browser interface to World Bank data: The web page http:                 Click on COUNTRY to modify
//databank.worldbank.org/data/home.aspx4 gives a point                   the choice of countries. To ex-
                                                                         pand (to 246) countries beyond
and click interface to, among other possibilities, the World Bank        the 20 that appear by default, click
development indicator database. Clicking on any of 20 country            on Add more country. Click on
names that are displayed shows data for these countries for 1991-        SERIES and TIME to modify and/or
2010, for 54 of the 1262 series that were available at last check.       expand those choices. Click on
Depending on the series, data may be available back to 1964. Once        Apply Changes to set the choices
                                                                         in place.
selections have been made, click on DOWNLOAD to download the
data. For input into R, downloading as a .csv file is convenient.
    Manipulation of these data into a form suitable for a motion chart
display was demonstrated in Subsection 6.2.3
Australian Bureau of Meteorology data: Graphs of area-weighted
time series of rainfall and temperature measures, for various regions
of Australia, can be accessed from the Australian Bureau of Meteo-
rology web page http://www.bom.gov.au/cgi-bin/climate/
change/timeseries.cgidemo. Click on Raw data set5 to down-               5
                                                                           To copy the web address, right
load the raw data.                                                       click on Raw data set and click on
                                                                         Copy Link Location (Firefox) or
    Once the web path to the file that has the data has been found, the
                                                                         Copy Link Address (Google Chrome)
data can alternatively be input directly from the web. The following     or Copy Link (Safari).
gets the annual total rainfall in Eastern Australia, from 1910 through
to the present’:
webroot <- "http:// www.bom.gov.au /web01/ncc/www/ cli_chg / timeseries /"
rpath <- paste0 (webroot , "rain/0112/eaus/", " latest.txt ")
totrain <- read.table (rpath)

                                                                                data input and storage 93
A function to download multiple data series: The following ac-
cesses the latest annual data, for total rainfall and average tempera-
ture, from the command line:
getbom <-
function ( suffix =c("AVt","Rain"), loc="eaus"){
           webroot <- "http:// www.bom.gov.au /web01/ncc/www/ cli_chg / timeseries /"
           midfix <- switch ( suffix [1], AVt="tmean/0112/", Rain="rain/0112/")
           webpage <- paste(webroot , midfix , loc , "/ latest.txt ", sep="")
           print( webpage )
           read.table ( webpage )$V2
           }
##
## Example of use
offt = c( seaus =14.7 , saus =18.6 , eaus =20.5 , naus =24.7 , swaus =16.3 ,
             qld =23.2 , nsw =17.3 , nt =25.2 ,sa =19.5 , tas =10.4 , vic =14.1 ,
             wa =22.5 , mdb =17.7 , aus =21 .8)
z <- list ()
for(loc in names(offt ))z[[ loc ]] <- getbom ( suffix ="Rain", loc=loc)
bomRain <- as.data.frame (z)
The function can be re-run each time that data is required that in-
cludes the most recent year.
∗ Extraction     of data from tables in web pages
The function readHTMLTable(), from the XML package, will prove
very useful for this. It does not work, currenty at least, for pages that
use https:.
Historical air crash datra: The web page http://www.
planecrashinfo.com/database.htm has links to tables of
aviation accidents, with one table for each year. The table for
years up to and including 1920 is on the web page http://www.
planecrashinfo.com/1920/1920.htm, that for 1921 on the page
http://www.planecrashinfo.com/1921/1921.htm, and so on
through until the most recent year. The following code inputs the
table for years up to and including 1920:
library (XML)
url <- "http:// www.planecrashinfo.com /1920/1920 .htm"
to1920 <- readHTMLTable (url , header =TRUE)
to1920 <- as.data.frame ( to1920 )
    The following inputs data from 2010 through until 2014:
url <- paste0 ("http:// www.planecrashinfo.com /",
                    2010:2014 , "/", 2010:2014 , ".htm")
tab <- sapply (url , function (x) readHTMLTable (x, header =TRUE ))
## The following less efficent alternative code spells the steps out in more detail
## tab <- vector ( ' list ' , 5)
## k <- 0
## for(yr in 2010:2014){
##  k <- k+1

94    learning and exploring r
## url <- paste0 (" http:// www.planecrashinfo.com /", yr , "/", yr , ".htm ")
## tab [[k]] <- as.data.frame ( readHTMLTable (url , header =TRUE ))
## }
    Now combine all the tables into one:
## Now combine the 95 separate tables into one
airAccs <- do.call ('rbind ', tab)
names ( airAccs ) <- c("Date", " Location / Operator ",
                            " AircraftType / Registration ", " Fatalities ")
airAccs $Date <- as.Date ( airAccs $Date , format ="%d %b %Y")
    The help page help(readHTMLTable) gives examples that
demonstrate other possibilities.
5.2.1      ∗ Embedded    markup — XML and alternetives
Data are are now widely available, from a number of differet web
sites, in one or more of several markup formats. Markup code, de-
signed to make the file self-describing, is included with the data.
The user does not need to supply details of the data structure to the
software reading the data.
    Markup languages that may be used include XML, GML, JSON                   For details of markup use, as they
and JSONP. Queries are built into the web address. Alternatives to             relate to the World Bank Development
                                                                               Indicators database, see http://
setting up the query directly may be:
                                                                               data.worldbank.org/node/11.
- Use a function such as fromJSON() in the RJSONIO package to
   set up the link and download the data;
- In a few cases, functions have been provided in R packages that
   assist selection and downloading of data. For the World Bank
   Development Indicators database, note WDI() and other functions
   in the WDI package.
Download of NZ earthquake data: Here the GML markup conven-                    WFS is Web Feature Service. OGC is
tions are used, as defined by the WFS OGC standard. Details can be             Open Geospatial Consortium. GML is
found on the website http://info.geonet.org.nz/display/                        Geographic Markup language GML,
                                                                               based on XML.
appdata/Earthquake+Web+Feature+Service
    The following extracts earthquake data from the New Zealand                The .csv format is one of several
GeoNet website. Data is for 1 September 2009 onwards, through                  formats in which data can be retrieved.
until the current date, for earthquakes of magnitude greater than 4.5.
## Input data from internet
from <-
   paste (c("http:// wfs-beta.geonet.org.nz /",
              " geoserver / geonet /ows? service =WFS",
              "& version =1 .0.0",
              "& request = GetFeature ",
              "& typeName = geonet :quake",
              "& outputFormat =csv",
              "& cql_filter =origintime >= '2009 -08-01 '",
              "+AND+magnitude >4.5"),
            collapse ="")
quakes <- read.csv (from)
z <- strsplit ( as.character ( quakes $ origintime ),

                                                                             data input and storage         95
                    split="T")
quakes $Date <- as.Date ( sapply (z, function (x)x[1]))
quakes $Time <- sapply (z, function (x)x[2])
World Bank data — using the WDI package Use the function
WDIsearch() to search for indicators. Thus, to search for indica-
tors with “CO2” in their name, enter WDIsearch(’co2’). Here are
the first 4 (out of 38) that are given by such a search:
library (WDI)
WDIsearch ('co2 ')[1:4 ,]
       indicator
[1 ,]  "EN.ATM.CO2E.CP.KT"
[2 ,]  "EN.CO2.TRAN.ZS"
[3 ,]  "EN.CO2.TRAN.MT"
[4 ,]  "EN.CO2.OTHX.ZS"
       name
[1 ,]  "CO2 emissions from        cement production ( thousand metric tons )"
[2 ,]  "CO2 emissions from        transport (% of total fuel combustion )"
[3 ,]  "CO2 emissions from        transport ( million metric tons )"
[4 ,]  "CO2 emissions from        other sectors , excluding residential buildings and commercial and public
    Use the function WDI() to input indicator data, thus:
library (WDI)
inds <- c('SP.DYN.TFRT.IN ','SP.DYN.LE00.IN ', 'SP.POP.TOTL ',
  'NY.GDP.PCAP.CD ', 'SE.ADT.1524.LT.FE.ZS ')
indnams <- c(" fertility.rate ", " life.expectancy ", " population ",
                  " GDP.per.capita.Current.USD ", "15 .to.25.yr.female.literacy ")
names (inds) <- indnams
wdiData <- WDI( country ="all",indicator =inds , start =1960 , end =2013 , extra=TRUE)
colnum <- match(inds , names( wdiData ))
names ( wdiData )[ colnum ] <- indnams
## Drop unwanted " region "
WorldBank <- droplevels ( subset (wdiData , ! region %in% " Aggregates "))
The effect of extra=TRUE is to include the additional variables        The function WDI() calls the non-
iso2c (2-character country code), country, year, iso3c (3-             visible function wdi.dl(), which in
character country code), region, capital, longitude, latitude,         turn calls the function fromJSON()
income and lending.                                                    from the RJSONIO package. To
                                                                       see the code for wdi.dl(), type
    The data frame Worldbank that results is in a form where it        getAnywhere("wdi.dl").
can be used with the googleVIS function gvisMotionChart(), as
described in Section 7.5.1
5.3      Creating and Using Databases
                                                                       In addition to the RSQLite, note the
The RSQLite package makes it possible to create an SQLite              RMySQL and ROracle packages. All
database, or to add new rows to an existing table, or to add new       use the interface provided by the DBI
table(s), within an R session. The SQL query language can then         package.
be used to access tables in the database. Here is an example. First
create the database:

96    learning and exploring r
library (DAAG)
library ( RSQLite )
driveLite <- dbDriver (" SQLite ")
con <- dbConnect (driveLite , dbname =" hillracesDB ")
dbWriteTable (con , " hills2000 ", hills2000 ,
                  overwrite =TRUE)
dbWriteTable (con , " nihills ", nihills ,
                  overwrite =TRUE)
dbListTables (con)
[1] " hills2000 " " nihills "
The database hillracesDB, if it does not already exist, is created in
the working directory.
    Now input rows 16 to 20 from the newly created database:
## Get rows 16 to 20 from the nihills DB
dbGetQuery (con ,
   " select * from nihills limit 5 offset 15")
   dist climb       time timef
1 5.5 2790 0.9483 1.2086
2 11.0 3000 1.4569 2.0344
3 4.0 2690 0.6878 0.7992
4 18.9 8775 3.9028 5.9856
5 4.0 1000 0.4347 0.5756
dbDisconnect (con)
5.4      ∗ File  compression:
The functions for data input in versions 2.10.0 and later of R are able
to accept certain types of compressed files. This extends to scan()
and to functions such as read.maimages() in the limma package,
that use the standard R data input functions.
    By way of illustration, consider the files coral551.spot, . . . ,
coral556.spot that are in the subdirectory doc of the DAAGbio pack-
age. In a directory that held the uncompressed files, they were cre-
ated by typing, on a Unix or Unix-like command line:                    Severer compression: replace
                                                                          gzip -9
gzip -9 coral55 ?.spot                                                  by
                                                                          xz -9e.
The .zip files thus created were renamed back to *.spot files.
    When saving large objects in image format, specify
compress=TRUE. Alternatives that may lead to more compact files
are compress="bzip2" and compress="xz".
    Note also the R functions gzfile() and xzfile() that can
be used to create files in a compressed text format. This might for
example be text that has been input using readLines().

                                                                         data input and storage 97
5.5     Summary
  Following input, perform minimal checks that values in the vari-
  ous columns are as expected.
  With very large files, it can be helpful to read in the data in chunks
  (ranges of rows).
  Note mechanisms for direct input of web data. Many data archives
  now offer one or more of several markup formats that facilitate
  selective access.

98 learning and exploring r
6
Data Manipulation and Management

 100    learning and exploring r
     Data analysis has as its end point the use of forms of data sum-
 mary that will convey, fairly and succinctly, the information that is in
 the data. The fitting of a model is itself a form of data summary.
     Be warned of the opportunities that simple forms of data sum-        Data summaries that can lead to mis-
 mary, which seem superficially harmless, can offer for misleading        leading inferences arise often, from
                                                                          a unbalance in the data and/or failure
 inferences. These issues affect, not just data summary per se, but       to account properly for important
 all modeling. Data analysis is a task that should be undertaken with     variables or factors.
 critical faculties fully engaged.
 Alternative types of data objects
Column objects: These include (atomic) vectors, factors, and dates.
Date and date-time objects: The creation and manipulations of date
 objects will be described below.
Data Frames: These are rectangular structures. Columns may be             A data frame is a list of column
 “atomic” vectors, or factors, or other objects (such as dates) that are  objects, all of the same length.
 one-dimensional.
Matrices and arrays: Matrices1 are rectangular arrays in which            1
                                                                            Internally, matrices are one long
 all elements have the same mode. An array is a generalization of a       vector in which the columns follow
                                                                          one after the other.
 matrix to allow an arbitrary number of dimensions.
Tables: A table is a specialized form of array.
Lists: A list is a collection of objects that can be of arbitrary class.
 List elements are themselves lists. In more technical language, lists
 are recursive data structures.
S3 model objects: These are lists that have a defined structure.
S4 objects: These are specialized data structures with tight control
 on the structure. Unlike S3 objects, they cannot be manipulated as
 lists. Modeling functions in certain of the newer packages2 return S4    2
                                                                            These include lme4, the Bioconduc-
 objects.                                                                 tor packages, and the spatial analysis
                                                                          packages.
 6.1      Manipulations with Lists, Data Frames and
          Arrays
 Recall that data frames are lists of columns that all have the same
 length. They are thus a specialised form of list. Matrices are two-
 dimensional arrays. Tables are in essence arrays that hold numeric
 values.
 6.1.1     Tables and arrays
 The dataset UCBAdmissions is stored as a 3-dimensional table. If
 we convert it to an array, very little changes:
     It changes from a table object to a numeric object, which affects
 the way that it is handled by some functions. In either case, what we
 have is a numeric vector of length 24 (= 2 × 2 × 6) that is structured
 to have dimensions 2 by 2 by 6.

                                                                              data manipulation and management   101
6.1.2      Conversion between data frames and tables
The three-way table UCBAdmissions are admission frequencies, by
Gender, for the six largest departments at the University of Califor-
nia at Berkeley in 1973. For a reference to a web page that has the
details; see the belp page for UCBAdmissions. Type
help( UCBAdmissions )                # Get details of the data
example ( UCBAdmissions )
Note the margins of the table:
str( UCBAdmissions )
  'table ' num [1:2 , 1:2, 1:6] 512 313 89 19 353 207 17 8 120 205 ...
  - attr (*, " dimnames ")= List of 3
   ..$ Admit : chr [1:2] " Admitted " " Rejected "
   ..$ Gender : chr [1:2] "Male" " Female "
   ..$ Dept : chr [1:6] "A" "B" "C" "D" ...
    In general, operations with a table or array are easiest to
conceptualise if the table is first converted to a data frame in
which the separate dimensions of the table become columns.
Thus, the UCBAdmissions table will be converted to a data
frame that has columns Admit, Gender and Dept. Either use the
as.data.frame.table() command from base R, or use the
adply() function from the plyr package.
    The following uses the function as.data.frame.table() to                          As UCBAdmissions is
convert the 3-way table UCBAdmissions into a data frame in which                      a table (not an array),
                                                                                      as.data.frame(UCBAdmissions)
the margins are columns:
                                                                                      will give the same result.
UCBdf <- as.data.frame.table ( UCBAdmissions )
head(UCBdf , 5)
        Admit Gender Dept Freq
1  Admitted         Male         A 512
2  Rejected         Male         A 313
3  Admitted Female               A    89
4  Rejected Female               A    19
5  Admitted         Male         B 353
   Alternatively, use the function adply() from the plyr package that is de-
   scribed in Section 6.2. Here the identity() function does the manipulation,
   working with all three dimensions of the array:
   library (plyr)
   UCBdf <- adply(.data= UCBAdmissions ,
                       .margins =1:3 ,
                       .fun= identity )
   names ( UCBdf )[4] <- "Freq"
First, calculate overall admission percentages for females and males.
The following calculates also the total accepted, and the total who
applied:
library ( dplyr)

102    learning and exploring r
gpUCBgender <- dplyr :: group_by (UCBdf , Gender )
AdmitRate <- dplyr :: summarise ( gpUCBgender ,
                                      Accept =sum(Freq[Admit ==" Admitted "]),
                                      Total=sum(Freq),
                                      pcAccept =100* Accept /Total)
AdmitRate
# A tibble : 2 x 4
   Gender Accept Total pcAccept
   <fct >    <dbl > <dbl >     <dbl >
1 Male         1198 2691        44.5
2 Female         557 1835       30.4
    Now calculate admission rates, total number of females applying,
and total number of males applying, for each department:
gpUCBgd <- dplyr :: group_by (UCBdf , Gender , Dept)
rateDept <- dplyr :: summarise (gpUCBgd ,
      Total =sum(Freq),
      pcAccept =100*sum(Freq[Admit ==" Admitted "])/Total)
    Results can conveniently be displayed as follows. First show
admission rates, for females and males separately:
xtabs ( pcAccept ~ Gender +Dept , data= rateDept )
           Dept
Gender             A       B       C        D        E       F
   Male     62.061 63.036 36.923 33.094 27.749          5.898
   Female 82.407 68.000 34.064 34.933 23.919            7.038
    Now show total numbers applying:
xtabs ( Total~ Gender +Dept , data= rateDept )
           Dept
Gender         A     B   C   D   E     F
   Male     825 560 325 417 191 373
   Female 108 25 593 375 393 341
    As a fraction of those who applied, females were strongly fa-       The overall bias arose because males
vored in department A, and males somewhat favored in departments        favored departments where admission
C and E. Note however that relatively many males applied to A and       rates were relatively high.
B, where admission rates were high. This biased overall male rates
upwards. Relatively many females applied to C, D and F, where
rates were low. This biased the overall female rates downwards.
6.1.3     Table margins
For working directly on tables, note the function margin.table().
The following retains margin 1 (Admit) and margin 2 (Gender),
adding over Dept (the remaining margin):
                                                                        Take margin 2, first, then margin 1,
## Tabulate by Admit ( margin 2) & Gender ( margin 1)
                                                                        gving a table where rows correspond
( margin21 <- margin.table ( UCBAdmissions ,
                                                                        to levels of Gender.
                                margin =2:1))

                                                                    data manipulation and management              103
            Admit
Gender       Admitted Rejected
   Male           1198       1493
   Female          557       1278
    Use the function margin.table() to turn this into a table that
has the proportions in each row:
prop.table (margin21 , margin =1)
            Admit
Gender       Admitted Rejected
   Male         0.4452     0.5548
   Female       0.3035     0.6965
6.1.4     Categorization of continuous data
The data frame bronchit, in the DAAGviz package, has observa-               The dataset bronchit may alterna-
tions on 212 men in a sample of Cardiff (Wales, UK) enumeration             tively be found in the SMIR package.
districts. Variables are r (1 if respondent suffered from chronic bron-
chitis and 0 otherwise), cig (number of cigarettes smoked per day)
and poll (the smoke level in the locality).
    It will be convenient to define a function props that calculates
the proportion of the total in the first (or other nominated element) of
a vector:
props <- function (x, elem =1) sum(x[elem ])/sum(x)
Now use the function cut() to classify the data into four categories,       The argument breaks can be either
and form tables:                                                            the number of intervals, or it can be
                                                                            a vector of break points such that
library ( DAAGviz )                                                         all data values lie within the range
catcig <- with(bronchit ,                                                   of the breaks. If the smallest of the
                    cut(cig , breaks =c(0 ,1 ,10 ,30) ,                     break points equals the smallest
                          include.lowest =TRUE ))                           data value, supply the argument
tab <- with(bronchit , table(r, catcig ))                                   include.lowest=TRUE.
round ( apply(tab , 2, props , elem =2), 3)
   [0 ,1]    (1 ,10] (10 ,30]
   0.072      0.281     0.538
There is a clear increase in the risk of bronchitis with the number of
cigarettes smoked.
    This categorization was purely for purposes of preliminary analy-       It was at one time common practice to
sis. Categorization for purposes of analysis is, with the methodology       categorize continuous data, in order to
and software that are now available, usually undesirable. Tables            allow analysis methods for multi-way
                                                                            tables. There is a loss of information,
that are based on categorization can nevertheless be useful in data         which can at worst be serious.
exploration.
6.1.5     ∗ Matrix   Computations
Let X (n by p), Y (n by p) and B (p by k) be numeric matrices. Some
of the possibilities are:                                                   Note that if t() is used with a data
                                                                            frame, a matrix is returned. If neces-
                                                                            sary, all values are coerced to the same
                                                                            mode.

 104    learning and exploring r
 X + Y                     #  Elementwise addition
 X * Y                     #  Elementwise multiplication
 X %*% B                   #  Matrix multiplication
 solve (X, Y)              #  Solve X B = Y for B
 svd(X)                    #  Singular value decomposition
 qr(X)                     #  QR decomposition
 t(X)                      #  Transpose of X
                                                                           Section 4.3.7 will discuss the use
     Calculations with data frames that are slow and time consuming        of apply() for operations with
 will often be much faster if they can be formulated as matrix calcula-    matrices, arrays and tables.
 tions. This is in general become an issue only for very large datasets,
 with perhaps millions of observations. Section 6.4 has examples. For
 small or modest-sized datasets, convenience in formulating the cal-
 culations is likely to be more important than calculation efficiency.
 6.2      plyr, dplyr & reshape2 Data Manipulation
 The plyr package has functions that together:
• provide a systematic approach to computations that perform a
    desired operation across one or more dimensions of an array, or of
    a data frame, or of a list;
• allow the user to choose whether results will be returned as an
    array, or as a data frame, or as a list.
     The dplyr package has functions for performing various sum-
 mary and other operations on data frames. For many purposes, it
 supersedes the plyr package.
     The reshape2 package is, as its name suggests, designed for
 moving between alternative data layouts.
 6.2.1 plyr
 The plyr package has a separate function for each of the nine possi-
 ble mappings. The first letter of the function name (one of a = array,
 d = data frame, l = list) denotes the class of the input object, while
 the second letter (the same choice of one of three letters) denotes
 the class of output object that is required. This pair of letters is then
 followed by ply.
     Here is the choice of functions:
                                        Class of Output Object
                                  a (array) d (data frame) l (list)
       Class of Input Object
                     a (array)    aaply      adply             alply
               d (data frame)     daply      ddply             dlply
                        l (list)  laply      ldply             llply
     First observe how the function adply can be used to change
 from a tabular form of representation to a data frame. The dimension
 names will become columns in the data frame.

                                                                   data manipulation and management           105
detach (" package :dplyr")
library (plyr)
dreamMoves <-
     matrix (c(5 ,3 ,17 ,85) , ncol =2,
              dimnames =list(" Dreamer "=c("Yes","No"),
                               " Object "=c("Yes","No")))
( dfdream <- plyr :: adply(dreamMoves , 1:2,
                               .fun= identity ))
   Dreamer Object V1
1        Yes      Yes 5
2          No     Yes 3
3        Yes       No 17
4          No      No 85
    To get the table back, do:
plyr :: daply(dfdream , 1:2, function (df)df [ ,3])
           Object
Dreamer Yes No
      Yes     5 17
      No      3 85
    The following calculates sums over the first two dimensions of
the table UCBAdmissions:
                                                                           Here, aaply() behaves exactly like
plyr :: aaply( UCBAdmissions , 1:2, sum)
                                                                           apply().
              Gender
Admit          Male Female
   Admitted 1198         557
   Rejected 1493        1278
    The following calculates, for each level of the column trt in the
data frame nswdemo, the number of values of re74 that are zero:
library (DAAG , quietly =TRUE)
plyr :: daply(nswdemo , .(trt),
         function (df)sum(df[,"re74"]==0 , na.rm=TRUE ))
   0     1
195 131
To calculate the proportion that are zero, for each of control and         Notice the use of the syntax .(trt,
treatment and for each of non-black and black, do:                         black) to identify the columns trt
                                                                           and black. This is an alternative to
options ( digits =3)                                                       c("trt", "black").
plyr :: daply(nswdemo , .(trt , black),
         function (df)sum(df[,"re75"]==0)/nrow(df))
     black
trt         0      1
   0 0.353 0.435
   1 0.254 0.403

106    learning and exploring r
    The function colwise() takes as argument a function that op-
erates on a column of data, returning a function that operates on
all nominated columns of a data frame. To get information on the
proportion of zeros for both of the columns re75 and re78, and for
each of non-black and black, do:                                        Here, colwise() operates on the
                                                                        objects that are returned by splitting
plyr :: ddply(nswdemo , .(trt , black),
                                                                        up the data frame nswdemo according
         colwise ( function (x)sum(x==0)/ length (x),
                                                                        to levels of trt and black. Note the
                   .cols=.(re75 , re78 )))
                                                                        use of ddply(), not daply().
   trt black re75         re78
1     0      0 0.353 0.1529
2     0      1 0.435 0.3412
3     1      0 0.254 0.0847
4     1      1 0.403 0.2605
6.2.2     Use of dplyr with Word War 1 cricketer data
Data in the data frame cricketer, extracted by John Aggleton (now
at Univ of Cardiff), are from records of UK first class cricketers born
1840 – 1960. Variables are
-  Year of birth
-  Years of life (as of 1990)
-  1990 status (dead or alive)
-  Cause of death: killed in action / accident / in bed
-  Bowling hand – right or left
The following creates a data frame in which the first column has the
year, the second the number of right-handers born in that year, and
the third the number of left-handers born in that year. .
                                                                        Both plyr and dplyr have functions
library (DAAG)
detach (" package :plyr")
                                                                        summarise(). As in the code
                                                                        shown, detach plyr before proceeding.
library ( dplyr)
                                                                        Alternatively, or additionally, specify
                                                                        dplyr::summarise() rather than
names ( cricketer )[1] <- "hand"
                                                                        summarise()
gpByYear <- group_by (cricketer , year)
lefrt <- dplyr :: summarise (gpByYear ,
                                  left=sum(hand == 'left '),
                                  right=sum(hand =='right '))
## Check first few rows
lefrt [1:4 , ]
# A tibble : 4 x 3
     year left right
   <int > <int > <int >
1 1840          1       6
2 1841          4      16
3 1842          5      16
4 1843          3      25
The data frame is split by values of year. Numbers of left and right
handers are then tabulated.
                                                                        Note that a cricketer who was born
                                                                        in 1869 would be 45 in 1914, while a
                                                                        cricketer who was born in 1896 would
                                                                        be 18 in 1914.

                                                                      data manipulation and management 107
    From the data frame cricketer, we determine the range of birth
years for players who died in World War 1. We then extract data for
all cricketers, whether dying or surviving until at least the final year
of Workd War 1, whose birth year was within this range of years.
The following code extracts the relevant range of birth years.
## Use subset () from base R
ww1kia <- subset (cricketer ,
                      kia ==1 & (year+life )%in% 1914:1918)
range ( ww1kia $year)
[1] 1869 1896
    Alternatively, use filter() from dplyr:
ww1kia <- filter (cricketer ,
                      kia ==1, (year+life )%in% 1914:1918)
    For each year of birth between 1869 and 1896, the following
expresses the number of cricketers killed in action as a fraction of
the total number of cricketers (in action or not) who were born in
that year:
## Use filter (), group_by () and summarise () from dplyr
crickChoose <- filter (cricketer ,
                            year%in %(1869:1896) , (( kia ==1)|( year+life ) >1918))
gpByYearKIA <- group_by ( crickChoose , year)
crickKIAyrs <- dplyr :: summarise ( gpByYearKIA ,
                                         kia=sum(kia), all= length (year), prop=kia/all)
crickKIAyrs [1:4 , ]
# A tibble : 4 x 4
     year     kia    all    prop
   <int > <int > <int > <dbl >
1 1869          1     37 0.0270
2 1870          2     36 0.0556
3 1871          1     45 0.0222
4 1872          0     39 0
    For an introduction to dplyr, enter:
vignette (" introduction ", package ="dplyr")
6.2.3 reshape2: melt(), acast() & dcast()
The reshape2 package has functions that move between a dataframe
layout where selected columns are unstacked, and a layout where
they are stacked. In moving from an unstacked to a stacked layout,
column names become levels of a factor. In the move back from
stacked to unstacked, factor levels become column names.
    Here is an example of the use of melt():
## Create dataset Crimean , for use in later calculations
library ( HistData )      # Nightingale is from this package
library ( reshape2 )      # Has the function melt ()
Crimean <- melt( Nightingale [,c(1 ,8:10)] , "Date")

108    learning and exploring r
names ( Crimean ) <- c("Date", "Cause", " Deaths ")
Crimean $ Cause <- factor (sub("\\ .rate", "", Crimean $Cause ))
Crimean $ Regime <- ordered (rep(c(rep('Before ', 12), rep('After ', 12)) , 3),
                                  levels =c('Before ', 'After '))
formdat <- format.Date (sort( unique ( Crimean $Date )), format ="%d %b %y")
Crimean $Date <- ordered ( format.Date ( Crimean $Date ,
                                format ="%b %y"), levels = formdat )
The dataset is now in a suitable form for creating a Florence                    The dataset Crimean has been
Nightingale style wedge plot, in Figure C.2.                                     included in the DAAGviz package.
Reshaping data for Motion Chart display – an example
The following inputs and displays World Bank Development Indica-
tor data that has been included with the package DAAGviz:
## DAAGviz must be installed , need not be loaded
path2file <- system.file (" datasets / wdiEx.csv ", package =" DAAGviz ")
wdiEx <- read.csv ( path2file )
print (wdiEx , row.names =FALSE)
 Country .Name Country .Code      Indicator .Name Indicator .Code       X2010    X2000
     Australia            AUS Labor force , total SL.TLF.TOTL.IN    1.17e+07  9.62e+06
     Australia            AUS Population , total      SP.POP.TOTL   2.21e+07  1.92e+07
         China            CHN Labor force , total SL.TLF.TOTL.IN    8.12e+08  7.23e+08
         China            CHN Population , total      SP.POP.TOTL   1.34e+09  1.26e+09
    A googleVis Motion Chart does not make much sense for this
dataset as it stands, with data for just two countries and two years.
Motion charts are designed for showing how scatterplot relation-
ships, here between forest area and population, have changed over a
number of years. The dataset will however serve for demonstrating
the reshaping that is needed.
    For input to Motion Charts, we want indicators to be columns,
and years to be rows. The melt() and dcast()3 functions from the                 3
                                                                                   Note also acast(), which outputs
reshape2 package can be used to achieve the desired result. First,               an array or a matrix.
create a single column of data, indexed by classifying factors:
library ( reshape2 )
wdiLong <- melt(wdiEx , id.vars =c(" Country.Code ",
                      " Indicator.Name "),
                      measure.vars =c("X2000", "X2010"))
## More simply : wdiLong <- melt(wdiEx[, -c (2 ,4)])
wdiLong
   Country .Code          Indicator .Name variable           value
1               AUS Labor force , total          X2000 9.62e+06
2               AUS   Population , total         X2000 1.92e+07
3               CHN Labor force , total          X2000 7.23e+08
4               CHN   Population , total         X2000 1.26e+09
5               AUS Labor force , total          X2010 1.17e+07
6               AUS   Population , total         X2010 2.21e+07
7               CHN Labor force , total          X2010 8.12e+08
8               CHN   Population , total         X2010 1.34e+09
    Now use dcast() to “cast” the data frame into a form where the               If a matrix or array is required, use
indicator variables are columns:                                                 acast() in place of dcast().

                                                                     data manipulation and management             109
names ( wdiLong )[3] <- "Year"
wdiData <- dcast(wdiLong ,
                        Country.Code +Year ~ Indicator.Name ,
                        value.var ="value")
wdiData
   Country .Code      Year Labor force , total Population , total
1              AUS   X2000                9.62e+06              1.92e+07
2              AUS   X2010                1.17e+07              2.21e+07
3              CHN   X2000                7.23e+08              1.26e+09
4              CHN   X2010                8.12e+08              1.34e+09
    A final step is to replace the factor Year by a variable that has the
values 2000 and 2010.
wdiData <- within (wdiData , {
     levels (Year) <- substring ( levels (Year ),2)
     Year <- as.numeric ( as.character (Year ))
})
wdiData
   Country .Code     Year Labor force , total Population , total
1              AUS   2000               9.62e+06              1.92e+07
2              AUS   2010               1.17e+07              2.21e+07
3              CHN   2000               7.23e+08              1.26e+09
4              CHN   2010               8.12e+08              1.34e+09
6.3      Session and Workspace Management
6.3.1     Keep a record of your work
A recommended procedure is to type commands into an editor                   Be sure to save the script file from
window, then sending them across to the command line. This makes             time to time during the session, and
it possible to recover work on those hopefully rare occasions when           upon quitting the session.
the session aborts.
6.3.2     Workspace management
For tasks that make heavy memory demands, it may be important to
ensure that large data objects do not remain in memory once they are
no longer needed. There are two complementary strategies:
- Objects that cannot easily be reconstructed or copied from else-
   where, but are not for the time being required, are conveniently
   saved to an image file, using the save() function.
- Use a separate working directory for each major project.
    Note the utility function dir() (get the names of files, by default      Use getwd() to check the name and
in the current working directory).                                           path of the current working directory.
    Several image files (“workspaces”) that have distinct names can          Use setwd() to change to a new
                                                                             working directory, while leaving the
live in the one working directory. The image file, if any, that is called    workspace contents unchanged.
.RData is the file whose contents will be loaded at the beginning of
a new session in the directory.

110    learning and exploring r
The removal of clutter: Use a command of the form rm(x, y,                As noted in Section 2.2.2, a good
tmp) to remove objects (here x, y, tmp) that are no longer required.      precaution can be to make an archive
                                                                          of the workspace before such removal.
Movement of files between computers: Files that are saved in the
default binary save file format, as above, can be moved between
different computer systems.
Further possibilities – saving objects in text form: An alternative to
saving objects4 in an image file is to dump them, in a text format, as    4
                                                                            Dumps of S4 objects and environ-
dump files, e.g.                                                          ments, amongs others, cannot cur-
                                                                          rently be retrieved using source().
volume <- c(351 , 955, 662, 1203 , 557, 460)                              See help(dump).
weight <- c(250 , 840, 550, 1360 , 640, 420)
dump(c(" volume ", " weight "), file=" books.R ")
The objects can be recreated 5 from this “dump” file by inputting         5
                                                                            The same checks are performed
the lines of books.R one by one at the command line. This is what,        on dump files as if the text had been
                                                                          entered at the command line. These
effectively, the command source() does.
                                                                          can slow down entry of the data or
source (" books.R ")                                                      other object. Checks on dependencies
                                                                          can be a problem. These can usually
     For long-term archival storage, dump (.R) files may be prefer-       be resolved by editing the R source
able to image files. For added security, retain a printed version. If a   file to change or remove offending
problem arises (from a system change, or because the file has been        code.
corrupted), it is then possible to check through the file line by line to
find what is wrong.
6.4      Computer Intensive Computations
Computations may be computer intensive because of the size of
datasets. Or the computations may themselves be demanding, even
for data sets that are of modest size.
     Note that using all of the data for an analysis or for a plot is not
always the optimal strategy. Running calculations separately on
different subsets may afford insights that are not otherwise available.
The subsets may be randomly chosen, or they may be chosen to
reflect, e.g., differences in time or place.
     Computation will be slow where computationally intensive cal-        The computationally intensive parts
culations are implemented directly in R code, rather than passed to       of regression calculations with lm()
                                                                          work with matrices, making these
efficient compiled code that is called from R. Matrix calculations are
                                                                          relatively efficient.
passed to highly efficient compiled code.
     Where it is necessary to look for ways to speed up computations,     The relatively new Julia language
it is important to profile computations to find which parts of the code   appears to offer spectacular im-
are taking the major time. Really big improvements will come from         provements on both R and Python,
                                                                          with times that are within a factor
implementing key parts of the calculation in C or Fortran rather than     of 2 of the Fortran or C times. See
in an application oriented language such as R or Python. Python may       http://julialang.org/.
do somewhat better than R.
     There can be big differences between the alternatives that may be
available in R for handling a calculation. Some broad guidelines will
now be provided, with examples of how differences in the handling
of calculations can affect timings.

                                                                     data manipulation and management            111
Use matrices, where possible, in preference to data frames: Most             Biological expression array appli-
of R’s modeling functions (regression, smoothing, discriminant               cations are among those that are
analysis, etc.) are designed to work with data frames. Where an              commonly designed to work with data
                                                                             that is in a matrix format. The matrix
alternative available that works with matrices, this will be faster.         or matrices may be components of a
    Matrix operations can be more efficient even for such a simple           more complex data structure.
operation as adding a constant quantity to each element of the array,
or taking logarithms of all elements. Here is an example:
xy <- matrix (rnorm (5*10^7) , ncol =100)
dim(xy)
[1] 500000         100
                                                                             Timings are on a mid 2012 1.8 Ghz
system.time (xy +1)                                                          Intel i5 Macbook Air laptop with 8
                                                                             gigabytes of random access memory.
    user    system elapsed
   0.138      0.122     0.261
xy.df <- data.frame (xy)
system.time (xy.df +1)
    user    system elapsed
   0.436      0.159     0.814
Use efficient coding: Matrix arithmetic can be faster than the
equivalent computations that use apply(). Here are timings for
some alternatives that find the sums of rows of the matrix xy above:
                                      user   system   elapsed
             apply(xy,1,sum)        0.528     0.087     0.617
           xy %*% rep(1,100)        0.019     0.001     0.019
                   rowSums(xy)      0.034     0.001     0.035
The bigmemory project: For details, go to http://www.
bigmemory.org/. The bigmemory package for R “supports the cre-
ation, storage, access, and manipulation of massive matrices”. Note
also the associated packages biganalytics, bigtabulate, synchronicity,
and bigalgebra.
The data.table package: This allows the creation of data.table               On 64-bit systems, massive data sets,
objects from which information can be quickly extracted, often in            e.g., with tens or hundreds of millions
a fraction of the time required for extracting the same information          of rows, are possible. For such large
                                                                             data objects, the time saving can be
from a data frame. The package has an accompanying vignette. To              huge.
display it (assuming that the package has been installed), type
vignette (" datatable-intro ", package =" data.table ")
6.5      Summary
   apply(), and sapply() can be useful for manipulations with
   data frames and matrices. Note also the functions melt(),
   dcast() and acast() from the reshape2 package.

112   learning and exploring r
  Careful workspace management is important when files are large.
  It pays to use separate working directories for each different
  project, and to save important data objects as image files when
  they are, for the time being, no longer required.
  In computations with large datasets, operations that are formally
  equivalent can differ greatly in their use of computational re-
  sources.

7
Graphics – base, lattice, ggplot2, rgl, googleVis. . .

114   learning and exploring r
                                                                        The function plot() accepts a
 Base Graphics (mostly 2-D):                                            data argument, while lines(),
                                                                        points() and text() do not.
   Base graphics implements a “traditional” style of graphics
   Functions     plot(), points(), lines(), text(),
                 mtext(), axis(),identify() etc. form
                 a suite that plot points, lines, text, etc.
 Other Graphics
     (i) lattice (trellis) graphics, using the lattice package,         lattice and ggplot2 are built on the
     (ii) ggplot2, implementing Wilkinson’s Grammar of Graphics         low-level graphics package grid.
                                                                          Note also various special types of
     (iii) For 3-D graphics (Section 7.5), note rgl, misc3d & tkrplot
                                                                        graph. For example word clouds, as
     (iv) Motion Charts (Section 7.5.1), show a scatterplot changing    in the wordcloud package, list words
     with movement forward or backward in time.                         with size proportional to frequency.
    Consider first base graphics. Relative to lattice and to ggplot2,
the more traditional style of base graphics is less consistent and less
structured. Each system however has its own strengths and uses.
## DAAG has several datasets that will be required
library (DAAG , quietly =TRUE)
7.1      Base Graphics                                                  To see a variety of base (or traditional)
                                                                        graphics plots, enter
                                                                        demo( graphics )
The function plot() is the most basic of several functions that
create an initial graph. Other functions can be used to add to an       Press Enter to see each new graph.
existing graph. Note in particular points() lines() and text().
                                                                         Plot height vs weight –
7.1.1 plot() and allied base graphics functions
                                                                        ## Older syntax :
The following are alternative ways to plot y against x (obviously x     with(women ,
                                                                               plot(height , weight ))
and y must be the same length):
plot(y ~ x)         # Use a formula to specify the graph                ## Graphics formula :
plot(x, y)          # Horizontal ordinate , then vertical               plot( weight ~ height ,
                                                                               data= women )
    The following use the argument data to supply the name of a
data frame whose column names appear in the graphics formula:
plot( distance ~ stretch , data= elasticband )
plot(ACT ~ year , data=austpop , type="l")
plot(ACT ~ year , data=austpop , type="b")
    The points() function adds points, while lines() adds lines1        1
                                                                          These functions differ only in the
to a plot. The text() function adds text at specified locations. The    default setting for the parameter type.
                                                                        Explicitly setting type = "p" causes
mtext() function places text in one of the margins. The axis()
                                                                        either function to plot points.
function gives fine control over axis ticks and labels.
    Here is a further possibility
with(austpop , plot( spline (year , ACT), type="l"))
   # Fit smooth curve through points

                                                   graphics – base, lattice, ggplot2, rgl, googlevis. . .                                 115
Adding text – an example
Here is a simple example (Figure 7.1) that uses the function text()
to label the points on a plot. Data is from the dataset primates
(DAAG). The first two lines of data are:
                                                                                                     1500
## Data (1 st 2 lines)                                                                                           ● Human
                                                                                  Brain weight (g)
head(primates , 2)
                                                                                                     1000
             Bodywt Brainwt
Potar monkey     10     115
                                                                                                      500
Gorilla         207     406                                                                                     ● Chimp       ● Gorilla
                                                                                                            ● Rhesus monkey
                                                                                                            ● Potar monkey
   Code for a simplified version of the plot is:                                                       0
plot( Brainwt ~ Bodywt , xlim=c(0, 300) ,                                                                   0   50   100 150 200 250 300
      ylim=c(0 ,1500) , data=primates , fg="gray",                                                              Body weight (kg)
      xlab="Body weight (kg)",
      ylab="Brain weight (g)")                                                Figure 7.1: Plot of brain weight
# Specify xlim to allow room for the labels                                   against body weight, for selected
with(primates ,                                                               primates.
      text( Brainwt ~ Bodywt , cex =0.8 ,
            labels = rownames ( primates ), pos =4))
# pos: pos =1 (below), 2 (left), 3 (above)
Identification and Location on the Figure Region
Draw the graph first, then call the required function.                        Section 1.5 described how to terminate
                                                                              the plot, if the limit n is not reached
- identify(), discussed in Subsection 1.5, labels points.                     first. For locator(), n is by default
- locator() prints out the co-ordinates of points. Position the               set to 500.
  cursor at the location for which coordinates are required, and click
  the left mouse button.
7.1.2    Fine control – Parameter settings                                     To store existing settings for later
                                                                              restoration, proceed thus:
In most (not all) instances, parameters can be set either using par(),
or in a call to a plotting function (plot(), points(), . . . ). Changes       oldpar <- par(cex =1 .25)
                                                                                # par( oldpar ) to restore
made using par() remain in place until changed again, or until a
new device is opened. If made in a call to a plotting function, the
change applies only to that call.
    Some of the more common settings are:
- Plotting symbols: pch (choice of symbol); cex ("character expan-
  sion")2 ; col (color).                                                      2
                                                                               Thus par(cex=1.2) increases plot
                                                                              symbol size 20% above the default.
- Lines: lty (line type); lwd (line width); col (color).
- Axis limits: xlim; ylim.
- Closeness of fit to the axis limits: xaxs, yaxs.3 Specify                   3
                                                                                The default is xaxs="r"; x-axis
  xaxs="i" for an exact fit to the data limits.                               limits are extended by 4% relative to
                                                                              data or xlim limits.
- Axis annotation and labels: cex.axis (for axis annotation, inde-
  pendently of cex); cex.labels (for axis labels).

116   learning and exploring r
- Margins and positioning within margin:4 mar (inner margins           4
                                                                         Parameters such as mar, mgp and oma
  clockwise from bottom, out of box default mar=c(5.1, 4.1,            specify distances in ‘lines’ out from
                                                                       the relevant boundary of the figure
  4.1, 2.1)); oma (outer margins, use when there are multiple
                                                                       region. Lines are in units of mex,
  plots on the one graphics page); positioning within margin: mgp      where by default mex=1.
  (margin line for the axis title, axis labels, and axis line, default
  mgp=c(3, 1, 0)).
- Plot shape: pty="s" gives a square plot.5 (default is pty="m")       5
                                                                         This must be set using par()
- Multiple graphs on the one graphics page: par(mfrow=c(m,n))          For a 1 by 2 layout of plots; specify
  gives an m rows by n columns layout.                                 par(mfrow=c(1,2)). Subsection
                                                                       3.4.1 has an example.
Type help(par) to get a (very extensive) complete list. Figure C.3
demonstrates some of the possibilities.
7.1.3    Color and Opacity
The function colors() gives access to 657 different color names,
some of them repeats of the same colour. The function palette()
can be used to show or set colors that will by default be used for
base graphics. Thus
- palette() lists the colors in the current palette;
- as an example, palette(rainbow(6)) sets the current palette to
  a 6-color rainbow palette;
- palette("default") resets back to the default.
    Run the following code to show the default palette, three se-      See help(palette) for palettes in
quential palettes from grDevices, a color ramp palette given by the    the base R grDevices package.
function colorRampPalette(), and two quantitative palettes from
the RColorBrewer package.
## Load to run code for Supplementary Figure 1
library ( RColorBrewer )        # Required for Set1 and Dark2 RColorBrewer palettes
colpal <- rev(list(
     " Default palette " = palette ()[1:8] , cm.colors = cm.colors (12) ,
     terrain.colors = terrain.colors (12) , heat.colors = heat.colors (12) ,
     blueRamp = colorRampPalette (c(blues9 , "white"))(12) ,
     " Brewer-Set1 " = brewer.pal (8, "Set1"),
     " Brewer-Dark2 " = brewer.pal (8, "Dark2")))
palnam <- names( colpal )
plot (1, 1, xlim=c(0.5 ,12 .5), ylim=c(0, length ( palnam )+0 .5), type="n",
       axes=FALSE , xlab="", ylab="")
for(i in 1: length ( palnam )){
     len <- length ( colpal [[i]])
     points (1: len , rep(i,len), pch =15, col= colpal [[i]], cex =5.5)
     legend (1, i+0.025 , palnam [i], adj =0, box.col ="white ", bg="white",
              x.intersp =0, y.intersp =0, yjust =0)
Each of these palettes, except the default, allows variation in the
number of colors, up to a maximum. The palettes available from
RColorBrewer include other qualitative palettes, sequential palettes,

                                                                                                                                                                                                                                                   graphics – base, lattice, ggplot2, rgl, googlevis. . .                        117
and diverging (light in the middle; dark at the extremes) palettes. To
see the full range of RColorBrewer possibilities, type:                                                                                                                                                                                                                                     Stretch the graphics window vertically
                                                                                                                                                                                                                                                                                            (pull on an edge) so that rows do not
display.brewer.all ()                                                                                                                                                                                                                                                                       overlap.
 Qualitative schemes that may be suited for use in plots are "Set1"                                                                                                                                                                                                                         While limited use of light colors is
with yellow (the 6th color out of nine) omitted, or "Dark2", or "Ac-                                                                                                                                                                                                                        fine for coloring regions on a map,
cent" with the 4th color (out of 8) omitted. To extract these, do for                                                                                                                                                                                                                       light colors do not show up well when
                                                                                                                                                                                                                                                                                            coloring points on a graph.
example:
Set1 <- brewer.pal (8, "Set1")[-6]
## Check out the palette
plot (1:7 , pch =16, cex =2, col=Set1)
Opacity, and graphs with many points
                A: 100% opacity                                                                                                                                                                                     B: 40% opacity                              C: Color density plot       Figure 7.2: In Panel A, points are
        25000                                                                                                                                                                                               25000                                       25000                               plotted with the 100% opacity, i.e., no
                ●●● ●        ● ● ●●
                      ● ●● ● ●                         ●       ●●●● ● ●●  ●●●●●●●● ● ●● ●● ●●●● ●●●●● ● ●●●●   ●●●●●●●
                                                                                                                     ●●
                                                                                                                      ●
                                                                                                                      ●●
                                                                                                                       ●●
                                                                                                                        ● ● ●
                                                                                                                            ●●
                                                                                                                             ●●
                                                                                                                              ●●●
                                                                                                                                ●●●
                                                                                                                                  ●●●
                                                                                                                                    ●●
                                                                                                                                     ●●
                                                                                                                                      ●
                                                                                                                                      ●●●
                                                                                                                                        ●●●
                                                                                                                                          ●●●●● ●●
                                                                                                                                                 ●●●●●●●●●●●
                                                                                                                                                           ●●
                                                                                                                                                            ●
                                                                                                                                                            ●●●
                                                                                                                                                              ●●
                                                                                                                                                               ●●
                                                                                                                                                                ●
                                                                                                                                                                ●●
                                                                                                                                                                 ●
                                                                                                                                                                 ●●●
                                                                                                                                                                   ●
                                                                                                                                                                   ●●
                                                                                                                                                                    ●
                                                                                                                                                                    ●●
                                                                                                                                                                     ●●
                                                                                                                                                                      ●●
                                                                                                                                                                       ●●
                                                                                                                                                                        ●●●●●
                                                                                                                                                                            ●
                                                                                                                                                                            ●
                                                                                                                                                                            ●●
                                                                                                                                                                             ●
                                                                                                                                                                             ●●
                                                                                                                                                                              ●●
                                                                                                                                                                               ●●
                                                                                                                                                                                ●
                                                                                                                                                                                ●●
                                                                                                                                                                                 ●●
                                                                                                                                                                                  ●
                                                                                                                                                                                  ●●
                                                                                                                                                                                   ●●
                                                                                                                                                                                    ●
                                                                                                                                                                                    ●●
                                                                                                                                                                                     ●
                                                                                                                                                                                     ●●
                                                                                                                                                                                      ●
                                                                                                                                                                                      ●●
                                                                                                                                                                                       ●●
                                                                                                                                                                                        ●
                                                                                                                                                                                        ●
                                                                                                                                                                                        ●●
                                                                                                                                                                                         ● ●
                                                                                                                                                                                           ●
                                                                                                                                                                                          ●●●
                                                                                                                                                                                            ●●
                                                                                                                                                                                             ●●
                                                                                                                                                                                              ●●
                                                                                                                                                                                              ●●●
                                                                                                                                                                                               ●
                                                                                                                                                                                               ●
                                                                                                                                                                                               ●●
                                                                                                                                                                                                ●●
                ●                                                                                     ●                               ●●●           ●● ●
                                                                                                                                                            ●
                                                                                                                                                          ● ●● ●   ●●●●      ● ●            ●● ● ●
                                                                                                                                                                                                 ●
                                                                          ● ●         ●                                                ●●              ● ●
                ●          ●     ●                                                            ●            ●                                   ●                         ● ●       ●● ● ● ● ●    ●
                ●
                                                                                    ●                                            ●                     ●●  ●● ●● ●● ● ● ●●                       ●
                                                                                                                                                                                                 ●
                                                                                                                                                                                                 ●
                                                                                                                             ●                                    ● ●          ● ● ●
                ●         ● ●                                                                         ● ●            ●                 ● ● ●       ● ●● ● ● ●     ●● ●           ●● ●  ● ● ●     ●
                                                                                                                                                                                                 ●
                ●     ●                                       ●         ●                                                            ●      ●                         ●● ●                       ●
                                                                                         ●                               ●● ● ●●●         ●●         ●
                                                                                                                                                     ●             ●      ● ●●
                                                                                                                                                                               ●●
                                                                                                                                                                              ●●
                                                                                                                                                                                        ● ● ●    ●
                ●              ●                             ●
                                                                   ●     ●                ●                                         ● ●● ●● ● ● ●●                 ●● ● ●
                                                                                                                                                               ●● ●●●          ●● ●          ●● ●●
                                                                                                                                                                                                 ●
                ●                                      ●              ●                                         ● ●       ●                        ●
                                                                                                                                                   ●                     ●● ●            ●● ● ●● ●
                ●   ●
                ● ● ●                                                                                                               ● ●● ●● ●         ●●      ● ●● ● ●●              ● ● ●   ● ●
                                                       ●                                                     ● ●                      ● ● ●               ● ● ●● ● ●● ● ●● ●                     ●
                                                                                                                                                                                                                                                                                            transparency. In Panel B, alpha=0.4,
                ●                                                                  ●          ●                                                 ●                                                ●
                ●                                                                      ●                          ●                                   ●             ●●          ●                ●
                                                           ●                     ●             ● ●           ●              ● ● ● ●                 ●●
                                                                                                                                                     ●● ●    ●         ● ● ● ●● ●
                                                                                                                                                                       ●                         ●
                                                                                            ●               ●●                 ● ● ●●●          ● ● ●●       ● ● ●●     ●●●                      ●
                                                                                                                                                                                                 ●
                                                                                                                                                                                                 ●
                ●
                ●
                ●
                            ● ●
                                                                ●●
                                                                ●                             ●              ●       ●           ●● ● ●   ●        ●●
                                                                                                                                                   ●●●      ●● ● ● ●●●●              ●           ●
                ●               ●          ●                                        ●       ●                ●                    ●●             ●     ●       ●     ●● ● ●● ●                   ●
                                                ●●                 ●    ●     ●●                   ●                             ● ● ●      ● ●     ●         ●                ●                 ●
                      ●        ●                                 ●   ●                 ● ●                                ●     ●              ● ● ● ●●●                               ●
                ●                ●                              ●●                 ●
                                                                                   ●       ●
                                                                                                                   ●●
                                                                                                                     ● ●●       ● ●●● ●●●●  ●●●
                                                                                                                                              ●                                     ●            ●
                                                                                                                                                                                                 ●
                                                                 ●                 ●              ● ●                                                  ●      ●●                                 ●
                                                                                           ●
                                                                                                  ●●
                                                                                                          ●       ●
                                                                                                                          ●        ● ● ●●● ● ●●● ●                 ●● ●              ● ●●
                                                                ●                                          ● ●                   ●      ● ●●           ●● ●
                                                                                  ●                   ●                       ●● ●       ●   ●  ●      ●                                    ●● ● ●
                                              ●●                                               ●  ●   ●           ●   ● ● ●                     ●         ●                 ●
                  ●●
                                ●                                                     ●
                                                                                        ● ●
                                                                                              ●             ●● ● ●●●            ●
                                                                                                                                ●●     ●      ●
                                                                                                                                                    ●
                                                                                                                                                     ● ●●●
                                                                                                                                                              ●      ●●                     ● ●  ●
                                                                  ●●                                                 ●
                ●● ●           ●        ●              ● ●
                                                                                                        ●
                                                                                                                    ●      ●     ●       ● ●● ●   ●● ●                ●
                                                   ● ●●                                                ●                   ●
                                                                                                                         ● ● ●●         ●● ●                                                     ●
                                                                                                                                                                                                                                                                                            i.e., 40% opacity. Panel C uses the
                ●                    ●                            ●                         ●             ●●      ●
                                            ●                                                ● ●          ● ●●   ●
                                                                                                                 ●      ●●● ●       ●●●        ●● ●                            ●                 ●
                                                                                                                                                                                                 ●
                ●      ●         ●         ●                  ●             ●      ●●                             ●     ●                                          ●
                                                                                                                                      ●●●●
                                                                  ●●                              ● ●●                  ● ●             ● ●●
                  ● ●                           ●                                            ●●      ● ● ●● ●             ● ● ● ●●                ● ●             ●
                                                                                                                                                                  ●              ●
                 ● ●●          ●                       ●                  ● ●●   ●
                                                                                                                    ●●● ● ●             ●                    ●
                                                                                                                                                                                                                                                        15000
                                                                                    ●● ● ●●               ●                          ● ● ●●                  ●                          ●        ●
                         ●●                                                                           ● ●●● ● ● ● ●
        15000
                                                                                                                                                                                                 ●
                                                                                                                                                                                                            15000
                ●                                                           ●
                                                                           ●●                                                                                                 ●
                ●● ●        ●      ●     ●         ●
                                                                       ●    ●                                           ● ●      ● ● ●● ●              ●
                                                                     ●●                                ●     ●             ●
                                                                                                                           ●●●● ●           ● ●                 ●               ●
                                               ●●             ●         ● ●● ●              ●        ● ●● ●● ●        ●● ●●●●● ● ●                               ●●
                ●                    ●●            ● ●        ●● ●         ●                                    ● ●●
                                                                                                                   ●● ●●  ● ● ●●                  ●       ●                   ●●           ●     ●
                                  ● ●         ●●                          ●            ● ● ●● ● ● ●            ●●● ● ● ● ● ●    ●● ●● ● ● ●●
                                                                                                                                                                       ●
                 ●●
                                   ●     ●     ●          ●          ●                          ●    ● ●● ●    ●         ●
                                                                                                                                                                              ●●                ●●
 re78                                                                                                                                                                                                re78                                        re75
                ●
                ●● ●●    ●●                  ●        ●             ●● ●●                 ●               ●             ●         ●  ●          ●
                                                            ●
                                                                  ● ● ●●●           ●      ●        ●● ● ●●        ●●●  ●       ●
                                                                                                                                     ●●              ●          ●●                         ● ●   ●
                        ● ● ●                                                                      ● ●                                                                ●
                                    ● ● ●               ●                                                                                ● ●
                                                                                                                                                                                                                                                                                            function smoothScatter() to show a
                   ●                        ●                  ●            ●●● ● ● ● ● ●                ● ●   ●●     ● ●        ●     ●                  ●      ●●                              ●
                 ●                              ● ● ●           ● ●                                                    ●●
                                                                                                                                                                                                 ●
                ●
                                     ●● ●  ●● ●              ● ● ●       ●          ● ●● ●   ●     ●● ●● ●●
                                                                                                                ●●● ● ● ●                 ●●                 ●●                                  ●
                ●                 ●●●     ●             ●●             ●   ●    ●      ●     ●    ● ●                   ●           ●●    ●   ●
                                             ●
                                             ●                                   ●                    ●        ●
                                                                                                            ●● ●            ● ●          ●                      ●
                              ●●
                                    ●        ●                               ● ● ●              ●●●●           ●
                                                                                                            ● ●● ● ●● ● ●            ●                                                           ●
                       ●                   ● ●         ●             ● ●● ●                                                  ●              ●              ●
                                                                                                                                                             ●                                   ●
                         ● ●                                   ● ● ●● ● ●       ●     ● ●● ● ● ●     ●●● ● ● ● ●                      ●           ●          ●
                                                                                                                                                                                                 ●
                ●● ● ●                        ●● ● ●                           ● ●                                    ●                   ●
                                                            ●●● ● ●●●        ●                 ●    ●   ●                           ●
                                                                                      ● ●● ●●                ●●       ●       ●                                       ●
                                   ● ●                ●      ●
                                                                                        ●●                                           ●                           ●
                      ●        ● ● ●●                            ●
                                                                ● ●                            ● ● ● ●● ● ●● ●               ●                                                                   ●
                ●
                                                                                  ●●● ● ●●       ● ●                        ●                  ●             ●                ●●
                                                                                                                                                                                         ●       ●
                ● ●● ●●                          ● ●                                     ●                   ●                                  ●          ●●
                                                                                                                                                                                                 ●
                ●
                ●
                ● ●● ●      ● ●       ●       ●● ●     ●●        ● ● ● ●●    ● ●● ● ● ●                   ●                                                                          ●
                ●                                 ●                        ● ● ● ●              ●               ● ●
                                                   ●●                                                                                                            ●                         ● ●
                                                                                                                                                                                                                                                                                            smoothed color density representation
                ●          ●                       ●          ●● ●             ●
                ● ●             ●       ●                              ●●●●● ●●         ●●●         ● ●                                                               ●
                    ●               ●                                                   ●●          ●                                      ●● ● ●
                                  ●            ●
                                                         ●●
                                                       ●● ●                    ● ●                         ●               ●
                ●                           ●                                             ●                     ● ●                   ●              ●                                           ●
                ● ● ●●
                ●              ● ● ●● ● ●                        ●
                                                                  ●
                                                                                     ● ●●     ●●                           ● ●
                                                                                                                                 ●
                                                                                                                                                 ●                   ●              ●        ●   ●
                ● ●
                ●
                ●                ●●       ●●    ●●●●       ●●●              ● ● ● ●                ●                     ●                                                            ●          ●
                ●          ●●●● ●●                                          ●         ● ●              ●●                ●                                           ●
                ●●●●                         ● ● ● ●    ● ● ● ●● ● ● ●                  ●                       ●
                                                                                                                ●                         ●            ●                                     ●
                ●
                ●         ●● ●●● ●●     ●         ● ●                    ●                  ●           ●                                                                                      ●●
                ●
                ●● ●● ●          ●● ●● ● ●                     ● ●
                                                                                                    ● ●
                                                                                                           ●               ●                     ●
                ●
                ●     ●                                                   ●                ●     ●   ●●
                ●●●                   ● ●●               ●         ●                                                                             ●                   ●
                ●            ●●       ● ●              ●               ●          ●● ●                     ●                      ●
                ●                                         ●                                   ●●       ●
                                                                                                       ●
                                                                                                                       ●●
                                                                                                                                                   ●●
                ●
                ●     ●            ●●          ●               ● ● ● ●●             ●
                                                                                       ●       ●
                ● ● ●●● ●
                                                                                                                                                                                                                                                        5000
                                      ●●            ●                                                                    ●
        5000
                ●                                                                          ●●
                                                                                                                                                                                                            5000
                                                                                              ●                                                            ●
                                      ●       ● ●●● ●              ●        ●                                                   ●
                                                                                                                                                                                                                                                                                            of the data.
                    ●   ●●●   ● ●          ●                                            ●     ●    ● ● ●                                                                              ●
                ●●
                ●            ● ● ● ● ●     ●                                 ●
                ●             ●       ● ●          ● ●       ●●●●      ●●● ●                                                                ●
                ●●
                ●●● ● ●●        ●     ●
                                        ●● ●                 ●●                            ●                                        ●                  ●                ●
                ●●        ●          ●
                                                   ●                                                           ●●                                                                                ●
                ●     ● ● ●         ●           ●        ●● ●
                                                         ●                         ●      ●                                               ●●                           ●
                ●  ● ●              ●  ●            ●
                                                   ● ●         ●                                   ●   ●   ●                              ●                ●                      ●
                ●●●
                ●   ●         ●
                              ●             ●
                ●● ● ●●● ●
                ●                          ●● ●   ●●            ● ●                                    ●
                                                                                                       ●            ●●                                                                           ●
                ●
                ●● ●●●● ●●
                                        ●     ●●●      ●         ●
                                                                               ● ●            ●           ● ●                              ●
                                                                                                                         ●                                                                  ●
                ● ●●●              ●● ●●●
                                      ●
                                      ●
                                          ● ●      ●                                              ●              ●
                ●            ●    ●   ●        ●●                                                                                ●
                ●        ●
                ●●● ● ● ● ●
                ●                   ●●      ● ● ● ●● ●                               ●                                             ●                                                             ●
                ●
                ●●  ● ● ●● ●● ● ● ● ● ●                            ●●
                                                                    ●
                                                                    ●                                ●         ●    ● ●
                ●                                                                                                    ●                                             ●
                ●●● ●
                 ●          ●         ●●
                                      ●                               ●                              ●                      ●
                ●
                     ●● ● ● ● ●●                   ● ●                                                                                    ●● ●
                                                                                                                                                                                      ●     ● ●
                ●     ●           ● ●●
                ●
                ●    ●                           ●       ●        ● ●                 ●                                ●
                ● ●● ● ●●
                ●                               ●
                                                 ●                                    ●                                                                                             ●            ●
                                                                                                                                                                                                 ●
                ●
                ●
                ●
                ●
                ●
                        ●               ●●               ●              ●● ●                                ● ●                            ●               ●
                                                                                                                                                           ● ●●                                  ●
                ●
                ●● ●●
                   ●
                   ●
                      ●
                    ●● ● ● ●
                                ●     ●●          ●●● ●                                                 ●
                                                                                                                                                                               ●      ●
                ●
                ●                                    ●●                                       ●                          ●                       ●
        0       ●
                ●
                ●●
                 ●
                 ●●
                  ●●
                   ●
                   ●●
                    ●●
                     ●
                     ●
                     ●●
                      ●●●●
                         ●●●
                           ●●
                             ●
                            ●●
                               ●
                              ●●●●
                                 ●●
                                  ●
                                  ●●
                                   ●●● ● ●●●
                                             ●
                                            ●● ●
                                              ●●●
                                                ●
                                                ●●
                                                 ●
                                                 ●●
                                                  ●●● ●
                                                      ●●
                                                       ● ●● ●● ●
                                                                ●
                                                                ●● ●● ●● ●●●   ●●● ●●
                                                                                    ●●●●●●●● ●
                                                                                             ●● ●●
                                                                                              ●     ●●●●●●  ●
                                                                                                            ●●●● ●●●●●●●● ●
                                                                                                             ●                  ●
                                                                                                                                ●
                                                                                                                                ●●● ● ● ●●●  ● ● ●● ●   ●●● ●●● ●  ● ●●●●  ●● ● ● ●●         ●●● ●
                                                                                                                                                                                                            0                                           0
                0                       5000                                                              15000                                                                 25000                               0   5000     15000   25000                  0   5000    15000   25000
                                                                                        re75                                                                                                                                   re75                                        re74
                                                                                                                                                                                                                                                                                            An opacity of 0.4 has the effect that,
                                                                                                                                                                                                                                                                                            for an isolated point, 60% of the white
## Sample from the 15992 rows                                                                                                                                                                                                                                                               background shows through.
dfsamp <- cps1[ sample (nrow(cps1), 3000) , ]
plot(re78 ~ re75 , data=dfsamp , pch =20, cex =0.5 ,
      col=" black", las =0, fg="gray")
mtext (side =3, line =0.5 , "A: 100% opacity ", adj =0)
plot(re78 ~ re75 , data=dfsamp , pch =20, cex =0.5 , las =0,
      col= adjustcolor ("black", alpha =0.4), fg="gray")
mtext (side =3, line =0.5 , "B: 40% opacity ", adj =0)
blueRamp <- colorRampPalette (c("white", blues9 ))
with(dfsamp , smoothScatter (re75~re74 , , fg="gray",
                               las =0, colramp = blueRamp ))
mtext (side =3, line =0.5 , "C: Color density plot",
       adj =0)
With alpha=0.4, two overlapping points have a combined opacity
of 80%, so that 20% of the white background shows through. Three
or more overlapping points appear as completely black.
    Compare three plots shown in Figure 7.2. Points overlap to such                                                                                                                                                                                                                         The plots show a sample of 3000 of
an extent that Panel A, gives very limited information about the                                                                                                                                                                                                                            the points. Plotting all the points gives
                                                                                                                                                                                                                                                                                            an incoveniently large graphics file,
density of points. Panel B, where the color opacity is 40%, gives                                                                                                                                                                                                                           while not giving a more informative
a better indication of variation in the density of points. Panel C                                                                                                                                                                                                                          graph.
uses the function smoothScatter() to provide a color density
representation of the scatterplot. This is a more nuanced way to
show the density of points.

118   learning and exploring r
7.1.4     The shape of the graph sheet
Aspect ratio, i.e., the ratio of x-distance to y-distance, has a large say
in what is visually obvious. Figures 7.3A and 7.3B show the same
data: Features that are at an angle that is close to the horizontal or
          A: Aspect ratio approx 1:1              B: Aspect ratio approx 1:3.5
         1.0   ●           ●      ●      ●      1.0      ●                              ●                 ●               ●
              ●      ●●     ●                          ●                ● ●               ●
                                   ●                                                                        ●
                                        ●●                                                                              ●   ●
         0.5                     ●              0.5                                                    ●
                ●         ●                                ●                          ●
                    ● ●                                               ●      ●
         0.0                 ●                  0.0                                           ●
                                    ●                                                                         ●
                                       ●                                                                             ●
        −0.5     ●              ●              −0.5           ●                                      ●
                   ●    ●●                                          ●           ●   ●
                              ●                                                                 ●
                                     ●                                                                          ●
        −1.0      ●     ●      ●      ●        −1.0              ●                ●               ●               ●
             0    5    10   15   20   25             0            5            10          15            20          25
                                                                                          Figure 7.3: Figures A and B show the
                                                                                          same data, but with widely different
                                                                                          aspect ratios.
the vertical are hard to detect visually. Patterns of change or other
features should, to be visually obvious, be offset by an angle of at
least 20◦ from both the horizontal and the vertical.
For each of Figures 7.3A and 7.3B the code, after setting the dimen-
sions of the figure page, is:
plot ((1:30) *0.92 , sin ((1:30) *0.92),
       xlab="", ylab="")
    The dimensions of the graphics display can be specified when
a graphics window is opened. Once opened, the shape and size of
a screen device can be changed by clicking and dragging on one
corner.
    The R for Windows functions win.graph() or x11() that set
up the Windows screen take the parameters width (in inches),
height (in inches) and pointsize (in 1/72 of an inch). The set-
ting of pointsize (default =12) determines character heights. It is
the relative sizes that matter for screen display or for incorporation
into Word and similar programs.
7.1.5     Multiple plots on the one page
The parameter mfrow can be used to configure the graphics sheet                           For a layout in which columns are
so that subsequent plots appear row by row, one after the other in                        filled before moving to a new row, use
a rectangular layout, on the one page. The following presents four                        mfcol in place of mfrow.
different transformations of data from the dataset Animals (MASS),
in a two by two layout:
## Supplementary figure 9.2
library (MASS)
oldpar <- par(pch =16, pty="s", mfrow=c(2 ,2))
with(Animals , {                    # bracket several R statements
   plot(body , brain)
   plot(sqrt(body), sqrt(brain ))
   plot(body ^0.1 , brain ^0.1)

                                                                  graphics – base, lattice, ggplot2, rgl, googlevis. . .              119
   plot(log(body), log(brain ))
})                    # close both sets of brackets
par( oldpar )         # Restore former settings
   A more flexible alternative is to use the graphics parameter fig
to mark out the part of the graphics page on which the next graph
will appear. The following marks out, successively, a plot region that
occupies the upper 62% of the plot region, then the lower 38%.
par(fig = c(0, 1, 0.38 , 1), mgp=c(3,0.5 ,0))                                                   par(fig = c(0,1,0.38,1))
           # xleft , xright , ybottom , ytop                                                    marks out a plot region that is
## Panel A                                                                                      the total width, starts 38% of the
par(fig = c(0, 1, 0, 0.38), new=TRUE)                                                           way up, and extends to the top.
## Plot graph B                                                                                 par(fig=c(0,1,0,0.38),
par(fig = c(0, 1, 0, 1))       # Restore settings                                               new=TRUE) marks out the lower 38%
                                                                                                of the page.
The effect of new=TRUE is, somewhat counter-intuitively, “assume a
new page is already open; do not open a new page”.
7.1.6          Plots that show the distribution of data values
                                                                                                Density plots are much preferable, for
We discuss histograms, density plots, boxplots and normal prob-                                 most purposes, to histograms. Both
ability plots. Normal probability plots are a specialised form of                               have limitations.
cumulative density plot.
Histograms and density plots
                                                                                                Figure 7.4: The two panels show the
                  A: Breaks at 72.5, 77.5,...                    B: Breaks at 75, 80, ...
                                                                                                same data, but with a different choice
               0.10                                       0.10
                                                                                                of breakpoints.
               0.08                                       0.08
     Density                                    Density
               0.06                                       0.06
               0.04                                       0.04
               0.02                                       0.02
               0.00                                       0.00
                      75   80   85   90   95                     75   80   85   90   95   100
                           Total length                                Total length
    The shapes of histograms depend on the placement of the breaks,
as illustrated by Figure 7.4. The following code plots the histograms
and superimposes the density plots.
                                                                                                The argument freq=FALSE gives a
par(mgp=c(3,0.5 ,0))
                                                                                                vertical scale that is the number of
ftotlen <- subset (possum , sex =="f")[, " totlngth "]
                                                                                                points per unit interval, i.e., it is the
## Left panel: breaks at 72.5 , 77.5 ,..
                                                                                                “density” estimate that is given by
hist(ftotlen , breaks = 72.5 + (0:5)*5, freq=FALSE ,
                                                                                                the upper bar of each rectangle. This
      xlab="Total length ", ylim=c(0,0 .11),
                                                                                                is needed for the superposition of a
      main ="A: Breaks at 72.5 , 77.5 ,...")
                                                                                                density curve onto the histogram.
## Now superimpose a density curve , as in Fig. 7.3
lines ( density ( ftotlen ))
##
## Panel B: breaks at 75, 80, ...
hist(ftotlen , breaks = 75 + (0:5)*5, freq=FALSE ,

120   learning and exploring r
       xlab="Total length ", ylim=c(0,0 .11),
       main="B: Breaks at 75, 80, ...")
    The height of each rectangle of a histogram provides a crude den-
sity estimate. These estimates change in jumps, at breakpoints that
are inevitably chosen somewhat arbitrarily. A smoothly changing
density estimate, such as given by the superimposed density curves
in the panels of Figure 7.4, makes better sense than an estimate that
changes in jumps.
    Unless samples are very large, the shape of both histograms and      Neither histograms nor density plots
density plots will show large statistical variability. Density plots are are effective for checking normality.
                                                                         For that, use a normal probability plot.
helpful for showing the mode, i.e., the density maximum.
    The following gives a density plot, separately from the his-
tograms that are shown in 7.4.
## Supplementary figure 9.3
with( subset (possum , sex =="f"),
       plot( density ( totlngth ), type="l"))
    For use of density plots with data that have sharp lower and/or      6
                                                                           Thus, a failure time distribution will
upper cutoff limits, it may be necessary to specify the x-axis limit or
                                                                         have a sharp cutoff at zero, which may
limits.6 Use the parameters from and/or to for this purpose. This        also be the mode.
issue most commonly arises with a lower cutoff at 0.
Boxplots
Boxplots use a small number of characteristics of a distribution
to characterize it. Look up help(boxplot) for details. It can be
                                                                                ●
insightful to add a “rug” that shows the individual values, by default
along the horizontal axis (side=1). Figure 7.5 is an example. Code
                                                                                75      80    85      90     95
for the plot is:
## Code                                                                  Figure 7.5: Distribution of lengths
with( subset (possum , sex =="f"),                                       of female possums. The vertical bars
       { boxplot (totlngth , horizontal =TRUE)                           along the x-axis (together making up a
         rug( totlngth )} )                                              ’rug’) show actual data values.
Normal probability plots
                                                                         A point pattern that is not consistent
The function qqnorm(y) gives a normal probability plot of the            with random deviation from a line
values of y. In such a plot, data from a normal distribution will be     indicates a non-normal distribution.
scattered about a line. To calibrate the eye to recognise plots that
indicate non-normal variation, it helps to compare the plot for the
data in hand with several normal probability plots that use rnorm()
to generate random values. Figure 7.6 is an example.
## Q-Q plot for the data (top left panel)
ftotlen <- subset (possum , sex == "f")[, " totlngth "]
qqnorm (ftotlen , xlab="",
          ylab= expression (bold("Data")))
## Code for a plot with random normal data
qqnorm ( rnorm (43) , xlab="", ylab=" Simulated ")

                                                                                                                     graphics – base, lattice, ggplot2, rgl, googlevis. . .                                                                                         121
                    Normal Q−Q Plot                                            Q−Q: Simulated                                                Q−Q: Simulated                                                                 Q−Q: Simulated
                                                          ●                                                           ●                                                                 ●                                                                       ● ●
               95                                     ●                    2                                                                                                                                                                                ●
                                                  ●                                                           ●● ●                                                                                               1.5                                       ●
                                                 ●                                                                                       1                                    ●●
                                                              Simulated                                                     Simulated                                                                      Simulated
                                                                                                                                                                           ●●●
                                               ●●
                                            ●●●●                           1                                                                                          ●●●●●●                                     1.0                                     ●●
               90                         ●
                                          ●●                                                               ●●●                                                       ●
                                                                                                                                                                     ●●                                                                                ●
                                                                                                                                                                                                                                                       ●●●
                                      ●
                                      ●●
                                       ●●
                                        ●●
                                         ●                                                               ●●●                             0                         ●●
                                                                                                                                                                    ●                                                                                ●●
   Data
                                     ●
                                     ●                                                                  ●
                                                                                                        ●                                                         ●●                                                                                ●●
                                  ●
                                   ●
                                   ●●
                                    ●                                                               ●
                                                                                                    ●●
                                                                                                     ●●
                                                                                                      ●●
                                                                                                       ●
                                                                                                                                                             ●●
                                                                                                                                                              ●●
                                                                                                                                                               ●●
                                                                                                                                                                ●●
                                                                                                                                                                 ●●                                              0.5                               ●
                                                                                                                                                                                                                                                   ●●
                                 ●●                                                               ●●
                                                                                                   ●
               85              ●
                               ●●●                                         0                   ●
                                                                                               ●
                                                                                                ●
                                                                                                ●●
                                                                                                 ●●                                                        ●
                                                                                                                                                         ●●●
                                                                                                                                                            ●●
                                                                                                                                                                                                                 0.0
                                                                                                                                                                                                                                                  ●
                                                                                                                                                                                                                                                  ●
                             ●●                                                               ●
                                                                                              ●
                                                                                                                                        −1              ●●                                                                                      ●
                                                                                                                                                                                                                                                ●
                                                                                                                                                                                                                                                 ●
                                                                                                                                                                                                                                                 ●
                           ●●●                                                              ●●                                                         ●                                                                                      ●●
                                                                                                                                                                                                                                               ●
                          ●                                                                                                                                                                                                                   ●
                        ●●                                                −1               ●●                                                    ●   ●●                                                         −0.5                        ●
                                                                                                                                                                                                                                            ●●
                                                                                                                                                                                                                                             ●
                                                                                          ●                                                                                                                                                ●
               80                                                                        ●●                                             −2                                                                                                ●
                                                                                                                                                                                                                                       ●●●●
                                                                                                                                                                                                                −1.0                  ●●
                                                                                       ●●                                                                                                                                           ●●
                                                                          −2   ● ●                                                      −3                                                                      −1.5            ●
               75   ●                                                                                                                        ●                                                                              ●
                    −2         −1      0       1      2                        −2         −1      0       1       2                          −2         −1       0        1         2                                       −2         −1        0     1        2
                    Q−Q: Simulated                                             Q−Q: Simulated                                                Q−Q: Simulated                                                                 Q−Q: Simulated
                2                                         ●                2                                    ●● ●
                                                                                                                     ●                                                                  ●                               2                                           ●
                                                     ●●                                                        ●
                                                                                                                                         2
                                                    ●                                                                                                                               ●
                                                  ●●                                                         ●●                                                                                                                                             ●●
   Simulated                                                  Simulated                                                     Simulated                                                                      Simulated
                                                                           1                                ●
                                                                                                           ●●                                                                  ●●                                       1                                 ●●
                1                              ●●●●                                                     ●
                                                                                                        ●
                                                                                                         ●
                                                                                                         ●●                              1                                    ●                                                                     ●●●●●●
                                             ●●                                                     ●●
                                                                                                     ●
                                                                                                      ●
                                                                                                      ●●
                                                                                                       ●                                                                 ●●●●●                                                                  ●
                                                                                                                                                                                                                                                ●●
                                                                                                                                                                                                                                                 ●●
                                                                                                                                                                                                                                                  ●●
                                                                                                                                                                                                                                                   ●
                                           ●●
                                            ●●                                                   ●●
                                                                                                  ●●
                                                                                                   ●●                                                                  ●
                                                                                                                                                                       ●●                                               0                      ●
                                                                                                                                                                                                                                               ●
                                          ●●                               0                     ●                                                                   ●●
                                                                                                                                                                      ●                                                                     ●●
                                                                                                                                                                                                                                             ●●
                                                                                                                                                                                                                                              ●
                0                        ●
                                         ●●                                                     ●
                                                                                                ●                                                                   ●
                                                                                                                                                                    ●●                                                                      ●
                                       ●
                                       ●●
                                        ●
                                                                                              ●●                                         0                       ●
                                                                                                                                                                 ●
                                                                                                                                                                  ●
                                                                                                                                                                  ●●
                                                                                                                                                                   ●
                                                                                                                                                                                                                                          ●
                                                                                                                                                                                                                                           ●
                                                                                                                                                                                                                                           ●
                                    ●
                                    ●●
                                     ●●
                                      ●                                                    ●●●●                                                                ●●
                                                                                                                                                                ●                                                                       ●
                                                                                                                                                                                                                                     ●●●●
                                                                                                                                                                                                                                         ●●
                                  ●
                                   ●                                                                                                                          ●
                                                                                                                                                              ●●                                                       −1       ● ●●●●
               −1               ●●●                                       −1              ●                                                                 ●
                                                                                                                                                        ●●●●●●
                               ●                                                       ●●●                                              −1             ●
                             ●●●                                                                                                                                                                                       −2
                                                                                                                                                   ●
                            ●                                             −2       ●                                                             ●●
               −2   ●
                        ●
                                                                               ●
                                                                                                                                        −2   ●                                                                              ●
                                                                                                                                                                                                                       −3
                    −2         −1      0       1      2                        −2         −1      0       1       2                          −2         −1       0        1         2                                       −2         −1        0     1        2
                                                                                                                                                                                    Figure 7.6: Normal probability plots.
There is one unusually small value. Otherwise the points for the                                                                                                                    The top left panel shows the 43
                                                                                                                                                                                    lengths of female possums. Other
female possum lengths are as close to a straight line as in many of                                                                                                                 panels are for independent normal
the plots for random normal data.                                                                                                                                                   random samples of size 43.
7.1.7                   ∗ Plotting                 Text that Includes Technical Symbols
The functions expression() and substitute() can be used to create                                                                                                                   Axis labels can be expressions, in
mathematical expressions, for later evaluation or for printing onto a                                                                                                               lattice and ggplot2 as well as in base
graph. For example, expression(x^2) will print, when supplied to                                                                                                                    graphics. Tick labels can for example
text() or mtext() or another such function (this includes lattice                                                                                                                   be vectors of expressions.
and ggplot2 functions), as x2 .
    For purposes of adding text that includes mathematical and other
technical symbols, the notion of expression is generalized, to allow
“expressions” that it does not make sense to try to evaluate. For                                                                                                                   Items that are separated by an asterisk
example, expression("Temperature (" * degree * "C)")                                                                                                                                (*) are juxtaposed side by side. The
prints as: Temperature (◦ C).                                                                                                                                                       initial text is followed by a degree
    The following indicate some of the possibilities:                                                                                                                               symbol, and then by the final text.
- Letters such as a, b, c, x, . . . are printed literally.
- alpha denotes the Greek letter α, while Alpha denotes the upper
  case symbol. Similarly for other Greek letters.
- hat(x) denotes x̂.
- italic(x), bold(x), bolditalic(x), and plain(x) have the                                                                                                                                            80                                                                ●
  obvious meaning.
                                                                                                                                                                                                      60
- frac(a,b) denotes a .
                                                                                                                                                                                        Area = πr 2
                                                                                                                                                                                                                                                        ●
                    b
                                                                                                                                                                                                      40
   Figure 7.7 demonstrates the use of an expression to provide y-                                                                                                                                                                            ●
axis labeling. The code is:                                                                                                                                                                           20
                                                                                                                                                                                                                                ●
yl <- expression ("Area = " * pi * r^~2)                                                                                                                                                                         ●
plot (1:5 , pi*(1:5)^2 , xlab=" Radius (r)", ylab=yl)                                                                                                                                                            1              2            3          4               5
The tilde (~) in r^~2 is used to insert a small space.                                                                                                                                                                              Radius (r)
                                                                                                                                                                                    Figure 7.7: A mathematical expression
                                                                                                                                                                                    is included as part of the y-axis label..

122   learning and exploring r
    Use substitute() in place of expression() when symbols in
the expression are to be replaced by values that will be provided at
the time of forming the expression.
    See help(plotmath) for further details of the conventions, and
of the symbols that are available. Type demo(plotmath) to see a
wide range of examples of what is possible.
7.2     Lattice Graphics
Lattice Graphics:                                                         The lattice package is included in all
                                                                          R binary distributions that are avail-
 Lattice Lattice is a flavour of trellis graphics                         able from a CRAN (Comprehensive
          (the S-PLUS flavour was the original)                           R Archive Network) mirror. It im-
                                                                          plements a trellis style of graphics,
  Lattice   Lattice is more structured, automated and stylized.
                                                                          as in the S-PLUS implementation of
  vs base   For standard purposes, much is automatic.                     the S language. It is built on the grid
  Lattice   Lattice syntax is consistent and tightly regulated            low-level graphics system, described
                                                                          in Part II of Paul Murrell’s R Graphics
  syntax    For lattice, graphics formulae are mandatory.
                                                                          To see some of the possibilities that
                                                                          lattice graphics offers, enter
    Lattice (trellis) graphics functions allow                            demo( lattice )
    the use of the layout on the page to reflect meaningful aspects
of data structure. Groups can be readily distinguished within data,       Functions that give styles of graph
                                                                          that are additional to those described
either using different colors and/or symbols and/or line types within     here include contourplot(),
panels or using different panels. Multiple columns of data can be         levelplot(), cloud(),
plotted, either distinguished within panels or using different panels.    wireframe(), parallel(),
    Functions in the latticeExtra package further extend what is          qqmath() and tmd().
available.
    In the discusssion that follows, there will be use of the layering    These abilities, due to Felix Andrews,
abilities provided by functions in latticeExtra. Note that loading        make it possible to build up lattice
                                                                          graphics objects layer by layer.
latticeExtra will at the same time load lattice, which latticeExtra has
as a dependency.
library ( latticeExtra , quietly =TRUE)
                                                                                                       ●
                                                                                        1200
                                                                                        1000
7.2.1    Lattice graphics – basic ideas
                                                                              Brainwt
                                                                                         800
Figure 7.8 was obtained using the lattice function xyplot(). In this                     600
                                                                                                   ●                     ●
                                                                                         400
simple case, the syntax closely matches that of the base graphics
                                                                                         200   ●
function plot(). Code is:                                                                      ●
                                                                                               0   50       100   150   200
## On the command line: Create and print object
xyplot ( Brainwt ~ Bodywt , data= primates )                                                               Bodywt
                                                                          Figure 7.8: Use of lattice function
                                                                          xyplot() to give a graph.
Lattice graphics functions return graphics objects
Note an important difference between lattice and base graphics.
Lattice graphics functions do not print graphs.7 Instead they return      7
                                                                              This applies also to ggplot2.
trellis graphics objects. The graph appears when the object is printed

                                                     graphics – base, lattice, ggplot2, rgl, googlevis. . .            123
(use print() or plot()). Sending the output from a lattice graph-
ics function to the command line invokes print() and the graph is
plotted, as was done for Figure 7.8.
    A Brainwt versus Bodywt scatterplot for the primates data,
such as was given earlier, might alternatively have been obtained
using the function the function xyplot() from the lattice package.
## Save the result as a trellis graphics object
# [For plot (), this is not possible. ]
## Create trellis object
gph <- xyplot ( Brainwt ~ Bodywt , data= primates )
## Print graph; a graphics device must now be open
print (gph)
The object gph need not be printed at this point. It can be kept for
printing at some later time. Or it can be updated, using the function
update(), and then printed, thus:
gph <- xyplot ( Brainwt ~ Bodywt , data= primates )
gph2 <- update (gph , xlab="Body wt (kg)",
                    ylab="Brain wt (g)")
print (gph2) # Or it is enough to type ' gph2 '
    Inside a function or in a file that is sourced, print() must ordi-          The graph will however be printed if
narily be used to give a graph, thus:                                           xyplot(...) is the final statement in
                                                                                a function that returns its result to the
print ( xyplot (ACT ~ year , data= austpop ))                                   command line.
Addition of points, lines, text, . . .
For adding8 to a plot that has been created using a lattice function,           8
                                                                                  Do not try to use points() and
use panel.points(), panel.text(), and other such functions, as                  other such base graphics functions
                                                                                with lattice graphs.
will be described in Subsection 7.2.8.
    Mechanisms for the control of a wide variety of stylistic features
are best discussed in the context of multi-panel graphs, which we
now consider.
7.2.2     Panels of scatterplots
Graphics functions in the lattice package, are designed to allow
row by column layouts of panels. Different panels are for different
subsets of the data. Additionally, points can be distinguished, within
panels, according to some further grouping within the data.
    The ais dataset (DAAG) has data from elite Australian athletes              See the help page for ais for details.
who trained at the Australian Institute of Sport. These included
height, weight, and other morphometric measurements, as well as
several types of blood cell counts. A breakdown of the total of 202
athletes by sex and sport gives:
with(ais , table(sex ,sport ))
     sport
sex B_Ball Field Gym Netball Row Swim T_400m T_Sprnt Tennis W_Polo
   f       13       7    4         23 22        9       11         4        7          0

124    learning and exploring r
  m          12           12     0                      0    15        13                18        11       4         17
    Figure 7.9 demonstrates the use of xyplot(), for the rower
and swimmer subset os the ais dataset. The two panels distinguish
the two sports, while different plotting symbols (on a color device,
different colors will be used) distinguish females from males.
                                                                                                                Figure 7.9: Height (ht) versus Weight
                                                        50    60       70       80       90                     (wt), for rowers (Row) and swimmers
                                                                                                                (Swim). Different plotting symbols
                           Row                                         Swim
                                               ●
                                                                                                                are used to distinguish males from
                                        ●          ●                                 ● ●
                                                                                                                females.
                                        ●                                            ●●
      190                             ●                                                        ●
                                      ● ●●●                                                ●
                                       ●
                                       ●●●
                                                                        ●       ●●   ●
      180
                                      ●
                                                                                ●                  f
ht                                                                          ●                      m    ●
                                                                   ●
      170
                 ●
      160
            50       60   70     80       90
                                                       wt
Suitable code is:                                                                                               Use
                                                                                                                auto.key=list(columns=2) to
xyplot (ht ~ wt | sport , groups =sex , data=ais ,
                                                                                                                generate a simple key, with items side
        par.settings = simpleTheme (pch=c(4 ,1)) ,
                                                                                                                by side in two columns rather than
        scales =list(tck =0.5),
                                                                                                                stacked in a single column as is the
        auto.key =list(space="right"),
                                                                                                                default columns=1.
        subset =sport%in%c("Row","Swim"))
    In the graphics formula ht ~ wt | sport, the vertical bar                                                   Subsection 7.2.3, which now follows,
indicates that what follows, in this case sport, is a conditioning                                              explains the use of the argument
variable or factor. The graphical information is broken down by                                                 par.settings, and its call to
                                                                                                                simpleTheme().
levels of the factor sport. The parameter aspect controls the ratio
of dimensions in the y and x directions.
7.2.3       Setting stylistic features
The function simpleTheme() creates a “theme”, i.e., a list of set-
tings, that can be supplied via the argument par.settings in the
graphics function call. Use of the argument par.settings to a
lattice function makes the settings locally, for the specific graphics
object that results.
    The function simpleTheme() accepts arguments col, alpha,                                                    Settings that are not available us-
cex, pch, lty, lwd, font, fill, border, plus col.points,                                                        ing simpleTheme() can if required
col.line, alpha.points and alpha.line. These allow sepa-                                                        be added to the theme object that
                                                                                                                simpleTheme() returns. See Subsec-
rate control (of color and of opacity) for points and lines.                                                    tion 7.2.6 has details.
    The function trellis.device() opens a new graphics device,
with settings that have in mind the use of lattice functions. The
function trellis.par.set() sets or changes stylistic features for
the current device. Both these functions accept an argument theme.9                                             9
                                                                                                                  Simple variations on the default
                                                                                                                theme can be created by a call to
                                                                                                                simpleTheme().

                                                                                                         graphics – base, lattice, ggplot2, rgl, googlevis. . .         125
Settings made by trellis.device() or trellis.par.set() will
be over-written by any local settings that are stored as part of the
graphics object.
7.2.4                                   Groups within data, and/or columns in parallel
Table 7.1 shows selected rows from the data set grog (DAAG pack-
age). Each of three liquor products (drinks) has its own column.
Rows are indexed by the factor Country.
                                                  Beer        Wine          Spirit       Country                  Year              Table 7.1: Apparent annual alcohol
                                        1         5.24        2.86           1.81        Australia                1998              consumptiom values, obtained by
                                        2         5.15        2.87           1.77        Australia                1999              dividing estimates of total available
                                                                                                                                    alcohol by number of persons aged
                                     ....                                                                                           15 or more. These are based on
                                        9            4.57         3.11          2.15     Australia                2006              Australian Bureau of Statistics and
                                       10            4.50         2.59          1.77     NewZealand               1998              Statistics New Zealand figures.
                                       11            4.28         2.65          1.64     NewZealand               1999
                                     ....
                                       18            3.96         3.09          2.20     NewZealand               2006
    Figure 7.10 is one of several possible displays that might be used
to summarize the information in Table 7.1. It has been created by
updating the following simplified code:
## Simple version of plot
grogplot <- xyplot (
              Beer+ Spirit +Wine ~ Year | Country ,
              data=grog , outer=FALSE ,
              auto.key =list(space="right"))
                                                                                                                                    Figure 7.10: Australian and New
                                                                           1998 2000 2002 2004 2006                                 Zealand apparent per person annual
Amount consumed (per person)
                                                                                                                                    consumption (in liters) of the pure
                                                 Australia                           NewZealand                                     alcohol content of liquor products, for
                                    ●    ●
                               5             ●   ●        ●
                                                      ●       ●    ●   ●
                                                                                                                                    1998 to 2006.
                                                                            ●        ●
                                                                                 ●       ●   ●   ●   ●    ●
                               4                                                                              ●
                                                                                                                    Beer     ●
                               3                                                                                    Spirit
                                                                                                                    Wine
                               2
                               1
                                   1998 2000 2002 2004 2006
                               Observe that:
- Use of Beer+Spirit+Wine gives plots for each of Beer, Spirit
  and Wine. The effect of outer=FALSE is that these appear in the
  same panel.
- Conditioning by country (| Country) gives separate panels for
  separate countries.

126   learning and exploring r
    The following updates the object to give Figure 7.10:
## Update trellis object , then print                                    Notice the use of the function
ylab <- " Amount consumed (per person )"                                 simpleTheme() to set up a “theme”
parset <- simpleTheme (pch=c(1 ,3 ,4))                                   that was used to control point and line
finalplot <- update (grogplot , ylim=c(0,5.5),                           settings.
                             xlab="", ylab=ylab ,
                             par.settings = parset )
print ( finalplot )
    Figure 7.10 used different symbols, in the one panel, to distin-
guish drinks, with different countries in different panels. For separate
panels for the three liquor products (different levels of Country can
then use the same panel), specify outer=TRUE:
xyplot (Beer+ Spirit +Wine ~ Year ,
          groups =Country , outer=TRUE ,
          data=grog , auto.key =list( columns =2) )
    Where plots are superposed in the one panel and, e.g., regression
lines or smooth curves are fitted, this is done separately for each
different set of points. Different colors, and/or by different symbols
and/or line styles, can be used to make the necessary distinctions.
    Here is a summary:
  Break data down a/c to levels of the factor Country:
          Overplot (a single panel):                  Separate panels:
     Beer ∼ Year, groups=Country                 Beer ∼ Year | Country
  Plot columns in parallel, as in Beer+Wine+Spirit ∼ Year:
          Overplot (a single panel):                  Separate panels:
                 outer=FALSE                            outer=TRUE
7.2.5     Keys – auto.key, key and legend
The argument auto.key=TRUE gives a basic key. If not otherwise           The argument auto.key sets up a
specified, colors, plotting symbols, and line type use the current       call key=simpleKey(). If necessary,
settings for the device. The argument text has levels(groups) as         use legend=NULL when updating, to
                                                                         remove an existing key and allow the
its default. that identifies colors, plotting symbols and names for the  addition of a new key.
groups. For greater flexibility, auto.key can be a list. Settings that
are often useful are:
- points, lines: in each case set to TRUE or FALSE.
- columns: number of columns of keys.
                                                                         c(0,0) is the bottom left corner of
- x and y, which are coordinates for the whole display area. Use
                                                                         the legend, etc.
   with corner set to one of c(0,0), c(1,0), c(1,1) and c(0,1).
- space: one of "top", "bottom", "left", "right".
∗ Use  of textGrob() to add legends
The function textGrob() (grid) creates a text object which can
then be supplied to the lattice function. This mechanism for supply-

                                                  graphics – base, lattice, ggplot2, rgl, googlevis. . .                    127
                                                                                  Stripplot of cuckoo data
ing legends can be used when multiple legends are required.                               wren    ●●● ●
                                                                                                      ●●●● ●●●
                                                                                      tree.pipit        ● ●●●● ●   ●
                                                                                                                   ●●
                                                                                                                    ●●●
    The following code adds an initial legend, as in Figure 7.11:                         robin         ● ●●●●●● ●
                                                                                                                 ●● ●
                                                                                   pied.wagtail        ●   ●
                                                                                                           ●●●● ● ●●
                                                                                                                   ● ●    ●
plotnam <- " Stripplot of cuckoo data"                                            meadow.pipit   ● ● ●● ● ●●●
                                                                                                           ●●
                                                                                                            ●●●
                                                                                                             ●
                                                                                                             ●●
                                                                                                             ●●●
                                                                                                               ●●●
                                                                                                                 ●●●●● ●●
stripplot ( species ~ length , xlab="", data=cuckoos ,                          hedge.sparrow         ●   ●●     ●
                                                                                                                ●●● ●●●
                                                                                                                      ●   ●
   legend =list(top=list(fun=grid :: textGrob ,                                                   20 21 22 23 24 25
                             args=list(label=plotnam ,
                                          x =0))))
# x=0 is equivalent to x=unit (0," npc ")                                    Figure 7.11: The argument legend
# npc units are on a scale from 0 to 1                                       has been used to add text, supplied as
                                                                             a ’grob’.. Here, it would be easier to
Additional legends are supplied by adding further list elements, for         use of the argument main.
example a list element bottom as well as a list element top.
7.2.6     Lattice settings – further notes
In general, use themes to make point, line and fill color settings. Use
the scales argument, in the call to the lattice function, for axes, tick     For a visual display that shows default
marks, and tick labels.                                                      settings for points, lines and fill color,
    For changes that go beyond what simpleTheme() allows, first              enter:
identify the names under which settings are stored. Type:                    trellis.device ( color = FALSE )
                                                                             show.settings ()
> names(trellis.par.get())                                                   trellis.device ( color =TRUE)
                                                                             show.settings ()
[1] "fontsize"                 "background"              "clip"
. . .
[28] "par.sub.text"
    The following sets the fontsize, separately for text and points:
trellis.par.set ( fontsize = list(text = 7,
                                         points = 4))
Parameters that affect axes, tick marks, and axis labels
These are manipulated by use of the scales argument to the lattice
function. The code for Figure 7.12 provides an example.
    The following gives a basic graph, which will then be updated:
## 1. Create a basic version of the graphics object
jobsB.xyplot <-
   xyplot ( Ontario + Quebec +BC+ Alberta + Prairies + Atlantic ~ Date ,
            data=jobs , type="b", layout =c(3,2), outer=TRUE ,
            ylab=" Number of jobs",
            scales =list(y=list( relation =" sliced ", log=TRUE )))
Now make several enhancements:
- Change the y-axis labels to show number of jobs, with
  log(number) in parentheses underneath.
- Use dates of the form Jan95 to label the x-axis.10                         10
                                                                                Refer back to Subsection 4.3.9.
- Reduce tick marks in length (tck=0.6, i.e., 60% of the default).
- The argument between=list(x=0.5, y=0.5) adds horizontal
  and vertical space between the panels.11                                   11
                                                                                This avoids overlap of tick labels.

128                 learning and exploring r
                                                                                                                         Jan95            Jul95           Jan96             Jul96                   Jan97
                                                           Alberta                                                                                Prairies                                                                                          Atlantic
                                                                                                                 1012
                                                                                                          ●
                    1422                                                                                        (6.92)                                                                                        973
                                                                                                      ●
                   (7.26)                                                       ●        ●
                                                                                                                  992                                                                                   ●   (6.88)                                           ●
                                                                                                 ●●                                                                                             ●
                                                                            ●       ●●       ●                                                                                                      ●                                               ●●           ●
                    1394                                                                                         (6.9)                                                    ●●●
                                                                                                                                                                                            ●                 953              ●●●
                                                                                                                                                                                                                                                ●        ●
                                                                        ●                                                   ●●●●●●●●●                                               ●●                                                                                       ●●●●●
                                                                                                                                                      ●       ●       ●         ●                           (6.86)     ●●               ●●                           ●
                   (7.24)                                           ●                                             973                                                                                                                                                                      ●●●
                                                                                                                                                                  ●
  Number of jobs
                                     ●                        ●●●                                                                                         ●                                                                                                              ●                             ●
                    1366                 ●       ●
                                                     ●
                                                         ●●                                                     (6.88)                                                                                        934
                               ●●            ●
                                                                                                                                                                                                            (6.84)
                   (7.22)
                                                           Ontario                                                                                Quebec                                                     1845                                        BC
                    5432                                                                                         3294                                                                                                                                                                                  ●
                                                                                                                                                                                                            (7.52)
                    (8.6)                                                                                        (8.1)                                                                                                                                                                             ●
                                                                                                                                                                                                             1808                                                                  ●           ●
                    5324                                                                     ●       ●●                                                           ●●
                                                                                                 ●        ●      3229                                                     ●●●                                (7.5)                                                           ●●●       ●
                                                                                         ●                                                                    ●                                                                                                                            ●
                   (8.58)                                               ●●●●                                    (8.08)                                ●
                                                                                                                                                                                                                                                                 ●●
                                                                                                                                                                                                                                                                         ●
                                                                                     ●                                           ●        ●●●    ●●       ●                     ●       ●
                                                                                                                                                                                            ●●●         ●
                                                              ●●●●                                                          ●        ●●                                                                      1772                               ●●
                    5219       ●●
                                         ●●●●●●                                                                  3165                                                                                                                       ●
                                                                                                                                                                                                                                                     ●
                                                                                                                                                                                                                                                             ●
                                     ●                                                                                                                                              ●                       (7.48)             ●●
                                                                                                                                                                                                                                        ●
                   (8.56)                                                                                       (8.06)                                                                                                 ●            ●                    ●
                                                                                                                                                                                                             1737
                    5115                                                                                                                                                                                                   ●
                                                                                                                                                                                                            (7.46)
                   (8.54)
                            Jan95            Jul95             Jan96                Jul96             Jan97                                                                                                          Jan95          Jul95                Jan96                Jul96                Jan97
                                                                                                                                                                                                                Figure 7.12: Jobs growth in Canadian
                                                                                                                                                                                                                provinces, between January 1995 and
                                                                                                                                                                                                                December 1996.
## 2. Code for the enhancements to jobsB.xyplot
ylabpos <- exp( pretty (log( unlist (jobs[,-7])), 100))
ylabels <- paste0 (round( ylabpos ),"\n(", log( ylabpos ), ")")
## Create a date object ' startofmonth ' ; use instead of ' Date '
atdates <- seq(from =95, by=0.5 , length =5)
datelabs <- format (seq(from= as.Date ("1 Jan1995 ", format ="%d%b%Y"),
                          by="6 month", length =5), "%b%y")
update ( jobsB.xyplot , xlab="", between =list(x=0.5 , y=0.5),
         scales =list(x=list(at=atdates , labels = datelabs ),
                      y=list(at=ylabpos , labels = ylabels ), tck =0.6) )
7.2.7                    Lattice plots that show distributions
Stripplots, dotplots and boxplots
Because the syntax for stripplot() and boxplot() are very                                                                                                                                                       Differences between dotplot() and
similar, we demonstrate suitable code side by side. Figure 7.13                                                                                                                                                 stripplot() are mainly cosmetic.
summarizes cuckoo egg length data, from the dataset cuckoos from
DAAG:
                                                                                                                                                                                                                Figure 7.13: A stripplot and a dotplot
                                                                                                                                                                                                                appear side by side.
                            wren         ●● ● ●●●● ● ●●●                                                                 wren                ●
                       tree.pipit                    ●     ● ● ● ● ●●●●●●●                                         tree.pipit                                     ●
                            robin                    ●     ●●●●●● ●
                                                                  ●● ●                                                   robin                            ●
                    pied.wagtail                     ●     ●●● ●● ●●●● ●             ●                          pied.wagtail                                      ●
                   meadow.pipit      ● ● ●●                 ●●●●
                                                          ●●●● ●●
                                                               ●●
                                                               ●●●●●●● ●● ●● ●●                                meadow.pipit          ● ● ●            ●                    ●●
               hedge.sparrow                         ●    ●●      ●●
                                                                   ●● ● ●●●          ●                        hedge.sparrow                  ●                    ●
                                         20 21 22 23 24 25                                                                            20 21 22 23 24 25
                                    Cuckoo egg length (mm)                                                                       Cuckoo egg length (mm)
stripplot ( species ~ length , data=cuckoos ,
            xlab=" Cuckoo egg length (mm)")

                                                                            graphics – base, lattice, ggplot2,
                                                                                                       For slightly improved
                                                                                                                 rgl,               ..
                                                                                                                             labeling,
                                                                                                                       googlevis.            129
                                                                                                         precede the code with:
bwplot ( species ~ length , data=cuckoos ,                                                               levels ( cuckoos $ species ) <-
         xlab=" Cuckoo egg length (mm)")                                                                  sub(".", " ",
                                                                                                           levels ( cuckoos $ species ),
The aspect argument determines the ratio of distance in the y-                                             fixed =TRUE)
direction to distance in the x-direction.
Lattice style density plots
Here is a density plot (Figure 7.14), for data from the possum data
set (DAAG), that compares sexes and Vic/other populations.
                                                                                                         Figure 7.14: Lattice style density
                                                40      45    50     55                                  plot comparing possum earconch
                                                                                                         measurements, separately for males
                              f                              m                                           and females, between Victorian and
          0.25
                                                                                                         other populations. Observe that the
          0.20
Density
                                                                                  Vic                    scatter of data values is shown along
          0.15                                                                    other
          0.10                                                                                           the horizontal axis.
          0.05
          0.00     ●●● ●●
                        ●
                        ●●●
                         ●    ● ● ●●
                           ●●●●   ●
                                  ●
                                  ●●●
                                    ●●
                                    ●●●
                                      ●
                                      ●●               ●●●
                                                     ●●● ●
                                                         ●●●
                                                          ●●
                                                          ●●●
                                                            ● ●●
                                                            ●●●  ●
                                                                ●●
                                                                 ●●  ●
                                                                     ●●●●
                                                                  ●●●●
                  40    45        50   55
                                           earconch
## Code
colset <- c("gray","black")
densityplot (~ earconch | sex , groups =Pop ,
             data=possum ,
             par.settings = simpleTheme (col= colset ),
             auto.key =list(space="right"))
The functions densityplot() and histogram() do not allow
a name on the left of the ∼ symbol. The function histogram(),
which is otherwise similar to densityplot(), does not accept a
groups argument.
7.2.8            Panel functions
Each lattice function that creates a graphics object has its own panel                                   Subsection 7.2.9 will describe a
function. Creation of one’s own panel function allows detailed con-                                      radical extension of this basic scheme.
trol of panel contents. Or update() can be used to modify the panel                                      Further layers, created using layer()
or panels.                                                                                               and allied functions in the latticeExtra
                                                                                                         package can be “added” (the operator
    A user panel function will typically include, or consist of, calls to                                is “+”) to a trellis graphics object.
several of the variety of panel functions that are provided in lattice.
The function xyplot() has the panel function panel.xyplot().12                                           12
                                                                                                           When a groups argument is sup-
The following are equivalent:                                                                            plied, panel.xyplot() calls the
                                                                                                         function panel.superpose().
xyplot ( species ~ length , xlab="", data= cuckoos )
xyplot ( species ~ length , xlab="", data=cuckoos ,
         panel= panel.xyplot )
A user function, used in place of panel.xyplot(), might for ex-
ample call panel.superpose(), followed or preceded by other
available panel functions.
   Available panel functions include:

130   learning and exploring r
• panel.points(), panel.lines(), panel.text(),                             Note that an alternative to
                                                                           panel.points() is lpoints().
  panel.rect(), panel.arrows(), panel.segments(),
                                                                           Similarly for the other functions.
  panel.polygon()
  (all documented on the same help page as panel.points());
• panel.abline(), panel.curve(), panel.rug(),
  panel.fill(), panel.average(),
  panel.mathdensity(), panel.refline(),
  panel.loess(), panel.lmline()
  (all documented on the same help page as panel.abline()).
   The following graphics object gph will be used as a starting                                   ● Human
                                                                                      1200
point, in the discussion that now follows:
                                                                                      1000
gph <- xyplot ( Brainwt ~ Bodywt ,        data=primates ,
                                                                            Brainwt
                                                                                       800
                xlim=c(0 ,300))
                                                                                       600
   Now create a panel function that both plots the points and adds                     400
                                                                                                 ● Chimp
                                                                                                                ● Gorilla
labels. The graphics object can then be updated, as in the code that                   200   ● Rhesus monkey
                                                                                             ● Potar monkey
now follows, to use this panel function:
                                                                                                50 100 150 200 250
my.panel <- function (x,y){
                                                                                                       Bodywt
  panel.xyplot (x,y)
  panel.text (x,y, labels = rownames ( primates ),
                                                                           Figure 7.15: Addition of labels, as
               cex =0.65 , pos =4)
                                                                           here, can be done by updating a graph
}
                                                                           that has the points, by use of a panel
update (gph , panel=my.panel ,
                                                                           function that both plots points and and
        scales =list(tck =0.6))
                                                                           adds labels, or by adding a new layer.
   Note that we could have supplied a panel function that plots the
points and adds the labels in the initial function call, thus:
xyplot ( Brainwt ~ Bodywt , data=primates ,
         xlim=c(0 ,300) , panel= my.panel )
    A further possibility is to add a new layer that has the labels,
as in Subsection 7.2.9 which now follows. However the plot is ob-
tained, Figure 7.15 shows the result.
7.2.9    The addition of new layers
The layering mechanism greatly extends the range of possibilities.
The code that follows gives a simple and somewhat trivial example
of its use – an alternative the use of a panel function for adding
labeling to Figure 7.15.
    Note again the graphics object gph, created above:
gph <- xyplot ( Brainwt ~ Bodywt ,        data=primates ,
                xlim=c(0 ,300))
The following uses the function layer(), from the latticeExtra
package, to create a second layer that has the labels. The layer that is
thus created is added to the graphics object gph:
gph + latticeExtra :: layer( panel.text (x,y,
                         labels = rownames ( primates ),
                         pos =4))

                                                                                         graphics – base, lattice, ggplot2, rgl, googlevis. . .        131
Note also layer_(), which reverses the order of the layers, equiva-                                                 Other convenience functions are
lent to using layer() with under=TRUE.                                                                              glayer() and glayer_(). These
    The function layer() allows as arguments, passed via the ...                                                    are equivalent, respectively, to call-
                                                                                                                    ing layer() and layer_() with
argument, any sequence of statements that might appear in a panel
                                                                                                                    superpose=TRUE. The layer is drawn
function. Such statements can refer to panel function arguments,                                                    once for each level of any group in the
including ’x’, ’y’ and ’subscripts’. Additionally, named column                                                     plot.
objects can be passed through an optional data argument.
    The function as.layer() creates a layer from a trellis graphics
object. This can then be “added” in the usual way.
7.3     ggplot2 – A Grammar of Graphics
                                                                                                                    The ggplot2 syntax is a variant of
The ggplot2 syntax is consistent, but less stylized than the lattice                                                Wilkinson’s “Grammar of Graphics”
syntax. As with lattice, ggplot2 functions return a graphics object.                                                (Springer, 2nd edn, 2005).
The graphics objects that ggplot2 functions return can be saved for
later use, or updated, or printed directly on to the graphics page.
Each different type of ggplot2 graphic display – scatterplot, his-
togram, density plot, histogram, etc. – is a different plot geom, or
“geometry”. These can be overlaid.
    The following loads the ggplot2 package:
library ( ggplot2 )
7.3.1      Examples that demonstrate ggplot2 abilities
Brain weight versus body weight
Figure 7.16 repeats Figure 3.1B from Chapter 3, now using ggplot2
abilities:
                                                                                             ●
                                                                                                 ●                  Figure 7.16: Plot of brain weight (gm)
                                                                                                                    versus body weight (kg). Log scales
                                                                             ●
                                                                                         ●
                                                                                                                    have been used on both axes. The
                                                                                       ●
                                                                            ●
                                                                                 ●
                                                                                     ● ●
                                                                                     ●
                                                                                                                    function coord_equal(), used with a
                                                                    ● ●      ● ● ●●
                     100                                              ● ● ●●                                        logarithmic scale, ensures that a given
                                                                             ●
                                                                  ●        ●                                        distance (e.g., 1cm) on either axis
             brain
                                                                ●●●
                                                                ●
                                                                ●
                                                        ●     ●
                                                                 ●
                                                                  ●                                                 represents the same relative change.
                                                          ● ●●●● ●
                                                             ●
                                                        ● ●● ●
                                                ●           ●
                                           ●              ●      ●
                                            ●
                                           ●             ● ●
                                                    ●
                                        ●
                       1               ● ●
                                   ●
                                   ●   ●
                               ●
                           ●
                                       1e−01                      1e+01                 1e+03
                                                                body
Code is:
library (MASS)
quickplot (body , brain , data=mammals , log="xy") +
  coord_fixed ()

132    learning and exploring r
Notice that quickplot() has been used to create an initial plot,            In subsequent discussion, the abbre-
with coord_equal() then used (“added”) to specify that a given              viated name qplot will be used in
distance will represent the same change on both axes. As a loga-            place of quickplot.
rithmic scale is used, this implies that the same relative change will
be given by the same distance. Here, observe that grid lines in both
directions are the same distance apart, with the distance representing
a change by a factor of 100,
    The following adds a regression line:
quickplot (body , brain , data=mammals , log="xy") +
   coord_fixed () +
   geom_smooth ( method =lm)
This “addition” of new functions that add to or modify the initial
graph can in principle proceed without limit.
    As the name hints, the function qplot() (or quickplot())
shortcuts the more detailed ggplot2 syntax. The call
quickplot ((body , brain , data=mammals , log="xy")
when written out using the detailed syntactic steps, becomes:
ggplot (mammals , aes(body , brain )) +
   geom_point () +
   scale_x_continuous (trans="log") +
   scale_y_continuous (trans="log")
The successive “+” operators combine output from function calls to
create a single graphics object. In the detailed syntactic steps, the
call to geom_point() plots the points, while the subsequent calls
change the x- and y-axis scales to logarithmic scales.
    In the call to ggplot(), the data argument is the only manda-
tory argument. It can be repeated in the call(s) to one or more of the
later geom functions. This allows different geoms, if required, to take
their data from different data frames.
    Changes to color or size or shape settings can be made                  Note that cex and size are syn-
separately for each different geom. Changing geom_point() to                onyms, as are color and colour.
                                                                            Also type is a synonym for geom.
geom_point(size=2.5) affects only the points.
Aesthetic mappings vs settings
Distinguish between settings and aesthetic mappings:
                         Use of quickplot()              Plots based on ggplot()
  Settings               size=I(3) or cex=3              size=3
  Aesthetic mappings     size=3 or size=sport            aes(size=3) or aes(size=sport)
The function aes() maps variables in the data to visual properties
(“aesthetics”) of geoms. In aes(body, brain above, the mappings
are to the x− and y−axes of the plot. Other possible mappings are
to color (use color to distinguish groups within the data), shape13         13
                                                                               Where base graphics has pch,
(distinguish by shape), size and fill.                                      ggplot2 has shape.

                                                         graphics – base, lattice, ggplot2, rgl, googlevis. . . 133
    Use of the argument size=3 in a call to quickplot() does
change the point size, but it adds an extraneous key. The same
happens if the argument mapping=aes(size=3) is supplied to
ggplot() or to geom_point() or to another such function.
    A further possibility is to use quickplot() (or qplot()) to
create an initial graphics object, then adding to this object. The
following code uses this approach to create Figure 7.19:
qplot (Year , mdbRain , data= bomregions2015 ,
         geom="point ",
         xlab="", ylab="Av. rainfall , M-D basin") +
   geom_smooth (span =0.5 , se=TRUE)
    In all cases, a ggplot object is created. This can be printed
immediately, or it can be saved as a named object. The graph is
created using the print method for a ggplot object.
7.3.2     An overview of ggplot2 technicalities
Available geometries and settings
Table 7.2 has details of a number of the geometries that are available
for ggplot objects. Table 7.3 lists some of the settings, in addition
to those already noted, that are available:
                                                                                    Table 7.2: Available geoms.
     quickplot()          ggplot()                             Available arguments to the geom function
     geom=                                                     (data, mapping, color, fill, alpha, plus . . . )
     "point"              +  geom_point()                      size, shape, etc.
     "line"               +  geom_line()                       size, linetype
     "path"               +  geom_path()1                      size, linetype
     "smooth"             +  geom_smooth()                     linetype, weight, se (TRUE or FALSE).
     "histogram"          +  geom_histogram()                  linetype, weight
     "density"            +  geom_density()                    weight, linetype, size
     "density2d"          +  geom_density2d()                  weight, linetype, size
 1
   Use geom_path() to connect observations, in the original order.
Example — Measurements on Australian athletes
Figure 7.17 plots height against weight, by sex, for the ais data.
Additionally, boxplots show the distributions of heights, and there
are two-dimensional density contours estimates. The graph is a tad
crowded.
    The following gives a simplified version of the plot:
## Overlay with boxplots and density contours
quickplot (wt , ht , data=ais ,
              geom=c(" boxplot ", "point", " density2d "),
              facets = . ~ sex)

134                 learning and exploring r
                                                                                                                                    Table 7.3: Control of ggplot2 graphics
                                                                                                                                    features. Functions such as xlab()
                                                                                                                                    and scale_x_continuous() that re-
                                                                                                                                    late to the x-axis all have counterparts
                                                                                                                                    with y in place of x. .
                                   Argument to qplot()                               ggplot() or qplot()1
 Title                             main="mytitle"                                    + labs(title="mytitle")
 Axes                              see help(qplot)                                   + scale_x_continuous()2
                                                                                       [or scale_x_discrete() or scale_x_date()]
 Axis labels                       e.g., xlab="myxlab"                               + xlab("myxlab")3
 log axes                          log="x", (or "y", or "xy")                        + scale_x_log10()4
 Facets5                           facets=sex ~ sport                                + facet_grid(sex ~ sport)
 Aspect ratio                      e.g., asp=1                                       + coord_equal()6
 Theme                             —
 Graph title                       e.g., main="maintitle"                            + ggtitle("mytitle")
 1
   Recall that quickplot() (or qplot()) returns a ggplot object. Functions
 such as xlab() or scale_x_continuous() can be used, just as for any other
 ggplot2 object, to update objects returned by quickplot().
 2
   Available arguments include limits, breaks (locations for the ticks), labels
 (labels for the breaks), and trans (e.g., trans="log").
 3
   This is an alternative to using name (e.g., name="myxlab") as an argument to
 scale_x_continuous() or scale_x_discrete().
 4
   This is an alternative to using trans="log10" as an argument to
 scale_x_continuous() or scale_x_discrete(). Note also trans="log"
 and trans="log2").
 5
   Facets give Lattice style conditioning.
 6
   By default (ratio=1), a given distance, e.g., 1cm, represents the same range
 along both x− and y−axes.
 7
   Themes control such graphical attributes as background color, gridlines, and size
 and color of fonts. See help(ggtheme) for details of other available themes.
                                                f                                               m
                                                                                                                                    Figure 7.17: Height versus weight,
                                                                                                    ●                     ●
                                                                                                                                    by sex, for Australian athletes in the
                                                                                                          ●
                                                                                                                                    ais data set. Boxplots that show the
              200                                                                                       ●
                                                                                                          ● ●
                                                                                                                                    distributions of heights, and two-
                                      ●         ●                                                      ● ●
                                      ●                  ●
                                                                                             ●●
                                                                                                  ●  ●●● ●● ●                       dimensional density contours have
                                                                                                 ●●●● ●
                                                                                                   ●      ●
                                                                                              ●
                                                                                             ● ● ●●●   ●    ●
Height (cm)
                                             ●●                                                                               ●
                                              ● ●●
                                                                                                ● ●●●●● ●
                                                                                          ● ●●●● ● ●
                                                                                          ●
                                                                                                        ●
                                                                                                     ● ● ●●
                                                                                                                                    been added.
                                     ●        ● ●                                              ●              ●       ●
                                       ●
                                       ● ●                                                ●●● ●●● ●●     ●●
                                       ●         ●                                         ●       ●
                                            ● ●
              180                   ●●●●●●●●●●● ● ●●                                   ●●● ●●●●             ●
                                   ●    ●        ●                                   ● ● ●● ●● ●                  ●
                                 ● ●●●   ●●●
                                                                                     ● ● ●
                               ● ● ● ●
                                     ●   ●
                                             ●
                                          ●● ●
                                             ●
                                              ●
                                              ●    ● ●
                                                                                    ● ● ●●● ●●
                             ●     ●    ●●    ●    ●                                   ●
                                    ●
                           ● ● ●● ●●● ● ●●               ●
                                                                                  ●     ●
                                ●●● ●
                             ● ● ●         ●
                                                                                    ●
                          ●          ●
                                ●●                                            ●
                            ●●    ●
                              ●●
              160          ●          ●
                         ●● ●         ●
                                      ●
                     ●   ●            ●
                             50            75            100     125         50            75             100                 125
                                                               Weight (kg)

                                                 graphics – base, lattice, ggplot2, rgl, googlevis. . .                                       135
To set axis labels, show the boxplot outline in gray, show contour
lines in gray (the default is blue), and make various other changes as
in Figure 7.17, specify:
quickplot (wt , ht , xlab=" Weight (kg)",
           ylab=" Height (cm)", data=ais ,
           facets = . ~ sex) +
  geom_boxplot (aes(group=sex),
                 outlier.size =1.75 ,
                 outlier.colour ="gray",
                 color="gray") +
  geom_point (shape =2, size =1) +
  geom_density2d (color="gray")
   The facets argument has the form row.var ~ col.var,
where row.var indexes rows of panels, col.var indexes columns,
and “.” serves as a placeholder when there is one row or one column              200
                                                                                                                            ●
only.                                                                                                                ●
                                                                                                                     ●
                                                                                                                                ●   sport
                                                                                 190                               ●
   Code for the next plot will work with a subset of the ais data,                                            ●●
                                                                                                               ●
                                                                                                                   ● ●●●
                                                                                                                    ●
                                                                                                                    ●●●
                                                                                                                                     ●    Row
                                                                                                     ●                                    Swim
                                                                                                          ● ●●
limiting attention to rowers and swimmers:                                  ht
                                                                                 180                 ●
                                                                                                      ●●● ●
                                                                                                        ●●
                                                                                                           ● ●
                                                                                                               ●
                                                                                                                   ●
                                                                                                           ●●
                                                                                                       ●
                                                                                 170
                                                                                                                                    sex
## Extract from ais data for rowers and swimmers                                                                                     ●
                                                                                            ●                                             f
aisRS <- subset (ais , sport %in% c("Row","Swim"))                               160                                                 ●    m
aisRS $ sport <- droplevels (aisRS$sport)                                              ●
                                                                                       50       60     70     80       90
                                                                                                         wt
    Here are alternative code fragments that can be used to create
                                                                            Figure 7.18: Use color for distin-
Figure 7.18, one using quickplot() and the other using successive
                                                                            guishing sexes, shapes for sports.
calls to ggplot() and to geom_point():
1: Use quickplot():                        2: ggplot() + geom_point():
quickplot (wt , ht ,                       ggplot (aisRS) +
           data=aisRS ,                      geom_point (aes(wt , ht ,
           geom="point",                                    color=sex ,
           size=I(2),                                       shape=sport),
           colour =sex ,                                 size =2)
           shape=sport)
   Multiple aesthetics can be used for the one distinction, here be-
tween sexes:
## Distinguish sex by color & shape
## Different sports have different panels
quickplot (wt , ht , data=aisRS , geom="point",
           size=I(2.5), color=sex , shape=sex ,
           facets = . ~ sport)
   Here are further possibilities:
## Identify sex by color , sport by shape (1 panel)
quickplot (wt , ht , data=aisRS , geom="point",
            color=sex , shape=sport , size=I(2.5))
## Identify sex by color , sport by size (1 panel)
quickplot (wt , ht , data=aisRS , geom="point",
           color=sex , size=sport)

136                         learning and exploring r
Australian rain data
Figure 7.19 plots annual rainfall for Australia’s Murray-Darling
basin region. The following code uses the function quickplot():
library (DAAG)                                                                                                                                                                                                            Arguments size (e.g.,
library ( ggplot2 )                                                                                                                                                                                                       size=I(2.5)), color (e.g.,
## Default loess smooth , with SE bands added.                                                                                                                                                                            color=I("red"), etc, can be
quickplot (Year , mdbRain , data= bomregions2015 ,                                                                                                                                                                        supplied, affecting both points
            geom=c("point"," smooth "), xlab="",                                                                                                                                                                          and the added smooth curve. NB:
            ylab="Av. rainfall , M-D basin")                                                                                                                                                                              size=I(2.5), not size=2.5.
                                                                                                                                                                                                             ●
                                                                                                                                                                                                                          Figure 7.19: Annual rainfall, from
                          800                                                                                                ●
                                                                                                                   ●                                                                                                      1901 to 2012, for the Murray-Darling
                                                                                                                                                                                                                          basin region of Australia. The curve is
Av. rainfall, M−D basin
                                                                                                                                                    ●
                                                                                                                                                     ●
                                                                                                                                                                                                                          fitted using the default loess smoother.
                                                           ●                                                                 ●                               ●
                                                                                                                                                                     ●                                                    The pointwise standard error bands
                                          ●                        ●
                          600                             ●
                                                                                                             ●
                                                                                                                                                                                                                 ●        assume that errors about the curve
                                                                                                                                                                              ●                ●●
                                                                                      ●                                                                               ●               ●
                                                                  ●       ●
                                                                                                 ●                                   ●                  ●●                                 ●
                                                                                                                                                                                                 ●                        are independent; this is unlikely to be
                                      ●                                                                                ●●                                                                 ●
                                                 ●●                                                                                  ●          ●                                ●●
                                                                                          ●●
                                                                                             ●       ●           ●                            ●
                                                                                                                                             ●●
                                                                                                                                                                 ●                    ●
                                                                                                                                                                                                                 ●
                                                                                                                                                                                                                          strictly true. To suppress these bands,
                                              ●                                                                                  ●● ●
                                         ●                                  ●
                                                                                  ●                                                ● ●
                                                                                                                                                                         ●
                                                                                                                                                                             ●                         ● ●                specify se=FALSE.
                                          ● ●●                                                       ●                                                                                        ●       ●● ●
                                                      ●                    ● ●                                 ●
                                                                                                                                         ●                                        ●                                   ●
                                 ●                                                                                       ●                                                ●                                          ●
                                                                                      ●                                                                  ●                                        ●          ●
                          400                     ●                    ●
                                                                                                          ●          ●
                                  ●                   ●       ●                              ●           ● ●                                                 ●
                                                                                                                                                                                                                     ●
                                                                                                                                                              ●
                                                                              ●            ● ●                                                   ●
                                                          ●                       ●
                                                                      ●                                                                                                                   ●
                                                               ●                                                                 ●       ●
                                                                                                 ●                                           ●                                                       ●   ●
                                                                                                         ●                                                        ●
                                     ●
                                1900                                  1925                                   1950                                1975                                         2000
                          Code that shows the detailed syntactic steps is:
ggplot ( bomregions2015 , aes(x=Year , y= mdbRain )) +
  geom_point () +                          # Scatterplot
  geom_smooth (span =0.5 , se=TRUE) +      # Add smooth
  xlab("") +                # Blank out x-axis label
  ylab("Av. rainfall , M-D basin")
## NB: aes () has supplied x- and y-axis variables
As before, the successive “+” operators combine output from func-
tion calls to create a single graphics object.
    Try also the following. This requires both the quantreg package
and the splines package:
                                                                                                                                                                                                                          The normal spline basis ns(x,5) is
library ( quantreg )
                                                                                                                                                                                                                          supplied to the function that estimates
library ( splines )
                                                                                                                                                                                                                          the quantile curves, so that 5 d.f.
## Supplementary figure 4
                                                                                                                                                                                                                          spline curves are fitted at the 20%,
quickplot (Year , mdbRain , data= bomregions2015 ) +
                                                                                                                                                                                                                          50% and 80% quantiles.
            geom_quantile ( formula = y ~ ns(x,5),
            quantiles =c(0.2 ,0.5 ,0.8) )
Florence Nightingale’s Wedge Plot                                                                                                                                                                                         Florence Nightingale’s Crimean War
                                                                                                                                                                                                                          experience prepared her for later
Figure C.2 in Appendix C is a “wedge” plot, showing the mortality                                                                                                                                                         major work in the reform of army and
of British troops according to cause in the Crimean war over 1854–                                                                                                                                                        civilian hospitals and public health
                                                                                                                                                                                                                          administration, and to wider social
1856. It shows the abilities of the ggplot2 package to spectacular
                                                                                                                                                                                                                          reform. Her influence extended to the
                                                                                                                                                                                                                          army and civilian administration in
                                                                                                                                                                                                                          India.

                                                  graphics – base, lattice, ggplot2, rgl, googlevis. . . 137
effect. The plot is obtained by using polar coordinates for plotting a
stacked bar chart! Use of areas to convey numerical information is
however not ideal, especially when as here the areas overlap.
7.4      Static graphics – additional notes
7.4.1     Multiple graphs on a single graphics page
For base graphics, refer back to Subsection 7.1.5. The following
demonstrates use of the fig argument to par() to select a part of
the display region for plotting:
par(fig = c(0, 1, 0.38 , 1))
              # xleft , xright , ylow , yhigh
## Plot graph A
par(fig = c(0, 1, 0, 0.38), new=TRUE)
## Plot graph B
par(fig = c(0, 1, 0, 1))              # Resets to default
For lattice graphs, the location of the graph can be determined by
the argument position, when print() is called. The following
demonstrates its use:
cuckoos.strip <- stripplot ( species ~ length , xlab="", data= cuckoos )
print ( cuckoos.strip , position =c(0,0.5 ,1 ,1))
                         # xleft , ybottom , xright , ytop
cuckoos.bw <- bwplot ( species ~ length , xlab="", data= cuckoos )
print ( cuckoos.bw , position =c(0,0,1,0.5), newpage =FALSE)
Note the use of newpage=FALSE for the second plot.
Base and trellis plots on the same graphics page
The following uses the base graphics command mtext() to label a
lattice plot:
plot (0:1 , 0:1, type="n", bty="n", axes=FALSE ,
       xlab="", ylab="")
lab <- " Lattice bwplot (i.e. , boxplot )"
mtext (side =3, line =3, lab)
cuckoos.bw <- bwplot ( species ~length , data= cuckoos )
print ( cuckoos.bw , newpage =FALSE)
Inclusion of graphs in Microsoft Word
Graphs may not import well from the clipboard into Word on the
Macintosh under OS X. On Windows systems, an effective option
is to use win.metafile() to write graphics output to a Windows
metafile format that should import without problem into a Word or
Power Point document.

138    learning and exploring r
7.5      Dynamic Graphics – rgl
This section will describe a range of abilities that create dis-
plays which the user can then manipulate dynamically. Note
in particular the rgl and googleVis packages, designed for in-
teractive exploration of dynamic changes in relationships with
time. The googleVis package reproduces most of the abilities
of Google’s Public Data Explorer, which can be accessed at
http://www.google.com/publicdata/home
                                                                      Figure 7.20: Snapshot of a 3-D dy-
                                                                      namic display, for the nihills data
                                                                      from the DAAG package. The display
                                                                      has been dragged to a position where
                     log(climb)
                                                                      points very nearly fall on a line.
                                       log(dist)
                log(time)
    The rgl package provides three-dimensional dynamic graphics.
Use of the functions scatter3d() and identify3d() from the car
package may be more convenient for novices than the rgl functions
that they call. Figure 7.20 shows a snapshot of the plot obtained for
the nihills data from the DAAG package.
The following loads the needed packages:
## The car and rgl packages must be installed
library (rgl , quietly =TRUE)
library (car , quietly =TRUE)
rgl :: setupKnitr ()
knit_hooks $set(rgl= hook_rgl )
    Code for the figure is:
library (DAAG , quietly =TRUE)
open3d ()                     # Precedes the call to par3d ()
par3d (cex =0 .75)            # Optional
                              # Other params : see help(par3d)
with(nihills , scatter3d (x=log(dist), y=log(climb),
                                  z=log(time),
                                  grid=FALSE ,
                                  surface =FALSE ,
                                  point.col ="black",
                                  axis.scales =FALSE ))
## NB: Use middle or right mouse button to drag a
## rectangle around a point that is to be labeled.

                                                   graphics – base, lattice, ggplot2, rgl, googlevis. . .         139
    Use the function identify3d() to start the identification of              Use rgl.snapshot() to save the
points. Following the call to identify3d(), use the middle (or                current plot into a file.
maybe right) mouse button to drag a rectangle around any point that
is to be labeled. To cease identifying points, make a middle (or right)
click on an empty region of the plot. The labels may appear only at
this point. Here, for identification of points shown in Figure 7.20, is
suitable code:
with(nihills , identify3d (x=log(dist), y=log(climb),
                                 z=log(time),
                                  labels = row.names ( nihills ),
                                  col="gray"))
    Such a plot can be helpful in identifying high leverage
points, e.g., in the regression of log(time) on log(dist) and
log(climb). The plot needs to be rotated to give a view in which
the leverage is apparent.
The rggobi package
The rggobi package offers a wider range of features, via an interface
to the GGobi system. For installation details go to http://www.
ggobi.org/. Windows users can use the following to install all
the required files from an R session that has access to a live internet
connection:
source ("http:// www.ggobi.org / downloads / install.r ")
7.5.1     The googleVis Package
This provides an interface to the abilities of Google’s Public Data
Explorer. While these abilities can be accessed from the web page
noted below, there are obvious advantages in setting up the display
from one’s own computer.14                                                    14
                                                                                 An internet connection is needed
                                                                              to access Google’s API (Application
                                                                              Program Interface) when the chart is
Google’s Public Data Explorer                                                 displayed.
Upon accessing Google’s web page http://www.google.com/
publicdata/home, the display will cycle through examples
of the use of Motion Charts, and other related charts. Click on
Explore Data to go to the interactive version of the relevant dis-
play.15 These charts, which are interesting in themselves, show the           15
                                                                                 Various controls are placed in
abilities that googleVis is designed to emulate. See the annotations in       the margins of the graph. Move the
                                                                              pointer over one or other control
Figure C.1 below for details that should be enough to get started.
                                                                              feature to get information on its
    A slider below the graph can be moved to show how the relation-           purpose, or over a point to display
ships that are plotted change over the available timespan, commonly           information about that point. For
1960 through to 2010 (but note that not all data will be available for        changing the x- and/or y- variables,
all years). Click on the solid right-pointing triangle on the left of the     or for changing the variable that
slider scale to see the graph changing dynamically in moving from             determines point size, click on the
                                                                              relevant downward pointing selector
the currently shown year through to 2010.                                     arrow. Scales, separately for the
                                                                              two axes, can be either linear or
                                                                              logarithmic.

140    learning and exploring r
Use of googleVis to create motion charts
The details given here should be supplemented with examination
of the vignette that accompanies the googleVis package. Note espe-      To display the vignette, type:
cially Figure 1 on page 5 of the vignette.                              vignette("googleVis")
    Creation of a motion chart, once the data is in place, is remark-
ably straightforward. The starting point is a data frame in that has
a column (e.g. Countries) that can be used as an id variable, a col-
umn (e.g. Year) that has a timevar variable, and columns that can
be used to supply x- and y- variables. Optionally, columns may be
identified for use as a colorvar and/or a sizevar.
    The dataset grog from the DAAG package has a
suitable structure. One can create a motion chart thus:
library ( googleVis )
M <- gvisMotionChart (grog , id=" Country ", timevar ="Year")
## This next line requires a live internet connection ,
## and Adobe Flash must be installed.
plot(M)
If the browser window that appears displays ’Flash’ in gray in the
middle of the screen, click there to proceed. A browser window with
a gray display region should appear.
    For the grog dataset, the Motion Chart does a less satisfactory
job than Figure 7.10 in Section 7.2.4. Motion charts come into their
own for the examination of steady changes over time in a bivari-
ate relationship, with different patterns of relationship for different
subgroups of the data.
    A plot that allows the display of various World Bank develop-
ment indicators can be obtained by typing:                              The code used to download the data
                                                                        and display the motion chart will
demo( WorldBank )
                                                                        appear on your screen.
This can take a while to start up – data has to be downloaded from
the World Bank web site. Hover the mouse pointer over features that
appear in the margins of the display to see annotation that indicates
how you can change or manipulate various aspects of the display.
    The data from the World Bank site is stored into a data frame
WorldBank. The command that creates a gvis object M is:16               16
                                                                           Both WorldBank and M should
                                                                        be in your workspace after running
M <- gvisMotionChart (WorldBank , idvar=" country ",
                                                                        demo(WorldBank). The data are also
             timevar ="year",
                                                                        alternatively available from the image
             xvar=" life.expectancy ",
                                                                        file WorldBank.RData at the url
             yvar=" fertility.rate ",
                                                                        noted on the reverse of the title page.
             colorvar =" region ", sizevar =" population ",
             options =list(width =700 , height =600))
## Now display the motion chart
plot(M)
Change width and height as needed to make better use of the
screen display.
    If arguments are supplied, security setting issues on the user
computer can result in an initial assignment of columns that does not
accord with the supplied arguments.17 The drop-down menus should        17
                                                                           The gvis object M comprises
                                                                        Javascript code that can be included
                                                                        on a web page. This should display
                                                                        correctly when the web page is ac-
                                                                        cessed.

                                                     graphics – base, lattice, ggplot2, rgl, googlevis. . . 141
 however function correctly, and can be used to obtain a display that
 accords with any choice of arguments that the user may want.
     For a further example, load the image file wdiSel.RData, avail-
 able from the url noted on the reverse of the title page. This will
 make available the data frame wdiSel. This has a larger number of
 indicators, but for 26 countries only. Figure C.1 (with the figures that
 are shown in color) shows an annotated version of a motion chart
 that was created from this dataset.
     The following code generated the initial chart. The change to a
 log scale on the vertical axis was made interactively:
 xnam <- " Electric power consumption (kWh per capita )"
 ynam <- " Mobile cellular subscriptions (per 100 people )"
 M <- gvisMotionChart (wdiSel , idvar=" Country.Name ", timevar ="Year",
                             xvar=xnam , yvar=ynam ,
                              colorvar =" region ", sizevar ="Population , total",
                              options =list(width =600 , height =500) ,
                              chartid =" wbMotionChartSel ")
 plot(M)
 7.6      Summary
   Base graphics functions plot a graph. Lattice and ggplot2 func-
   tions return a graphics object. which can then stored or updated or
   plotted (printed).
   A powerful feature, both of ggplot2 graphics and of lattice graph-
   ics when the layering abilities of the latticeExtra package is used,
   is the ability to build a graph up layer by layer.
   The R system makes available, via its various package, a wide
   variety of other graphics abilities. This includes dynamic and
   other 3-dimensional graphics.
 7.7      Exercises
 In the following exercises, if there is no indication of whether to use
 base or lattice graphics, use whichever seems most suitable.
1. Exercise 3 in Section 2.6.2 showed how to create the data frame
   molclock. Plot AvRate against Myr. Use abbreviate() to
   create abbreviated versions of the row names, and use these to
   label the points.
2. Compare the following graphs that show the distribution of head
   lengths (hdlngth) in the possum data set. What are the advan-
   tages and disadvantages of these different forms of display?
      a) a histogram (hist(possum$hdlngth));
      b) a stem and leaf plot (stem(qqnorm(possum$hdlngth));

 142   learning and exploring r
      c) a normal probability plot (qqnorm(possum$hdlngth)); and
      d) a density plot (plot(density(possum$hdlngth)).
3. This exercise uses the data set hotspots (DAAG package).
   Plot age against distance. Use identify() to determine which
   years correspond to the two highest mean levels. That is, type
   plot(age ~ distance , data= hotspots )
   with(hotspots , identify (age ~ distance , labels =name ))
   Use the left mouse button to click on the highest two points on the
   plot. (Right click in the figure region to terminate labeling.)
4. Use mfrow() to set up the layout for a 3 by 4 array of plots. In
   the top 4 rows, show normal probability plots for four separate
   ‘random’ samples of size 10, all from a normal distribution. In the
   middle 4 rows, display plots for samples of size 100. In the bot-
   tom four rows, display plots for samples of size 1000. Comment
   on how the appearance of the plots changes as the sample size
   changes.
5. The function runif() can be used to generate a sample from a
   uniform distribution, by default on the interval 0 to 1. Print out the
   numbers you get from x <- runif(10). Then repeat exercise 6
   above, but taking samples from a uniform distribution rather than
   from a normal distribution. What shape do the points follow?
6. The data frame airquality that is in the base package has
   columns Ozone, Solar.R, Wind, Temp, Month and Day. Plot
   Ozone against Solar.R for each of three temperature ranges, and
   each of three wind ranges.
7. Create a version of the data frame Pima.tr2 that has anymiss as
   an additional column:
   missIND <- complete.cases ( Pima.tr2 )
   Pima.tr2 $ anymiss <- c("miss"," nomiss ")[ missIND +1]
 (a) Use strip plots to compare values of the various measures for
      the levels of anymiss, for each of the levels of type. Are there
      any columns where the distribution of differences seems shifted
      for the rows that have one or more missing values, relative to
      rows where there are no missing values?
      Hint: The following indicates how this might be done effi-
      ciently:
      library ( lattice )
      stripplot ( anymiss ~ npreg + glu | type , data=Pima.tr2 , outer=TRUE ,
                    scales =list( relation ="free"), xlab=" Measure ")
 (b) Density plots are in general better than strip plots for compar-
      ing the distributions. Try the following, first with the variable

                                           graphics – base, lattice, ggplot2, rgl, googlevis. . . 143
npreg as shown, and then with each of the other columns ex-
cept type. Note that for skin, the comparison makes sense
only for type=="No". Why?
## Exercise 7b
library ( lattice )
## npreg & glu side by side (add other variables , as convenient )
densityplot ( ~ npreg + glu | type , groups =anymiss , data=Pima.tr2 ,
              auto.key =list( columns =2), scales =list( relation ="free"))

144 learning and exploring r
8
Regression with Linear Terms and Factors

146    learning and exploring r
     Linear Models, in the style of lm():
      Linear model Any model that lm() will fit is a “linear” model.
                        lm() can fit highly non-linear forms of response!
      Diagnostic        Use plot() with the model object as argument,
      plots             to get a basic set of diagnostic plots.
      termplot()        If there are no interaction terms, use termplot()
                        to visualize the contributions of the different terms.
      Factors           In model formulae, factors model qualitative effects.
      Model             The model matrix shows how coefficients should be
      matrices          interpreted. (This is an especial issue for factors.)
      GLMs              Generalized Linear Models are an extension of
                        linear models, commonly used for analyzing counts.
      Modern            This can use smoothers – spline and other functions
      regession         of explanatory variables that adapt to suit the data.
      GAMs              Generalized Additive Models extend linear models
                        to allow smoothing curves and surfaces.
     [NB: lm() assumes independently & identically distributed (iid)
     errors, perhaps after applying a weighting function.]
    In this chapter, the chief focus will be on the lm() (linear model)
function, discussed earlier in Section 3.4. The lm() function is the
most widely used of a huge range of model fitting abilities, available
in the various R packages.
    Linear models are linear in the model parameters, not necessarily          Thus spline fits are formed as a linear
in the variables. A linear model can perfectly well fit a combination          combination from a kitset of curves.
of basis curves.
8.1      Linear Models in R – Basic Ideas
Here, we fit a straight line, which is very obviously a linear model!
This simple starting point gives little hint of the range of models that
can be fitted using R’s linear model lm() function.
    The lm() function returns, as well as estimates, standard errors
for parameters and for predictions. The standard error and p-value
information provided by the lm() function assumes that the random
term is i.i.d. (independently and identically distributed) normal. The
independence assumption can be crucial.
    The standard errors assume, also, that the analysis is based on a          1
                                                                                 The standard errors become in-
model was chosen in advance.1 If this is not the case, it can be im-           creasingly unrealistic as the number
portant to resort to the use of empirical methods for assessing model          of possible choices of model terms
                                                                               (variables, factors and interactions)
performance – training/test methodology, or cross-validation,or the            increases.
bootstrap.
    The symbolic notation2 that is available in R for describing lin-          2
                                                                                 Wilkinson, GN and Rogers, CE,
                                                                               1973. Symbolic description of models
                                                                               in analysis of variance, Applied
                                                                               Statistics 22: 392-399.

                                                                     regression with linear terms and factors                                      147
ear models makes it straightforward to set up quite elaborate and
intricate models.
                                                                                                        30                                    ●
Scatterplot with fitted line – an example
                                                                                                        25                                          ●
                                                                                                                                  ●
The following plots data from the data frame roller (as in Figure
                                                                                           depression
                                                                                                        20                   ● ●
8.1) from the DAAG package.                                                                             15
library (DAAG)                                                                                          10                            ●
plot( depression ~ weight , data=roller , fg="gray")
                                                                                                         5       ●       ●
    The formula depression ~ weight can be used either as a                                              0
                                                                                                             ●
                                                                                                                 ●
graphics formula or as a model formula. The following fits a straight                                        2       4        6           8   10   12
line, then adding it to the above plot:                                                                                        weight
plot( depression ~ weight , data=roller , fg="gray")                                  Figure 8.1: Plot of depression
roller.lm <- lm( depression ~ weight , data= roller )                                 versus weight, using data from the
# For a line through the origin , specify                                             data frame roller in the DAAG
# depression ~ 0 + weight                                                             package.
abline ( roller.lm )
                                                                                                        30                                    ●
Figure 8.2 repeats the plot, now with a fitted line added.
                                                                                                                                                    ●
     The different explanatory variables in the model are called                                        25
                                                                                                                                  ●
                                                                                           depression
terms. In the above, there is one explicit term only on the right,                                      20                   ● ●
i.e., weight. This is in addition to the intercept, which is included                                   15
by default.                                                                                             10                            ●
                                                                                                         5       ●       ●
                                                                                                             ●
8.1.1     Straight line regression – algebraic details                                                   0
                                                                                                                 ●
                                                                                                             2       4        6           8   10   12
The standard form of simple straight line model can be written                                                                 weight
                depression = α + β × weight + noise.                                  Figure 8.2: This repeats Figure 8.1,
Now write y in place of depression and x in place of weight, and                      now adding a fitted line.
add subscripts, so that the observations are: (x1 , y1 ), (x2 , y2 ), . . . ,( xn ,
yn ). Then the model can be written:
                            yi = α + βxi + εi .
The α + βxi term is the “fixed” component of the model, and εi is
the random noise.
     The line is chosen so that the sum of squares of residuals is as
small as possible, i.e., the intercept α and the slope β chosen to mini-
mize
                            Xn
                                (yi − α − βi xi )2
                              i=1
     The R function lm() will provide estimates a of α and b of β.
The straight line
                               y = a + bx
                               b
can then be added to the scatterplot.
     Fitted or predicted values, calculated so that they lie on the esti-
mated line, are obtained using the formula:
                    y1 = a + bx1 , b
                    b               y2 = a + bx2 , . . . .
The residuals, which are the differences between the observed and
fitted values, give information about the noise.
                     e1 = y1 −by1 , e2 = y2 −by2 , . . . .           (8.1)

148    learning and exploring r
8.1.2     Syntax – model, graphics and table formulae:
The syntax for lm() models that will be demonstrated here is used,
with modification, throughout the modeling functions in R. A very
similar syntax can be used for specifying graphs and for certain
types of tables.
Model objects
                                                                       Components of model objects can
The following code returns a model object to the command line.         be accessed directly, as list objects.
                                                                       But it is usually better to use an
lm( depression ~ weight , data= roller )                               extractor function. Note in particular
                                                                       residuals() (can be abbreviated
                                                                       to resid()), coefficients()
                                                                       (coef()), and fitted.values()
Call:                                                                  (fitted()). For example:
lm( formula = depression ∼ weight , data = roller )                      coef(roller.lm)
Coefficients :
( Intercept )           weight
         -2.09            2.67
When returned to the command line in this way, a printed summary
is returned.
    Alternatively, the result can be saved as a named object, which is
a form of list.
roller.lm <- lm( depression ~ weight , data= roller )
    The names of the list elements are:
names ( roller.lm )
  [1] " coefficients " " residuals "             " effects "
"rank"
  [5] " fitted . values " " assign "             "qr"
"df. residual "
  [9] " xlevels "           "call"               "terms"
" model "
8.1.3     Matrix algebra – straight line regression example
In order to write the quantity
                           X 10
                                (yi − a − bxi )2
                            i=1
that is to be minimized in matrix form, set:

                                                                                                                                                                                                regression with linear terms and factors                                       149
                                     1 1.9                                                                      2                                                                                2 − (a + 1.9b)
                                                                                                                                                                                                             
                                                                                                                                                                                                   
           
                                  1 3.1    
                                                
                                                                                      
                                                                                                             1    
                                                                                                                       
                                                                                                                                                                     
                                                                                                                                                                                              1 − (a + 3.1b)     
                                                                                                                                                                                                                      
               
                                  1 3.3        
                                                    
                                                                                          
                                                                                                             5        
                                                                                                                           
                                                                                                                                                                         
                                                                                                                                                                                              5 − (a + 3.3b)         
                                                                                                                                                                                                                          
                                  1 4.8                                                                5                                                                          5 − (a + 4.8b)                                                         !
                                     1 5.3                                                                      20                                                                              20 − (a + 5.3b)                                                         a
                                                                                                                                                                                                               
 X =                                                 
                                                             ;           y =                                             
                                                                                                                                    ;          e = y − Xb =                                                                               where b =
                                  1 6.1                                                                20                                                                        20 − (a + 6.1b)                   
                                                                                                                                                                                                                                                                     b
                         
                                  1 6.4                                                       
                                                                                                             23                                                              
                                                                                                                                                                                             23 − (a + 6.4b)                       
                                     1 7.6                                                                      10                                                                              10 − (a + 7.6b)
                                                                                                                                                                                                                         
                                                                                                                                                                                                                                    
                                                                                                                                                                                                30 − (a + 9.8b)
                                                                                                                                                                                   
                                  1 9.8                            
                                                                                                           30                           
                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                              
                                     1 12.4                                                                     25                                                                             25 − (a + 12.4b)
     Here a and b are chosen to minimize the sum of squares of ele-
 ments of e = y − Xb, i.e., to minimize
                                                                           e0 e = (y − Xb)0 (y − Xb)
 The least squares equations can be solved using matrix arithmetic.
 Recap, and Next Steps in Linear Modeling
 For this very simple model, the model matrix had two columns only.
 Omission of the intercept term will give an even simpler model
 matrix, with just one column.
     Regression calculations in which there are several explanatory
 variables are handled in the obvious way, by adding further columns
 as necessary to the model matrix. This is however just the start to the
 rich range of possibilities that model matrices open up.
 8.1.4                                A note on the least squares methodology
 More fundamental than least squares is the maximum likelihood                                                                                                                                                  The assumptions of independence and
 principle. If the “error” terms are independently and identically                                                                                                                                              identical distribution (iid) are crucial.
 normally distributed, then least squares and maximum likelihood are                                                                                                                                            The role of normality is commonly
 equivalent.                                                                                                                                                                                                    over-stated.
     Least squares will not in general yield maximum likelihood
 estimates, and the SEs returned by lm() or by predict() from an
 lm model will be problematic or wrong if:
• Variances are not homogeneous3 ;                                                                                                                                                                              3
                                                                                                                                                                                                                                               Weighted least squares is however
                                                                                                                                                                                                                justified by maximum likelihood if it
• Observations are not independent;                                                                                                                                                                             is known how the variances change
                                                                                                                                                                                                                with xi , or if the pattern of change
• The sampling distributions of parameter estimates are noticeably                                                                                                                                              can be inferred with some reasonable
    non-normal.                                                                                                                                                                                                 confidence.
• Model terms (variables, factors and/or interactions) have been                                                                                                                                                Simplifying the model, in ways
    chosen from some wider set of possibilities (the theory assumes a                                                                                                                                           that do not much affect coefficients
    specfic known model).                                                                                                                                                                                       that remain in the model, may be
                                                                                                                                                                                                                acceptable.
     Normality of the model ’errors’ is more than is in practice re-
 quired. Outliers, and skewness in the distribution, do often mean that
 the theory cannot be satisfactorily used as a good approxation.

150                learning and exploring r
8.2                  Checks — Before and After Fitting a Line
Consider here a female versus male comparison of record times for
Northern Island hill races.
                   A: Untransformed scales                                                                        B: Logarithmic scales                                 Figure 8.3: Graphs compare female
               6                                                       ●                                                                                            ●   with male record times, for Northern
                                                                                                            5.0
                                                                                                                                                                        Ireland hill races. Least squares lines
                                                                                 Female times (log scale)
               5
                                                                                                                                                                        are added, and marginal boxplots are
                                                                                                                                                                        shown on the horizontal axis. Panel
Female times
                                                                                                                                                                ●
               4
                                                                                                            2.0                                         ●
                                                                                                                                                                        A has untransformed scales, while
               3                                                                                                                                                        Panel B has log transformed scales.
                                                                                                                                               ●●
                                              ●                                                                                            ●                            For the code, see the script file for this
                                                                                                            1.0                        ●
               2                        ●                                                                                            ●●
                                                                                                                                      ●
                                                                                                                                                                        chapter.
                                                                                                                                     ●
                                                                                                                                 ●
                                                                                                                              ● ●
                                  ●●                                                                                         ●● ●●
                                                                                                                              ●
                                 ●                                                                                           ●●●
               1             ●
                            ●●
                          ●●●                                                                               0.5
                        ●●
                        ●
                        ●
                        ● ●
                    ●                                                                                                 ●
                                       ●      ●                            ●                                                                        ●       ●       ●
                                              time                                                                                         time
                    0.5      1.0       1.5    2.0    2.5   3.0   3.5       4.0                                         0.5             1.0                  2.0
                                           Male times                                                                     Male times (log scale)
Untransformed vs transformed scales: Figure 8.3 shows two alter-
native views of the data. Least squares line have in each case been
added.
    In Panel A, a single data point at the top right lies well away
from the main body of data. In Panel B, points are more evenly
spread out, though still with a tail out to long times.
    The following fits a regression line on the untransformed scale:
mftime.lm <- lm(timef ~ time , data= nihills )
    The line appears to fit the data quite reasonably well. Is this an
effective way to represent the relationship? An obvious problem is
that data values become increasingly sparse as values increase, with
one point widely separated from other data. That one data point,
widely separated from other points, stands to have a disproportionate
effect in determining the fitted line.
    The coefficients for the line that is fitted on a logarithmic scale
is:
mflogtime.lm <- lm(log(timef) ~ log(time),
                     data= nihills )
round (coef( mflogtime.lm ), 3)
( Intercept )                                 log(time)
       0.267                                      1.042
The coefficient of 1.042 for log(time) implies that the relative rate
of increase of female times is 4.2% greater than the relative rate of
increase of male times.

                                                                                                                                      regression with linear terms and factors            151
The use of residuals for checking the fitted line:
In Figure 8.3, departures from the line do not stand out well rela-
tive to the line. To make residuals stand out, Figures 8.4A and 8.4B
rotate the lines, for the untransformed and transformed data respec-
tively, ∼45◦ clockwise about its mid-point, to the horizontal.
                                                                                                                                                     Figure 8.4: In Panel A, residuals from
                               A: Residuals, unlogged data                                         B: Residuals, logged data
                                                                 ●                                                                              ●
                                                                                                                                                     the line for the unlogged data have
                         0.2                                                                0.10          ●
                                                                     resid(mflogtime.lm)
                                                                                                                                                     been plotted against male times. Panel
     resid(mftime.lm)
                                                                                                       ●
                                                                                                                  ●
                         0.1     ●
                                 ●
                                 ●
                                ●●
                                   ●                                                        0.05
                                                                                                        ●
                                                                                                       ●●                         ●                  B repeats the same type of plot, now
                                 ●●
                         0.0     ●●●
                                  ●
                                  ●●       ●                                                       ●
                                                                                                                      ●                              for the regression for the logged data.
                                   ●                                                        0.00          ● ●●
                                    ● ●●                                                                              ●
                        −0.1                                                                               ●                  ●
                                                                                                          ●
                                                                                                                          ●
                                                                                           −0.05                                      ●
                        −0.2           ●
                                                                                                              ●
                                                                                                                  ●
                        −0.3                                                               −0.10                  ●
                                                 ●                                                                            ●
                                0.5        1.5       2.5   3.5                                     −1.0                   0.0     0.5     1.0
                                                 time                                                                 log(time)
Notice that, in Figure 8.4A, all residuals except that for the largest
time lie very nearly on a line. The point with the largest fitted value,
with the largest male (and female) time, is pulling the line out of
whack. There is a mismatch between the data and the model. The
picture in Figure 8.4B is much improved, though there still is an
issue with the point for the longest time.
    Residuals on the vertical scale of Figure 8.4B are on a scale                                                                                    A residual of -0.1 denotes a time that
of natural logarithms (logarithms to base e). As the range is small                                                                                  is about 10% (more accurately 9.5%)
                                                                                                                                                     less than the fitted value on the line. A
(roughly between -0.1 and 0.1), the values can be interpreted as
                                                                                                                                                     residual of 0.1 denotes a time that is
relative differences on the scale of times.                                                                                                          about 10% (more accurately 10.5%)
                                                                                                                                                     more than the fitted value.
The common benefits of a logarithmic transformation: Where
measurement data have a long tail out to the right, it commonly
makes sense to work with logarithms of data values, as in Figure
8.3B. Often, working with data on a logarithmic scale has several
useful consequences:
- The skewness is reduced
- The variation at the high end of the range of values is reduced,
  relative to variation at the low end of the range of values.
- Working on a logarithmic scale is equivalent to working with
  relative, rather than absolute, change. Thus a change from 10 to
  20 is equivalent to a change from 20 to 40, or from 40 to 80. On a
  logarithmic scale, these are all changes by an amount of log(2).
- By default, the function log()) returns natural logarithms, i.e.,
  logarithms to base e. On this scale, a change of 0.05 is very close
  to a change of 5%. A change of 0.15 is very roughly a change
  of 15%. [A decrease of 0.15 is a decrease of ' 13.9%, while an
  increase of 0.15 is a increase of ' 16.2%]

152     learning and exploring r
     Once the model is fitted, checks can and should be made on the
extent and manner of differences between observations and fitted
model values. Graphical checks are the most effective,4 at least                                                                                                                       4
                                                                                                                                                                                         Statistics that try to provide an
as a starting point. Mostly, such checks are designed to highlight                                                                                                                     overall evaluation focus too much on
                                                                                                                                                                                       a specific form of departure, and do
common types of departure from the model.
                                                                                                                                                                                       a poor job at indicating whether the
     Figure 8.4B provided a simple form of diagnostic check. This                                                                                                                      departure from assumptions matters.
is one of several checks that are desirable when models have been
fitted.
8.2.1                   ∗ Diagnostics                  – checks on the fitted model
                                                                                                                                                                                       Section 8.3 demonstrates the use of
For lm models, the R system has a standard set of diagnostic plots                                                                                                                     simulation to help in judging between
that users are encouraged to examine. These are a starting point for                                                                                                                   genuine indications of model depar-
investigation. Are apparent departures real, or may they be a result                                                                                                                   tures and features of the plots that may
of statistical variation? For the intended use of the model output, do                                                                                                                 well reflect statistical variation.
apparent departures from model assumptions matter.
    For drawing attention to differences between the data and what
might be expected given the model, plots that show residuals are in
general much more effective than plots that show outcome (y) vari-
able values. Additionally, plots are needed that focus on common
specific types of departure from the model.
All four diagnostic plots
Figure 8.5 shows the default diagnostic plots for the regression with
the untransformed data:
                         Residuals vs Fitted                                                      Normal Q−Q                                                      Scale−Location                                                  Residuals vs Leverage
                                                                                                                                                         2.0                     Seven Sevens ●
                                                             Standardized residuals                                             Standardized residuals                                              Standardized residuals
                  0.2                     Seven Sevens ●                               4                       Seven Sevens ●                                                                                                 4                        Seven Sevens ●
                                                                                                                                                                            ● Annalong Horseshoe
                       ●
                  0.1 ●●
                       ●                                                                                                                                 1.5
                       ●●                                                                                                                                            ● Donard & Commedagh                                     2
      Residuals
                         ●
                         ●
                         ●●
                                                                                       2
                  0.0    ●
                         ●
                         ●●      ●                                                                                                                                                                                                  ●
                                                                                                                                                                                                                                    ●
                                                                                                                      ●●                                                                                                            ●●                                  1
                          ● ●
                           ●●                                                                                   ●●●●●                                    1.0    ●                                                                   ●
                                                                                                                                                                                                                                    ●
                                                                                                                                                                                                                                    ●
                                                                                                                                                                                                                                                                        0.5
              −0.1                                                                     0                  ●●●●●●                                                ●
                                                                                                                                                                ● ●●
                                                                                                                                                               ●● ●                                                           0     ●●
                                                                                                                                                                                                                                    ●
                                                                                                       ●●●                                                        ●                                                                 ●
                                                                                                                                                                                                                                    ●                                   0.5
                                                                                                                                                                                                                                                                        1
                                                                                                      ●
                                                                                                  ● ●●                                                          ●
              −0.2            ● Donard & Commedagh                                                                                                       0.5     ●
                                                                                                                                                                 ●●     ●                                                    −2     ● Donard & Commedagh
                                                                                                ● Donard & Commedagh                                            ●●
                                                                                                                                                                ●
                                                                                      −2
              −0.3                   ● Annalong Horseshoe                                                                                                                                                                                     Cook's
                                                                                                                                                                                                                                         ● Annalong    distance
                                                                                                                                                                                                                                                    Horseshoe
                                                                                           ● Annalong Horseshoe                                          0.0
                                                                                                                                                                                                                             −4
                          1      2    3     4     5                                        −2      −1      0       1       2                                     1      2    3     4       5                                      0.0     0.2    0.4       0.6     0.8
                                Fitted values                                               Theoretical Quantiles                                                      Fitted values                                                         Leverage
                                                                                                                                                                                       Figure 8.5: Diagnostic plots from the
Simplified code is:                                                                                                                                                                    regession of timef on time.
mftime.lm <- lm(timef ~ time , data= nihills )
plot(mftime.lm , cex.caption =0.8)
The first of these plots has similar information to Figure 8.4A above.
A difference is that residuals are now plotted against fitted values. It
is immaterial, where there is just one explanatory variable, whether
residuals are plotted against fitted values or against x-values – the
difference between plotting against a + bx and plotting against x
amounts only to a change of labeling on the x-axis.                                                                                                                                    Two further plots are available; specify
    Figure 8.6 shows the default diagnostic plots for the transformed                                                                                                                  which=4 or which=6, e.g.
data. Simplified code is:                                                                                                                                                                plot(mftime.lm, which=4.
                                                                                                                                                                                       These give a different slant on what
                                                                                                                                                                                       is shown in the fourth default plot
                                                                                                                                                                                       (which=5).

                                                                                                                                regression with linear terms and factors                                                                                                   153
plot( mflogtime.lm , cex.caption =0.8)
par(opar)
                        Residuals vs Fitted                                                     Normal Q−Q                                                        Scale−Location                                                      Residuals vs Leverage
                                                                                                                                                                                     Seven Sevens ●
                                                                                                                                Standardized residuals
                                                                                                                                                         1.5
                                                            Standardized residuals                                                                                                                      Standardized residuals
             0.10        ●                 Seven Sevens ●                                                     Seven Sevens ●                                                                                                                                   Seven Sevens ●
                                                                                                                                                                             ● Donard & Commedagh                                 2
                                                                                      2                                                                            ●   ● Slieve Bearnagh
                         ●                                                                                              ●                                                                                                                    ●
             0.05
                          ●
                         ●●
                               ●
                                           ●                                                                                                                         ●●                                                                                                         1
                                                                                                                                                                  ●
     Residuals
                                                                                                                    ●                                    1.0          ●                                                           1          ●
                                                                                                                                                                                                                                            ●●                                  0.5
                                                                                                                                                                   ●                                                                         ●
                               ●
                                                                                      1
                                                                                                              ●●●
                                                                                                                 ●●
                                                                                                                                                                  ●●              ● ●                                                        ●      ●
                    ●                                                                                                                                                     ●
             0.00        ●●●                                                                                                                                        ●                                                                       ●
                                                                                                               ●                                                                                                                                    ●
                                                                                                              ●                                                                                                                   0          ●●
                                                                                                                                                                                                                                             ●
                          ● ● ●                                                       0                    ●●●                                                      ●    ●     ●
                         ●                                                                                                                                               ●                                                                  ●●●
        −0.05                ●
                                               ●                                                        ●●●                                              0.5 ●                                                                               ●●
                                                                                                     ●●                                                                                                                          −1                    ● Annalong Horseshoe 0.5
                              ●●                                                     −1             ●                                                                                                                                       ●
                                                                                                                                                                  ●                                                                         ●                               1
        −0.10                  ● Slieve Bearnagh                                                ●●                                                                                                                                          ●
                                     ● Donard & Commedagh                                     ● Slieve Bearnagh
                                                                                                                                                                   ●●
                                                                                                                                                                                                                                 −2
                                                                                                                                                                                                                                                    Cook's
                                                                                                                                                                                                                                              ● Donard       distance
                                                                                                                                                                                                                                                       & Commedagh
                                                                                          ● Donard & Commedagh                                           0.0
                                                                                     −2
                 −1.0              0.0   0.5   1.0   1.5                                  −2     −1       0        1        2                              −1.0          0.0       0.5   1.0   1.5                                    0.0         0.1    0.2   0.3   0.4
                              Fitted values                                                Theoretical Quantiles                                                        Fitted values                                                                   Leverage
                                                                                                                                                                                           Figure 8.6: Diagnostic plots from
The point for the largest time still has a very large leverage and, as                                                                                                                     the regression of log(timef) on
indicated by its position relative to the Cook’s distance contours,                                                                                                                        log(time).
a large influence on the fitted regression line. This may, in part or
entirely, be a result of a variance that, as suggested by the scale-
location plot in Panel 3, tends to increase with increasing fitted
value. The normal Q-Q plot (Panel 2) suggests an overall distri-
bution of residuals that is acceptably normal. The large residual
associated with the largest time in Panel 1 would look much less out
of place if there was an adjustment that allowed for a variance that
increases with increasing fitted value.
    These differences from the assumed model are small enough that,
for many purposes, the line serves as a good summary of the data.
The equation is:
mflogtime.lm <- lm(log(timef) ~ log(time),
                     data= nihills )
round (coef( mflogtime.lm ), 3)
( Intercept )                            log(time)
       0.267                                 1.042
The coefficient that equals 1.042 can be interpreted as a relative rate
of increase, for female time relative to male time. Consider a race
for which the male record time is 100 minutes. The predicted female
time is:
       exp(0.267 + 1.042 log(100/60)) = 2.223h = 133.4m.
An increase of one minute, or 1%, in the male time, is predicted to
lead to an increase of close to 1.042 × 1% in the female time. The
predicted increase is 133.4 × 1.042m.
                                                                                                                                                                                           To obtain this second plot only,
Panel 2 — A check for normality: The second panel in Figure 8.5                                                                                                                            without the others, type:
identifies two large negative residuals and one large positive resid-                                                                                                                      plot(mftime.lm , which =2)
ual. This seems inconsistent with the assumption that residuals have
a normal dsitribution. Again, Figure 8.6 shows an improvement.
    Modest departures from normality are not a problem per se.
Heterogeneity of variance, and outliers in the data, are likely to be
the more serious issues.

154   learning and exploring r
Panel 3 — Is the variance constant?: The third panel is designed
to check whether variation about the fitted line, as measured by the
variance, is constant. For this, there should be no trend up or down    To obtain this third plot only, without
in the points. The large upward trend in the third panel of 8.5 has    the others, type:
largely disappeared in the third panel of Figure 8.6.                  plot(mftime.lm , which =3)
Panel 4 — a check for high leverage points: The fourth panel is
designed to check on points with large leverage and/or large influ-
ence. In straight line regression, the most extreme leverage points     To obtain this fourth plot only, with-
                                                                       out the others, type:
are points that are separated from the main body of points, and are at
                                                                       plot(mftime.lm , which =5)
the high or (less commonly) low end of the range of x-values.
    The combined effect of leverage and magnitude of residual          For working within the main range
determines what influence a point has. Large leverage translates       of the data values, we might prefer
into large influence, as shown by a large Cook’s distance, when the    to use the regression line that is
                                                                       obtained when ‘Seven Sevens’ is
residual is also large. Points that lie within the region marked out
                                                                       omitted. If ‘Seven Sevens’ is omitted
by the 0.5 or (especially) the 1.0 contour for Cook’s distance have    in estimating the regression line, this
a noticeable influence on the fitted regression equation. Even with    should be made clear in any report,
the logged data, the point for the largest time (‘Seven Sevens’) is    and the reason explained. The large
skewing the regression line noticeably.                                residual for this point does hint that
    Note that there is no reason to suspect any error in this value.   extrapolation much beyond the upper
                                                                       range of data values is hazardous.
Possibly the point is taking us into a part of the range where the
relationship is no longer quite linear. Or this race may be untypical
for more reasons than that it is an unusually long race.
    The following shows the change when ‘Seven Sevens’ is omit-
ted:
round (coef( mflogtime.lm ), 4)
( Intercept )      log(time)
       0.2667          1.0417
omitrow <- rownames ( nihills )!="Seven Sevens "
update ( mflogtime.lm , data= subset (nihills , omitrow ))
Call:
lm( formula = log(timef) ∼ log(time), data = subset (nihills , omitrow ))
Coefficients :
( Intercept )       log(time)
        0.239            0.991
8.2.2     The independence assumption is crucial
A key assumption is that observations are independent. The indepen-
dence assumption is an assumption about the process that generated
the data, about the way that it should be modeled. There is no one
standard check that is relevant in all circumstances. Rather the ques-
tion should be: “Are there aspects of the way that the data were

                                                                                                                       regression with linear terms and factors           155
generated that might lead to some form of dependence?” Thus, when
data are collected over time, there may be a time series correlation
between points that are close together in time.
    Another possibility is some kind of clustering in the data, where
observations in the same cluster are correlated. In medical applica-
tions, it is common to have multiple observations on the one individ-
ual. Where clusters may be present, but there is no way to identify
them, dependence is hard or impossible to detect.
    Issues of dependence can arise in an engineering maintenance
context. If the same mechanic services two aircraft engines at the
same time using replacement parts from the same batch, this greatly
increases the chances that the same mistake will be made on the two
engines, or the same faulty part used. Maintenance faults are then
not independent. Independence is not the harmless assumption that it
is often made out to be!
    There may be further checks and tests that should be applied.
These may be specific to the particular model.
8.3                ∗ Simulation                 Based Checks
                                                                                                                                      If the assumption of independent
A good way to check whether indications of departures from the                                                                        random errors is wrong, patterns in
model may be a result or random variation is to compare the plot                                                                      the diagnostic plots that call for an
with similar plots for several sets of simulated data values, as a                                                                    explanation may be more common
means of verifying that the mismatch is, if residuals from the line                                                                   than suggested by the simulations.
are independent and normally distributed, real. This is the motiva-
tion for Figure 8.7.
                                      Simulated residuals          ●                   Actual residuals       ●
                                                 1      2      3       4                                      1    2     3   4
                        Simulation1              Simulation2                       Simulation3                Simulation4
                    ●                                                                   ●
             0.2    ●                    ●                         ●       ●                        ●                        ●
                                                                                ●
                    ● ●
Residuals
                                              ●                                                            ●
             0.1    ● ●                  ●    ●
                                              ●                             ●●                           ● ●●
                    ●
                   ●●
                    ●●                        ●
                                             ●●
                                              ●●                            ●
                                                                           ●●
                                                                            ●●                           ●
                                                                                                        ●●
                                                                                                         ●
                                                                                                         ●●
                          ●                   ●
                                             ●● ●   ●                                                    ●
                   ●●
                    ●                         ● ●                           ●                            ● ●
                                                                                                           ●
                    ●
                    ●●●●                      ●
                                              ●●●●●                        ●●●●
                                                                             ●
                                                                             ●                           ●
                                                                                                         ●●●                 ●
             0.0    ●
                    ●
                    ●
                    ●
                                              ●
                                                ●                  ●
                                                                            ●
                                                                            ●
                                                                            ●
                                                                            ●●●                          ●
                                                                                                         ●
                                                                                                         ●
                                                                                                           ●
                                                                                                           ●                          Figure 8.7: The plots are four simu-
                     ●●
                      ●   ●   ●                ●●   ●                        ●● ●● ●                ●    ●●●
                                                                                                          ●    ●
                      ●
                                              ●●
                                                ●
                                                                             ●
                                                                              ● ●           ●           ● ● ● ●    ●
                    ● ●●●                     ●●●●●     ●                                                ● ●●●
            −0.1      ●
                     ●●                       ●●
                                                                              ●●                         ●
                                                                                                         ●
                                                                                                                                      lations of residuals, from the model
                                                ● ●                            ●
            −0.2   ●
                        ●
                                              ●
                                                  ●
                                                                               ●
                                                                                   ●
                                                                                                          ●
                                                                                                              ●
                                                                                                                                      that is fitted to the unlogged data. The
                        1     2   3      4                                         1        2   3   4                                 coefficients used, and the standard
                              ●                         ●                                   ●                      ●
                                                            Time (h) for males
                                                                                                                                      deviation, are from the fitted least
                                                                                                                                      squares line.
## Code
gph <- plotSimScat (obj=mftime.lm , show=" residuals ",
                     type=c("p"," smooth "),
                     layout =c(4 ,1))
update (gph , xlab="Time (h) for males",
       ylab=" Residuals ")
    The simulations indicate that there can be a pattern in the smooth
curve that is largely due to the one point that is widely separated
from other data. On the other hand, the very large residual seen in
the actual data is not matched in any of the simulations.
    This type of check can be repeated for the other diagnostic plots:

 156    learning and exploring r
- A check for normality (Panel 2: which=2. Type:
    plotSimDiags (obj=mftime.lm , which =2, layout =c(4 ,1))
- Is the variance constant? (Panel 3: which=3. Type:
    plotSimDiags (obj=mftime.lm , which =3, layout =c(4 ,1))
- Are there issues of leverage and influence? (Panel 4: which=5.
    Type:
    plotSimDiags (obj=mftime.lm , which =5, layout =c(4 ,1))
 Scatterplots that are derived from the simulation process
 To see scatterplots that are derived from the simulation process,
 use the function plotsimscat(), from the DAAG package. For
 example, try, working with the untransformed data:
 gph <- plotSimScat (mftime.lm , layout =c(4 ,1))
 update (gph , xlab="Male record times (h)",
           ylab=" Female record times (h)")
 Observe that the largest simulated value lies consistently above the
 data value. Other simulated values, for male times of more than
 around one hour, tend to lie below the actual data. This is much
 easier to see in the plots of residuals. A scatterplot that shows the
 actual data values is not a good tool for making these difference
 visually obvious.
 8.4      Key questions for the use of models
 Key questions are:
• Modeling and analysis
   – Which model?
   – Do we want to make predictions? Or is the interest in getting
      parameter estimates that are interpretable?
   – How will model performance be measured?
   – How close can we get to measuring the performance that mat-
      ters?
• Interpretation
   – The task is easier if the aim is prediction, rather than interpreta-
      tion of model parameters.
   – Can model parameters be interpreted in scientifically meaning-
      ful ways?
      [This is a minefield, with huge scope for getting it wrong.]
     More detailed comments will now follow on some of the issues
 raised above.

                                                                 regression with linear terms and factors          157
 The choice of method: Note the use of the word “method”, not
 algorithm. Algorithms specify a sequence of computational steps.
 Something more than an algorithm is needed, if results are to have
 some use that generalizes beyond the specific data used.
     There are many different methods. How should the analyst
 choose between them? What are good ways to assess the perfor-
 mance of one or other algorithm? A credible measure of model
 performance is needed, evaluated on test data that closely reflects the
 context in which the model will be applied.
 Which are the important variables? Often, the analyst would like
 to know which data columns (variables, or features) were important
 for, e.g., a classification. Could some of them be omitted without
 loss?
     The analyst may wish to attach an interpretation to one or more
 coefficients? Does the risk of heart attack increase with the amount
 that a person smokes? For a meaningful interpretation of model
 parameters, it is necessary to be sure that:
• All major variables or factors that affect the outcome have been
    accounted for.
• Those variables and factors operate, at least to a first order of
    approximation, independently.
     In some cases, a different but equivalent choice of parameters
 will be more meaningful. For working with the Northern Ireland
 hillrace data in Subsection 8.6, the parameters dist and climb
 clearly do not exercise their effects independently, making their
 coefficients difficult to interpret. It is better to work with log(dist)
 and log(dist/climb), which are very nearly independent.
     See Rosenbaum’s Observational Studies5 for comments on ap-                 5
                                                                                  Rosenbaum, P.R, 2002. Observa-
 proaches that are often useful in the attempt to give meaningful               tional Studies, 2nd edn. Springer-
                                                                                Verlag.
 interpretations to coefficients that are derived from observational
 data.
                                                                                Another special type of term is one
 8.5      Factor Terms – Contrasts                                              that allows smooth functions of
                                                                                explanatory variables. Again, linear
 Here, we show how regression models can be adapted to fit terms                models can be adapted to handle such
 involving factors.                                                             terms.
     Additive A is conc nutrient, B is 3x conc nutrient, and C
 is 2-4-D + conc nutrient. For convenience, we label the factor
 levels Water, A, B, and C, in that order.
 lev <- c(" Water", "A", "B", "C")
 tomato [, "trt"] <- factor (rep(lev , rep (6 ,4)) ,
                                     levels =lev)
 Taking Water as the initial level the effect, in the first analysis that is
 given below, that it is treated as a reference level.

158             learning and exploring r
Water                                               A              B                                             C              Table 8.1: Root weights (weight) (g)
(Water only)                                        (Additive 1)   (Additive 2)                                  (Additive 3)   of tomato plants, grown with water
        1.50                                        1.50           1.90                                          1.00           only and grown wth three different
                                                                                                                                treatments. Data are in the data frame
        1.90                                        1.20           1.60                                          1.20
                                                                                                                                tomato (DAAG 1.17 or later).
        1.30                                        1.20           0.80                                          1.30
        1.50                                        2.10           1.15                                          0.90
        2.40                                        2.90           0.90                                          0.70
        1.50                                        1.60           1.60                                          0.80
Mean = 1.683                                        0.983          1.75                                          0.983
8.5.1                               Example – tomato root weight
The model can be fitted either using the function lm() or using the
function aov(). The two functions give different default output. The
main part of the calculations is the same whether lm() or aov() is
used.
    For model terms that involve factor(s), there are several differ-
ent ways to set up the relevant columns of the model matrix. The
default, for R and for many other computer programs, is to take one
of the treatment levels as a baseline or reference, with the effects
of other treatment levels then measured from the baseline. Here it
makes sense to set Water as the baseline.
    Table 8.2 shows the model matrix when Water is taken as the
baseline. Values of the response (tomato$weight) have been added
in the final column. Also included, in the column headers, is infor-
mation from the least squares fit.
    The following uses aov() for the calculations:
## Analysis of variance : tomato data (from DAAG)
tomato.aov <- aov( weight ~ trt , data= tomato )
    Figure 8.8A is a useful summary of what the analysis has
achieved. The values are called partials because the overall mean
has been subtracted off. Figure 8.8B that is shown alongside shows
the effect of working with the logarithms of weights. The scatter
about the mean for the treatment still appears much larger for the
controls than for other treatments.
                                    A: weight                                                     B: log(weight)                Figure 8.8: Termplot summary of
                              1.5               ●                                           0.8              ●
                                                                                                                                the one-way analysis of variance
      Partial for treatment                                         Partial for treatment
                                                                                            0.6      ●
                                                                                                                                result — A: for the analysis that uses
                              1.0      ●                                                                     ●
                                                                                            0.4
                                                                                                     ●             ●            weights as the outcome variable, and
                                                ●
                              0.5      ●               ●
                                                                                            0.2              ●     ●            B: for the analysis that works with
                                                                                                     ●       ●
                                                                                            0.0      ●                   ●
                                                                                                                                log(weight)
                                                ●      ●
                                       ●        ●                                                            ●           ●
                              0.0                                               −0.2
                                                                                                                   ●
                                       ●                     ●
                                                ●            ●                                                           ●
                                                       ●
                                                             ●                  −0.4                               ●     ●
                  −0.5                                 ●     ●                                                     ●     ●
                                                       ●     ●
                                                             ●                  −0.6                                     ●
                                      Water     A      B    C                                       Water    A     B     C
                                              Treatment                                                     Treatment
Code for Figures 8.8A and 8.8B is:

                                                             regression with linear terms and factors 159
## Panel A: Use weight as outcome variable
tomato.aov <- aov( weight ~ trt , data= tomato )
termplot ( tomato.aov , xlab=" Treatment ",
             ylab=" Partial for treatment ",
             partial.resid =TRUE , se=TRUE , pch =16)
mtext (side =3, line =0.5 , "A: weight ", adj =0, cex =1.2)
## Panel B: Use log( weight ) as outcome variable
logtomato.aov <- aov(log( weight ) ~ trt , data= tomato )
termplot ( logtomato.aov , xlab=" Treatment ",
             ylab=" Partial for treatment ",
             partial.resid =TRUE , se=TRUE , pch =16)
mtext (side =3, line =0.5 , "B: log( weight )", adj =0,
        cex =1.2)
    Residuals, if required, can be obtained by subtracting the fitted
values in Table 8.2 from the observed values (y) in Table 8.1.
    Coefficient estimates for the model that uses weight as the de-
pendent variable, taken from the output summary from R, are:
round (coef( summary.lm ( tomato.aov )) ,3)
                 Estimate Std. Error t value Pr(>|t|)
( Intercept )        1.683        0.187      9.019       0.000
trtA                 0.067        0.264      0.253       0.803
trtB                -0.358        0.264 -1.358           0.190
trtC                -0.700        0.264 -2.652           0.015
    The row labeled (Intercept) gives the estimate (= 1.683) for
the baseline, i.e., Water. The remaining coefficients (differences
from the baseline) are:
   A: weight differs by 0.067.
   B: weight differs by −0.358.
   C: weight differs by −0.700.
Regression calculations have given us a relatively complicated way
to calculate the treatment means! The methodology shows its power
to better effect in more complex forms of model, where there is no
such simple alternative.
    Examination of the model matrix can settle any doubt about how
to interpret the coefficient estimates, The first four columns of Table
8.2 comprise the model matrix, given by:
model.matrix ( tomato.aov )
The multipliers determined by least squares calculations are
shown above each column. Also shown is the fitted value,
which can be calculated either as fitted(tomato.aov) or as
predict(tomato.aov).
8.5.2     Factor terms – different choices of model matrix
In the language used in the R help pages, different choices of con-
trasts are available, with each different choice leading to a different

160     learning and exploring r
   Water: 1.683        A: +0.067      B: −0.358      C: −0.700     Fitted Table 8.2: The model matrix for the
                                                                   value  analysis of variance calculation for
   1                   0              0              0             1.683  the data in Table 8.1 is shown in gray.
                                                                          A fourth column has been added that
   1                   0              0              0             1.683
                                                                          shows the fitted values. At the head
   ..  ..                                                                 of each column is the multiple, as
   1                   0              0              0             1.683  determined by least squares, that is
   1                   1              0              0             1.750  taken in forming the fitted values.
   1                   1              0              0             1.750
   ..  ..
   1                   1              0              0             1.750
   1                   0              1              0             1.325
   1                   0              1              0             1.325
   ..  ..
   1                   0              1              0             1.325
   1                   0              0              1             0.983
   1                   0              0              1             0.983
   ..  ..
   1                   0              0              1             0.983
model matrix and to different regression parameters. The fitted val-
ues remain the same, the termplot in Figure fig:tomatotermA is
unchanged, and the analysis of variance table is unchanged.
     Where there is just one factor, the constant term can be omitted,
i.e., it is effectively forced to equal zero. The parameters are then the
estimated treatment means. Specify:
## Omit constant term from fit;
## force parameters to estimate treatment means
tomatoM.aov <- aov( weight ~ 0 + trt , data= tomato )
     The first nine rows of the model matrix are:
mmat <- model.matrix ( tomatoM.aov )
mmat [1:9 , ]
   trtWater trtA trtB trtC
1              1     0      0     0
2              1     0      0     0
3              1     0      0     0
4              1     0      0     0
5              1     0      0     0
6              1     0      0     0
7              0     1      0     0
8              0     1      0     0
9              0     1      0     0
## ...         ...      ...      ...
Observe that there is now not an initial column of ones. This is fine
when there is just one factor, but does not generalize to handle more
than one factor and/or factor interaction.
     The default (treatment) choice of contrasts uses the initial factor  Be sure to choose the contrasts that
                                                                          give the output that will be most
level as baseline, as we have noted. Different choices of the baseline
                                                                          helpful for the problem in hand. Or,
                                                                          more than one run of the analysis
                                                                          may be necessary, in order to gain
                                                                          information on all effects that are of
                                                                          interest.

                                                              regression with linear terms and factors       161
or reference level lead to different versions of the model matrix.
The other common choice, i.e., sum contrasts, uses the average of
treatment effects as the baseline.
The sum contrasts
Here is the output when the baseline is the average of the treatment
effects, i.e., from using the sum contrasts:
oldoptions <- options ( contrasts =c(" contr.sum ",
                                             " contr.poly "))
tomatoS.aov <- aov( weight ~ trt , data= tomato )
round (coef( summary.lm ( tomatoS.aov )) ,3)
                  Estimate Std. Error t value Pr(>|t|)
( Intercept )         1.435         0.093 15.381         0.000
trt1                  0.248         0.162    1.534       0.141
trt2                  0.315         0.162    1.946       0.066
trt3                -0.110          0.162 -0.683         0.502
options ( oldoptions )       # Restore default contrasts
The baseline, labeled (Intercept), is now the treatment mean.                The estimates (means) are:
This equals 1.435. Remaining coefficients are differences, for Water
                                                                               Water: 1.435 + 0.248 = 1.683.
and for treatment levels A and B, from this mean. The sum of the
differences for all three treatments is zero. Thus the difference for C        A: 1.435 + 0.315 = 1.750.
is (rounding up)                                                               B: 1.435 − 0.110 = 1.325.
                 −(0.2479 + 0.3146 − 0.1104) = −0.4521.
                                                                               C: 1.435 − 0.452 = 0.983.
     Yet other choices of contrasts are possible; see
help(contrasts).
Interaction terms
The data frame cuckoos has the lengths and breadths of cuckoo
eggs that were laid in the nexts of one of six different bird species.
The following compares a model where the regression line of
breadth against length is the same for all species, with a model that
fits a different line for each different cuckoo species:
cuckoos.lm <- lm( breadth ~ species + length , data= cuckoos )
cuckoosI.lm <- lm( breadth ~ species + length + species :length , data= cuckoos )
print ( anova(cuckoos.lm , cuckoosI.lm ), digits =3)
Analysis of Variance Table
Model 1:      breadth ∼ species + length
Model 2:      breadth ∼ species + length + species : length
   Res.Df      RSS Df Sum of Sq          F Pr(>F)
1       113   18.4
2       108   17.2 5          1.24 1.56      0.18
Here, the model cuckoos.lm, where the regression lines are parallel
(the same slope for each species), appears adequate.
     An alternative way to compare the two models is:

162     learning and exploring r
anova ( cuckoos.lm , cuckoosI.lm , test="Cp")
The Cp statistic (smaller is better) compares models on the basis of
an assessment of their predictive power. Note the use of the argu-
ment test="cp", even though this is not a comparison that is based
on a significance text.
8.6          Regression with two explanatory variables
Data exploration
The dataset nihills in the DAAG package has record times for
Northern Ireland mountain races. First, get a few details of the data:
str( nihills )
'data.frame ':                     23 obs. of 4 variables :
  $ dist : num                  7.5 4.2 5.9 6.8 5 4.8 4.3 3 2.5 12 ...
  $ climb : int                 1740 1110 1210 3300 1200 950 1600 1500 1500 5080 ...
  $ time : num                  0.858 0.467 0.703 1.039 0.541 ...
  $ timef : num                 1.064 0.623 0.887 1.214 0.637 ...
    The following Figure 8.9 repeats Figure 3.6 from Chapter 3.5.
The left panel shows the unlogged data, while the right panel shows
the logged data:
                         ●                  ●                  ●    6                                 ●                      ●                      ●
                                                                            4 5 6                                                                       1.5 0.5 1.5
                                                                    5
                                                                    4                              ●                     ●                     ●        1.0
                                                                                                  ●                   ●                      ●
                                                                        timef 3                                                                         0.5 ltimef
                  ●                  ●                  ●                                   ●●                       ●●                   ●●
                                                                                                ●                ●                       ●                          0.0
                ●                ●                   ●                         2             ●               ●●●                       ●
                                                                                        ●●● ●                        ●                ●
                                                                                                                                      ●●
                                                                                        ●
                                                                                   ● ● ●●
                                                                                         ●                    ●●●                    ●●
          ● ●●
          ●                  ●● ●●               ●●
                                                   ●
                                                   ●                1 2 3      1         ●●●
                                                                                           ●               ●●●●●
                                                                                                           ●    ●●                ●
                                                                                                                                  ●●
                                                                                                                                   ●●
                                                                                                                                   ●●
                                                                                                                                                    −1.0 0.0      −0.5
     ●●
        ●
        ●
      ●●●
        ●
        ●●●
         ●
         ●                 ●
                           ●
                            ●
                            ●●
                            ●
                            ●●
                             ●
                             ●
                             ●● ●              ●
                                              ●●
                                                 ●
                                                 ●
                                                ●●                                  ●                    ●                      ●
                                                                                                                                                                  −1.0
                         ●                  ●    4                               ●                    ●                      ●                                          ●
                                                           3   4                                                                  1.0 0.00.51.0
                                                 3                                                 ●                     ●                                        ●
                                                                                                  ●                   ●           0.5                           ●
                  ●                  ●                time   2           ●                  ● ●●                 ●   ●●           0.0 ltime 0.0               ●
                                                                                                                                                             ●●
                ●                ●                                     ●                ●●● ●●               ●●      ●                                      ●
                                                                                                                                                            ●
                                                                                                                                                           ●●
                                                                                                               ●●                              −0.5       ●
          ● ●●                ● ●
                                  ●                          1      ●
                                                                     ●
                                                                     ●                  ●●
                                                                                        ●
                                                                                           ●
                                                                                          ●●               ●
                                                                                                           ●
                                                                                                             ●●●●                                       ●●
                                                                                                                                                         ●●
          ●                 ●●                     1    2          ●                 ●
                                                                                   ● ●●  ●                 ●● ●●               −1.0 0.0                 ●
                                                                                                                                                        ●●
                                                                                                                                                         ●
     ●
        ●
        ●
        ●
      ●●●
        ●
        ●
        ●●●
         ●
         ●                 ●●
                            ●
                            ●
                             ●
                             ●
                             ●
                             ●
                              ● ●
                              ●
                                                                  ●
                                                                  ●
                                                                  ●
                                                                  ●
                                                                   ●
                                                                                                                                               −1.0
      ●                    ●                                     ●●                 ●                    ●                                            ●
                         ●                                     ●                 ●                    ●                                             ●                   ●
                              8000 6000                                                                    9.0
                                                                                                                     8.08.59.0
                                                                                                   ●       8.5                                 ●                  ●
                              6000                                                             ●                                           ●                  ●
                                                                                                           8.0
                                                                                                                 lclimb 8.0
                  ●                                     ●                ●              ● ●       ●                                   ● ● ●                ● ●  ●
                                  climb
                                       4000                                            ●●       ●                        7.5       ● ● ●                ● ●●
            ●   ●                                  ●                 ●             ●●    ●●                                       ●●●●●                 ●●●
        ●●                                       ●● ●              ●● ●                 ●●   ●                                      ●  ●                 ●●●
                                                                                                                                                         ●  ●
                            2000       2000                                              ● ●●              7.07.58.0 7.0          ●●
                                                                                                                                    ●●                   ●
                                                                                                                                                         ●
     ●●●●
        ●
        ●●●
         ●●
             ●                                 ●●
                                               ●●●●
                                                 ●
                                                ●●
                                                 ●
                                                                  ●
                                                                  ●
                                                                  ●
                                                                  ●
                                                                  ●
                                                                   ●
                                                                   ●
                                                                   ●
                                                                    ●                   ●  ●                                       ●
                                                                                                                                   ●                    ●
                                                                                                                                                        ●
                                                                                                                                                        ●
      ●●●●                                    ●●
                                               ●                 ●●                 ●                                           ●                     ●
                                            ●                  ●                 ●   3.0                                     ●                      ●                   ●
               10   15                                                                        2.0 2.5 3.0
        15                                                                           2.5                              ●  ●                   ● ●                ●●
                                     ●                  ●                ●                                       ●                       ●                   ●
                                 ●                   ●                 ●             2.0 ldist 2.0
        10 dist 10                                                                                           ●●      ●
                                                                                                                       ●
                                                                                                                                       ● ●
                                                                                                                                           ●
                                                                                                                                                            ●
                                                                                                                                                            ●●
                                                                                                                                                              ●
                              ● ●                 ●●                ●●                                     ● ●●●●                   ●●
                                                                                                                                   ●●                   ●●●
                            ●● ●                 ●                 ●
                                                                                                  1.5      ●●● ●     ●            ●●
                                                                                                                                   ●●●●
                                                                                                                                      ●                 ●
                                                                                                                                                        ●
                                                                                                                                                         ●●
                                                                                                                                                         ●●●
                                                                                                                                                         ●
                                                ●● ●               ●●                                             ●                ●                    ●
         5     10      5   ●
                           ●
                            ●
                            ●
                            ●●
                             ●● ●              ●
                                               ●
                                               ●●●
                                                ●●
                                                                  ●
                                                                  ●
                                                                  ●
                                                                  ●
                                                                  ●
                                                                  ●●
                                                                   ●               1.0 1.5 2.0           ●      ●               ● ●                   ● ●
                           ●● ●                ●
                                               ●
                                              ●●                  ●
                                                                  ●
                                                                 ●●                               1.0
                             ●                                                                                  ●                 ●                     ●
                                    Scatter Plot Matrix                                                             Scatter Plot Matrix
                                                                                                                        Figure 8.9: Scatterplot matrices for
    The relationships between explanatory variables, and between                                                        the Northern Ireland mountain racing
                                                                                                                        data. In the right panel, code has been
the dependent variable and explanatory variables, are closer to linear                                                  added that shows the correlations.
when logarithmic scales are used. Just as importantly, the point with                                                   This repeats Figure 3.6 from Chapter
the largest unlogged values (the same for all variables) will have a                                                    3.5.
leverage, influencing the fitted regression, that is enormously larger
than that of other points.

                                                              regression with linear terms and factors            163
    The log transformed data are consistent with a form of parsimony
that is well-designed to lead to a simple form of model. We will see
that this also leads to more readily interpretable results. Also the
distributions for individual variables are more symmetric.
    Here again is the code:
## Unlogged data
library ( lattice )
## Scatterplot matrix ; unlogged data
splom (~ nihills )
    The right panel requires a data frame that has the logged data
## Logged data
lognihills <- log( nihills )
names ( lognihills ) <- paste0 ("l", names( nihills ))
## Scatterplot matrix ; log scales
splom (~ lognihills )
8.6.1     The regression fit
The following regression fit uses logarithmic scales for all variables:
lognihills <- log( nihills )
lognam <- paste0 ("l", names( nihills ))
names ( lognihills ) <- lognam
lognihills.lm <- lm(ltime ~ ldist + lclimb ,
                           data= lognihills )
round (coef( lognihills.lm ),3)
( Intercept )           ldist           lclimb
        -4.961          0.681            0.466
Thus for constant climb, the prediction is that time per mile will           The fitted equation gives predicted
decrease with increasing distance. Shorter races with the same climb         times:
will involve steeper ascents and descents.                                           e3.205 × dist0.686 × climb0.502
    A result that is easier to interpret can be obtained by regressing          =    24.7e3.205 × dist0.686 × climb0.502
log(time) on log(dist) and log(gradient), where gradient
is dist/climb.
nihills $ gradient <- with(nihills , climb/dist)
lognihills <- log( nihills )
lognam <- paste0 ("l", names( nihills ))
names ( lognihills ) <- lognam
lognigrad.lm <- lm(ltime ~ ldist + lgradient ,
                          data= lognihills )
round (coef( lognigrad.lm ),3)
( Intercept )           ldist       lgradient
        -4.961          1.147            0.466
Thus, with gradient held constant, the prediction is that time will
increase at the rate of dist1.147 . This makes good intuitive sense.
    We pause to look more closely at the model that has been fitted.
Does log(time) really depend linearly on the terms ldist and
log(lclimb)? The function termplot() gives a good graphical
indication (Figure 8.10).

  164   learning and exploring r
                                                                         ●                                                                                        Figure 8.10: The vertical scales
                             1.5                                                                       1.5
                                                                                                                                                                  in both “term plot” panel show
                                                                               Partial for lgradient
                                                                                                                                                                  log(time), centered to a mean of
         Partial for ldist
                             1.0                                     ●                                 1.0
                                                                 ●
                                                                                                                                                                  zero. The partial residuals in the left
                             0.5                             ●
                                                                                                       0.5                                                        panel are for ldist, while those in the
                                                                                                                                                        ●
                                                       ● ●                                                                                       ● ●●         ●
                                                     ●●
                                                                                                                              ●●
                                                                                                                                         ●
                                                                                                                                             ●    ●
                                                                                                                                                    ●
                                                                                                                                                                  right panel are for lgradient, i.e.,
                             0.0                ●●                                                     0.0                           ●
                                               ● ●
                                              ●●●
                                                                                                              ●       ●● ●
                                                                                                                    ●●●
                                                                                                                        ●     ●                                   log(climb/dist). Smooth curves
                                              ●●                                                             ●
                   −0.5                                                                    −0.5                                                                   (dashes) have been passed through the
                                       ●● ●
                                   ●
                                                                                                                                                                  points.
                                   1.0        1.5        2.0     2.5     3.0                                      5.4   5.6    5.8       6.0     6.2    6.4
                                                      ldist                                                                   lgradient
  ## Plot the terms in the model
  termplot ( lognigrad.lm , col.term ="gray", partial =TRUE ,
             col.res ="black", smooth = panel.smooth )
      The vertical scales show changes in ltime, about the mean of
  ltime. The lines show the estimated effect of each explanatory
  variable when the other variable is held at its mean value. The lines,
  which are the contributions of the individual linear terms (“effects”)
  in this model, are shown in gray so that they do not obtrude unduly.
  The dashed curves, which are smooth curves that are passed through
  the residuals, are the primary features of interest.
      Notice that, in the plot for ldist, the smooth dashed line does
  not quite track the fitted line; there is a small but noticeable in-
  dication of curvature that can be very adequately modeled with a
  quadratic curve. Note also that until we have modeled effectively the
  clear trend that seems evident in this plot, there is not much point in
  worrying about possible outliers.
  8.7              Variable Selection – Stepwise and Other
  Common variable selection methods include various versions of for-
  ward and backward selection, and exhaustive (best subset) selection.
  These or other variable selection methods invalidate standard model
  assumptions, which assume a single known model.
     There are (at least) three inter-related issues for the use of results                                                                                       The points made here can have highly
  from a variable selection process:                                                                                                                              damaging implications for analyses
                                                                                                                                                                  where it is important to obtain inter-
(i) Use of standard theoretically based model fitting procedures,                                                                                                 pretable regression coefficients. In
    applied to the model that results from the model selection process,                                                                                           such analyses, changes to the initial
                                                                                                                                                                  model should be limited to simplifica-
    will lead to a spuriously small error variance, and to a spuriously
                                                                                                                                                                  tions that do not modify the model in
    large model F-statistic. Coefficient estimates will be inflated, have                                                                                         any substantial manner. Following the
    spuriously small standard errors, and spuriously large t-statistics.                                                                                          selection process, check coefficients
    (Or to put the point another way, it is inappropriate to refer such                                                                                           against those from the full model. Any
    statistics to a standard t-distribution.)                                                                                                                     large changes should ring a warning
                                                                                                                                                                  bell.
(ii) Commonly used stepwise and other model selection processes are                                                                                                 The implications for prediction are,
                                                                                                                                                                  relatively, much more manageable.
     likely to over-fit, i.e., the model will not be optimal for prediction
                                                                                                                                                                  The key requirement is to use indepen-
     on test data that are distinct from the data used to train the model.                                                                                        dent data to show that any selective
                                                                                                                                                                  process has genuinely improved model
                                                                                                                                                                  performance.

                                                                  regression with linear terms and factors          165
       The selected model may in some instances be inferior, judged
       by this standard, to a model that uses all candidate explanatory
       variables. (There are alternative ways to use all variables. Should
       low order interactions be included? Should some variables be
       transformed?)
(iii) Coefficients may change, even to changing in sign, depending on
       what else is included in the model. With a different total set of
       coefficients, one has a different model, and the coefficients that
       are common across the two models may be accordingly different.
       (They will be exactly the same only in the unusual case where
       “variables” are uncorrelated.) There is a risk that variable selec-
       tion will remove variables on whose values (individually, or in
       total effect) other coefficient estimates should be conditioned. This
       adds uncertainty beyond what arises from sampling variation.
         Note that these points apply to pretty much any type of regres-
    sion modelling, including generalized linear models and classifica-
    tion (discriminant) models.
         Where observations are independent, items (i) and (ii) can be
    addressed, for any given selection process, by splitting the data into
    training, validation and test sets. Training data select the model,
    with the validation data used to tune the selection process. Model
    performance is then checked against the test data.
         Somewhat casual approaches to the use of backward (or other)
    stepwise selection may be a holdover from hand calculator days,
    or from times when computers grunted somewhat to handle even
    modest sized calculations. This may be one of the murky dark alleys
    of statistical practice, where magic incantations and hope too often
    prevail over hard evidence.
         Appropriate forms of variable selection process can however be
    effective in cases where a few only of the coefficients have predic-
    tive power, and the relevant t-statistics are large – too large to be
    substantially inflated by selection effects.
    8.7.1      Use of simulation to check out selection effects:
    The function bestsetNoise() (DAAG) can be used to experiment
    with the behaviour of various variable selection techniques with data
    that is purely noise. For example, try:6                                     6
                                                                                   See also Section 6.5, pp. 197-198, in:
                                                                                 Maindonald, JH and Braun, WJ, 2010.
    bestsetNoise (m=100 , n=40, nvmax =3)                                        Data Analysis and Graphics Using R
    bestsetNoise (m=100 , n=40, method =" backward ",                            – An Example-Based Approach, 3rd
                       nvmax =3)                                                 edition. Cambridge University Press.
    The analyses will typically yield a model that appears to have highly
    (but spuriously) statistically significant explanatory power, with one
    or more coefficients that appear (again spuriously) significant at a
    level of around p=0.01 or less.

 166   learning and exploring r
 The extent of selection effects – a detailed simulation: As above,
                                                                                                                             Select 'best' 3 variables
 datasets of random normal data were created, always with 100 obser-                                         0.75
                                                                                                                             ●
                                                                                p−values for t−statistics
 vations and with the number of variables varying between 3 and 50.                                                          ●
                                                                                                                             ●
                                                                                                              0.5       ●●
 For three variables, there was no selection, while in other cases the                                                  ●● ●
                                                                                                                             ●
                                                                                                                          ●     ●●
 “best” three variables were selected, by exhaustive search.                                                 0.25        ● ●
                                                                                                                         ●●
                                                                                                                             ●●  ●
                                                                                                                                  ●●
                                                                                                                                  ●      ●
                                                                                                                                         ●●
                                                                                                                              ●● ● ●            ●●
                                                                                                                                            ●● ●            ●
     Figure 8.11 plots the p-values for the 3 variables that were se-                                        0.05
                                                                                                                          ● ●
                                                                                                                                ● ●●●●
                                                                                                                                     ●● ● ●
                                                                                                                                     ●
                                                                                                                                       ●   ●● ●● ●
                                                                                                                                                ● ● ●●  ●●
                                                                                                                                                            ●
                                                                                                                                                             ●●● ● ●
                                                                                                                                                           ●●●
                                                                                                                               ● ●                   ● ● ●● ● ● ●●
                                                                                                                                           ●●      ● ●● ●      ●● ●
 lected against the total number of variables. The fitted line estimates                                     0.01            ●
                                                                                                                                    ● ●● ● ●● ●●●●●
                                                                                                                                ● ● ●● ● ● ● ● ●● ● ● ●
                                                                                                                                                  ● ● ● ●● ●●
                                                                                                                                                                   ●
                                                                                                                                                  ●●           ● ●
                                                                                                                                                           ●     ●●
 the median p-value. Code is:                                                                               0.001                ●
                                                                                                                                             ●
                                                                                                                                              ●
                                                                                                                                               ●
                                                                                                                                                       ●      ●  ●
 library (DAAG)                                                                                                     0            10   20       30       40       50
 library ( quantreg )                                                                                           # of variables from which to select
 library ( splines )                                                       Figure 8.11: p-values, versus number
 set.seed (37)     # Use to reproduce graph shown                          of variables available for selection,
 bsnVaryNvar (m=100 , nvar =3:50 , nvmax =3, fg="gray")                    when the “best” 3 variables were
     When all 3 variables are taken, the p-values are expected to          selected by exhaustive search. The
                                                                           fitted line estimates the median p-
 average 0.5. Notice that, for selection of the best 3 variables out       value.
 of 10, the median p-value has reduced to about 0.1.
 Examples from the literature The paper cited in the sidenote7 gives       7
                                                                            Ambroise, C and McLachlan, GJ,
 several examples of published spurious results, all for the use of        2001. Selection bias in gene extraction
                                                                           on the basis of microarray gene-
 discriminant methods with microarray data. The same effects can
                                                                           expression data. Proceedings of the
 arise from model tuning.                                                  National Academy of Sciences USA,
                                                                           99: 6562-6566.
 8.7.2    Variable and model selection – strategies
 Several alternative mechanisms are available that can yield reason-
 able standard errors and other accuracy measures. These include:
a) Fit the model to test data that have played no part in the model
   selection and tuning process;
b) use cross-validation. The model selection and fitting process must
   be repeated at each cross-validation fold;
c) repeat the whole analysis, selection and all, with repeated boot-
   strap samples, using variation between the different sample results
   to assess the accuracy of one or other statistic;
d) simulate, including all selection and tuning steps, from the fitted
   model.
 For b) and c), there will be somewhat different selections for each
 different cross-validation fold or bootstrap sample. This is itself
 instructive.
     One possibility, following stepwise or other selection, is that the   If however the coefficients are not
 p-values of one or more coefficients may be so small that they are        themselves very meaningful, what is
 very unlikely to be an artefact of the selection process. In general, a   the point?
 simulation will be required, in order to be sure.
 Model selection more generally:
 More generally, the model may be chosen from a wide class of              Use of test data that are separate from
                                                                           data used to develop the model deals
                                                                           with this issue.

                                                                                                     regression with linear terms and factors                      167
    models. Again, model selection biases standard errors to be smaller
    than indicated by the theory, and coefficients and t-statistics larger.
    The resulting anti-conservative estimates of standard errors and other
    statistics should be regarded sceptically.
          A further issue, which use of separate test data does not address,
    is that none of the models on offer is likely to be strictly correct.
    Mis-specification of the fixed effects will bias model estimates, at the
    same time inflating the error variance or variances. Thus it will to an
    extent work in the opposite direction to selection effects.
    8.8            1970 cost for US electricity producers
    There is a wide range of possible choices of model terms. Figure
    8.12 shows the scatterplot matrices of the variables. Code is:
    library (car)
    library ( Ecdat)
    data( Electricity )
    spm( Electricity , smooth =TRUE , regLine =FALSE ,
              col= adjustcolor (rep("black" ,3), alpha.f =0.3))
                      0 40000 100000             0.05 0.15  0.25              0.1 0.2  0.3 0.4                 0.3 0.5 0.7
           cost                                                                                                            600
                                                                                                                           400
                                                                                                                           200
                                                                                                                           0
120000
100000                      q
 80000
 60000
 40000
 20000
      0
                                          pl                                                                               12000
                                                                                                                           10000
                                                                                                                           8000
                                                                                                                                     cost: total cost
                                                                                                                           6000
                                                                                                                                         q: total output
   0.30
                                                         sl
   0.25
   0.20
                                                                                                                                        pl: wage rate
   0.15
   0.10
   0.05
                                                                                                                                        sl: cost share, labor
                                                                                                                           90
                                                                       pk                                                  80           pk: capital price index
                                                                                                                           70
                                                                                                                           60
                                                                                                                           50
                                                                                                                           40
                                                                                                                                        sk: cost share, capital
                                                                                                                           30
                                                                                                                                        pf: fuel price
    0.4                                                                               sk
    0.3
                                                                                                                                        sf: cost share, fuel
    0.2
    0.1
                                                                                                                           50
                                                                                                     pf                    40
                                                                                                                           30
                                                                                                                           20
                                                                                                                           10
    0.8
    0.7                                                                                                            sf
    0.6
    0.5
    0.4
    0.3
        0 200 400 600                6000  10000                 30 50  70 90                  10 20  30 40 50
                                                                                                                                Figure 8.12: Scatterplot matrix,
                                                                                                                                for the variables in the data set
                                                                                                                                Electricity, in the Ecdat pack-
                                                                                                                                age. Density plots are shown in the
                                                                                                                                diagonal.

    168    learning and exploring r
    8.8.1     Model fitting strategy
    The analysis will start by checking for clearly desirable transfor-
    mations to variables. Then, for obtaining a model whose whose
    parameters are as far as possible interpretable, a strategy is:
  (i) Start with a model that includes all plausible main effects (vari-
       ables and factors). Ensure that the model is parameterised in a
       way that makes parameters of interest as far as possible inter-
       pretable (e.g., in Subsection 3.5 above, work with distance and
       gradient, not distance and climb)
                                                                               Removal of terms with p > 0.15 or
 (ii) [21pt] Model simplification may be acceptable, if it does not            p > 0.2 rather than p > 0.05 greatly
                                                                               reduces the risk that estimates of other
       change the parameters of interest to an extent that affects inter-      parameters, and their standard errors,
       pretation. The common p > 0.05 is too severe; try instead p =           will change in ways that affect the
       0.15 (remove terms with p > 0.15) or p = 0.20.                          interpretation of model results.
(iii) Variables and/or factors that have no detectable main effect are in
       general unlikely to show up in interactions. Limiting attention to
       the main effects that were identified in (ii) above, we then compare
       a model which has only main effects with a model that inludes all
       2-way interactions. Then, using p ' 0.15 or p ' 0.2 as the cutoff,
       remove interaction terms that seem unimportant, and check that
       there are no changes of consequence in terms that remain.
(iv) In principle, the process may be repeated for order 3 interactions.
 (v) Use the function add1() to check for individual highly significant
       terms that should be included. For this purpose, we might set
       p = 0.01 or perhaps p = 0.001.
    The strategy is to be cautious (hence the cutoff of p = 0.2) in re-
    moving terms, whether main effects or first order interactions. In a
    final check whether there is a case for adding in terms that had been                              2 4   6  8 10 12
    omitted, we include a term only if it is highly statistically significant.             log(cost)
                                                                                                                        6
    This limits the scope for selection effects.                                                                        4
                                                                                                                        2
                                                                                                                        0
    Distributions of variables                                                     12
                                                                                                                        −2
                                                                                                           log(q)
    The distributions of cost and q are highly skew. The relationship              10
                                                                                    8
    between these two variables is also very close to linear. We might try          6
    taking logarithms of both these variables.                                      4
                                                                                    2
        Figure 8.13 examines the scatterplot matrix for the logarithms of             −2 0     2   4 6
    the variables cost and q. Code is:
                                                                               Figure 8.13: Scatterplot matrix for
    varlabs <- c("log(cost)", "log(q)")
                                                                               the logarithms of the variables cost
    spm(log( Electricity [ ,1:2]) , var.labels =varlabs ,
                                                                               and q. Density plots are shown in the
          smooth =TRUE , regLine =FALSE ,
                                                                               diagonal.
          col= adjustcolor (rep("black" ,3), alpha.f =0.5))
    We start with a model that has main effects only:
    elec.lm <- lm(log(cost) ~ log(q)+pl+sl+pk+sk+pf+sf ,
                        data= Electricity )

                                                                                                                                                                                                                             regression with linear terms and factors                                169
   Partial for log(q)
                                                                 ●●
                                                                   ●
                                                                                                                                                                                                                                                                 Figure 8.14: Termplot summary for
                                                                                                                                                                                                      Partial for pk
                                                               ●●●
                                                                       Partial for pl                                               Partial for sl
                         2                                    ●
                                                              ●
                                                              ●
                                                              ●
                                                              ●●
                                                               ●                         2                                                            2                                                                 2
                                                            ●●
                                                             ●
                                                           ●
                                                           ●
                                                           ●
                                                           ●●
                                                            ●
                                                          ●
                                                          ●
                                                          ●●●                                    ●                                                                         ● ●            ● ●                                                                ●
                                                         ●
                                                         ●
                                                         ●                                    ● ● ●●     ● ●                                                                         ● ●●                                        ●           ●
                         0
                                               ●●
                                                 ●
                                                 ●
                                                 ●
                                                 ●
                                                   ●
                                                   ●
                                                  ●●
                                                    ●●
                                                    ●
                                                    ●●●
                                                     ●
                                                     ●
                                                     ●●
                                                       ●
                                                       ●
                                                       ●
                                                       ●
                                                        ●
                                                        ●
                                                        ●●
                                                         ●
                                                                                         0   ●●●
                                                                                               ●●●●
                                                                                                  ●
                                                                                                  ●●
                                                                                                   ●
                                                                                                     ●
                                                                                                     ●●
                                                                                                     ●
                                                                                                     ●
                                                                                                     ●
                                                                                                    ●●
                                                                                                    ●
                                                                                                   ●●●
                                                                                                     ●
                                                                                                      ●
                                                                                                      ●
                                                                                                      ●●
                                                                                                       ●
                                                                                                       ●●
                                                                                                        ●
                                                                                                        ●
                                                                                                       ●●
                                                                                                       ● ●
                                                                                                         ●
                                                                                                         ●
                                                                                                        ●●
                                                                                                         ●
                                                                                                         ●
                                                                                                          ●
                                                                                                          ●
                                                                                                          ●
                                                                                                          ●
                                                                                                          ●●
                                                                                                           ●
                                                                                                           ●
                                                                                                           ●
                                                                                                            ●
                                                                                                            ●
                                                                                                            ●
                                                                                                            ●
                                                                                                            ●
                                                                                                            ●●
                                                                                                             ●●
                                                                                                              ●
                                                                                                              ●●●
                                                                                                                ●
                                                                                                                ●
                                                                                                                ●●
                                                                                                                 ●
                                                                                                                 ●
                                                                                                                 ●
                                                                                                                  ●
                                                                                                                  ●
                                                                                                                  ●
                                                                                                                  ●
                                                                                                                   ●
                                                                                                                   ●
                                                                                                                   ●
                                                                                                                   ●
                                                                                                                   ●●●●
                                                                                                                      ●● ●
                                                                                                                       ●●●    ●●                      0     ●●
                                                                                                                                                           ●●●●●●
                                                                                                                                                              ●●
                                                                                                                                                               ●
                                                                                                                                                               ●
                                                                                                                                                               ●
                                                                                                                                                                ●
                                                                                                                                                                ●
                                                                                                                                                                ●
                                                                                                                                                                ●
                                                                                                                                                                ●
                                                                                                                                                                 ●●
                                                                                                                                                                 ●
                                                                                                                                                                 ●
                                                                                                                                                                 ●
                                                                                                                                                                 ●
                                                                                                                                                                 ●
                                                                                                                                                                 ●
                                                                                                                                                                  ●
                                                                                                                                                                  ●
                                                                                                                                                                  ●
                                                                                                                                                                  ●
                                                                                                                                                                  ●
                                                                                                                                                                   ●
                                                                                                                                                                   ●
                                                                                                                                                                   ●
                                                                                                                                                                   ●●
                                                                                                                                                                   ●●
                                                                                                                                                                   ●
                                                                                                                                                                    ●
                                                                                                                                                                    ●
                                                                                                                                                                    ●●
                                                                                                                                                                     ●
                                                                                                                                                                     ●
                                                                                                                                                                    ●●
                                                                                                                                                                      ●
                                                                                                                                                                      ●
                                                                                                                                                                      ●
                                                                                                                                                                      ●
                                                                                                                                                                       ●
                                                                                                                                                                       ●
                                                                                                                                                                       ●
                                                                                                                                                                       ●●
                                                                                                                                                                        ●
                                                                                                                                                                        ●
                                                                                                                                                                         ●
                                                                                                                                                                         ●
                                                                                                                                                                         ●
                                                                                                                                                                         ●
                                                                                                                                                                         ●
                                                                                                                                                                          ●
                                                                                                                                                                          ●
                                                                                                                                                                          ●
                                                                                                                                                                          ●●
                                                                                                                                                                           ●
                                                                                                                                                                           ●
                                                                                                                                                                           ●
                                                                                                                                                                            ●
                                                                                                                                                                            ●
                                                                                                                                                                            ●
                                                                                                                                                                            ●
                                                                                                                                                                            ●●●
                                                                                                                                                                             ●●
                                                                                                                                                                             ●●●●
                                                                                                                                                                                ●
                                                                                                                                                                                ●●● ●
                                                                                                                                                                                 ●
                                                                                                                                                                                 ●  ● ● ●
                                                                                                                                                                                    ●● ●                                0    ●● ●●●●● ●  ●●●
                                                                                                                                                                                                                                          ●●
                                                                                                                                                                                                                                    ● ●●●●●
                                                                                                                                                                                                                                          ● ●●
                                                                                                                                                                                                                                            ●●
                                                                                                                                                                                                                                             ●
                                                                                                                                                                                                                                              ●
                                                                                                                                                                                                                                              ●
                                                                                                                                                                                                                                              ●●
                                                                                                                                                                                                                                               ●
                                                                                                                                                                                                                                               ●●
                                                                                                                                                                                                                                                ●
                                                                                                                                                                                                                                                 ●
                                                                                                                                                                                                                                                 ●
                                                                                                                                                                                                                                                 ●
                                                                                                                                                                                                                                                 ●
                                                                                                                                                                                                                                                ●●
                                                                                                                                                                                                                                                 ●
                                                                                                                                                                                                                                                 ●●
                                                                                                                                                                                                                                                  ●
                                                                                                                                                                                                                                                  ●
                                                                                                                                                                                                                                                   ●
                                                                                                                                                                                                                                                   ●
                                                                                                                                                                                                                                                   ●●
                                                                                                                                                                                                                                                   ●
                                                                                                                                                                                                                                                   ●
                                                                                                                                                                                                                                                   ●
                                                                                                                                                                                                                                                   ●
                                                                                                                                                                                                                                                  ●●
                                                                                                                                                                                                                                                    ●
                                                                                                                                                                                                                                                    ●
                                                                                                                                                                                                                                                    ●
                                                                                                                                                                                                                                                    ●●
                                                                                                                                                                                                                                                     ●
                                                                                                                                                                                                                                                     ●
                                                                                                                                                                                                                                                     ●●●
                                                                                                                                                                                                                                                      ●
                                                                                                                                                                                                                                                      ●
                                                                                                                                                                                                                                                      ●
                                                                                                                                                                                                                                                      ●
                                                                                                                                                                                                                                                      ●●
                                                                                                                                                                                                                                                       ●
                                                                                                                                                                                                                                                        ●
                                                                                                                                                                                                                                                        ●
                                                                                                                                                                                                                                                        ●
                                                                                                                                                                                                                                                        ●
                                                                                                                                                                                                                                                       ●●●●●
                                                                                                                                                                                                                                                         ●
                                                                                                                                                                                                                                                         ●
                                                                                                                                                                                                                                                         ●
                                                                                                                                                                                                                                                       ●● ●
                                                                                                                                                                                                                                                           ●●
                                                                                                                                                                                                                                                            ●●
                                                                                                                                                                                                                                                                 the model that has been fitted to the
                        −2                     ●●
                                              ●●                                        −2                                                           −2                                                                −2
                        −4        ●
                                      ●
                                      ●
                                       ●
                                       ●
                                        ●   ●
                                            ●
                                             ●●
                                                                                        −4                                                           −4                                                                −4
                                                                                                                                                                                                                                                                 Electricity dataset.
                                 ●●
                             ●
                        −6                                                              −6                                                           −6                                                                −6
                             −6       −4      −2         0     2                              6000             10000                                      0.05            0.15       0.25                                   30       50         70        90
                                           log(q)                                                            pl                                                               sl                                                           pk
   Partial for sk                                                      Partial for pf                                               Partial for sf
                         2                                                               2                                                            2
                               ● ●                       ●                                                       ●
                                                                                                                 ●      ●                                  ●                           ● ●
                               ● ●
                                ●●
                                  ●●●●
                                     ●●
                                      ●
                                      ●
                                      ●●●
                                        ●
                                       ●●●● ● ● ● ● ● ●● ●
                                                  ●                                                 ● ●●●●●   ●●
                                                                                                               ●
                                                                                                               ●●●●
                                                                                                                  ●
                                                                                                                 ●●
                                                                                                                 ●
                                                                                                                 ●●●●
                                                                                                                   ●
                                                                                                                   ●●●
                                                                                                                     ●
                                                                                                                     ●
                                                                                                                      ●
                                                                                                                      ●●
                                                                                                                      ●
                                                                                                                      ●
                                                                                                                      ● ●
                                                                                                                       ●●
                                                                                                                        ●
                                                                                                                        ●●
                                                                                                                         ●
                                                                                                                          ●
                                                                                                                         ●● ●
                                                                                                                           ●●
                                                                                                                            ●●
                                                                                                                             ● ●●                          ●                  ●●●●
                                                                                                                                                                                 ●●
                                                                                                                                                                                  ●●
                                                                                                                                                                                   ●
                                                                                                                                                                                   ● ●
                                                                                                                                                                                    ●●●
                                                                                                                                                                                      ●
                                                                                                                                                                                      ●●●
                                                                                                                                                                                       ●
                                                                                                                                                                                       ●●
                                                                                                                                                                                        ●● ●
                                                                                                                                                                                          ●●●
                                                                                                                                                                                            ●  ●
                         0   ●●
                             ● ●
                               ●
                               ● ●
                                 ●
                                 ●●
                                  ●●
                                   ●
                                   ●●
                                    ●●
                                     ●
                                     ●
                                     ●●●
                                     ●●
                                      ●
                                      ●●
                                       ●
                                       ●●
                                        ●
                                        ●●
                                         ●
                                         ●
                                         ●●
                                          ●●
                                          ●
                                          ●
                                          ●●
                                           ●
                                           ●●
                                            ●
                                            ●●●
                                              ●●
                                               ●●
                                                ●●●
                                                ● ●● ●                                   0           ●●
                                                                                                      ●●
                                                                                                      ●●
                                                                                                       ●
                                                                                                       ●●
                                                                                                        ●●
                                                                                                         ●
                                                                                                         ●
                                                                                                         ●●
                                                                                                          ●
                                                                                                          ●
                                                                                                          ●
                                                                                                           ●
                                                                                                           ●
                                                                                                           ●●
                                                                                                            ●
                                                                                                            ●
                                                                                                            ●●
                                                                                                             ●●
                                                                                                              ●
                                                                                                              ●●●
                                                                                                               ●●
                                                                                                               ●●  ●
                                                                                                                   ● ●●                               0               ●     ●●●●●
                                                                                                                                                                                ●
                                                                                                                                                                                ●●
                                                                                                                                                                                 ●
                                                                                                                                                                                 ●
                                                                                                                                                                                 ●●
                                                                                                                                                                                  ●●
                                                                                                                                                                                   ●
                                                                                                                                                                                   ●
                                                                                                                                                                                  ●●
                                                                                                                                                                                   ●
                                                                                                                                                                                    ●
                                                                                                                                                                                    ●●
                                                                                                                                                                                    ●●●●
                                                                                                                                                                                      ●
                                                                                                                                                                                      ●●
                                                                                                                                                                                       ●
                                                                                                                                                                                       ●●●
                                                                                                                                                                                        ●
                                                                                                                                                                                        ●
                                                                                                                                                                                        ●●
                                                                                                                                                                                         ●
                                                                                                                                                                                         ●
                                                                                                                                                                                         ●
                                                                                                                                                                                         ●●
                                                                                                                                                                                          ●
                                                                                                                                                                                          ●●
                                                                                                                                                                                           ●
                                                                                                                                                                                           ●
                                                                                                                                                                                           ●
                                                                                                                                                                                           ●●
                                                                                                                                                                                            ●
                                                                                                                                                                                            ●●●● ●●
                                                       ●                                            ●●
                                                                                                    ● ●                                                              ●
                                                                                             ●
                        −2                                                              −2                                                           −2
                        −4                                                              −4                                                           −4
                        −6                                                              −6                                                           −6
                             0.1       0.2         0.3       0.4                             10      20      30       40     50                                0.3          0.5          0.7
                                               sk                                                            pf                                                               sf
       Now examine the termplot (Figure 8.14): Code is:
termplot (elec.lm , partial =T, smooth = panel.smooth ,
          transform.x =TRUE)
Notice that in the partial plot for q, the dashed curve that is fitted
to the residuals closely tracks the fitted effect (linear on a scale of
log(q). This confirms the use of log(q), rather than q, as explana-
tory variable.
    Now examine the model output:
round (coef( summary ( elec.lm )) ,5)
              Estimate Std. Error                                                                                                                    t value Pr(>|t|)
( Intercept ) -5.41328    0.70720                                                                                                                    -7.6545 0.00000
log(q)         0.89250    0.00994                                                                                                                    89.8326 0.00000
pl            -0.00002    0.00001                                                                                                                    -1.9341 0.05499
sl             2.48020    0.74898                                                                                                                     3.3114 0.00116
pk             0.00083    0.00127                                                                                                                     0.6562 0.51272
sk             0.62272    0.70837                                                                                                                     0.8791 0.38076
pf             0.03042    0.00228                                                                                                                    13.3338 0.00000
sf            -0.30965    0.69091                                                                                                                    -0.4482 0.65467
    The p-values suggest that pk, sk, and sf can be dropped from
the model. Omission of these terms makes only minor differences to
the coefficients of terms that remain.
elec2.lm <- lm(log(cost) ~ log(q)+pl+sl+pf ,
                 data= Electricity )
round (coef( summary ( elec2.lm )) ,5)
              Estimate Std. Error t value Pr(>|t|)
( Intercept ) -5.28641    0.13701 -38.585 0.00000
log(q)         0.88901    0.00986 90.167 0.00000
pl            -0.00002    0.00001 -2.072 0.03994
sl             2.69722    0.32464   8.308 0.00000
pf             0.02659    0.00191 13.934 0.00000
       Now check whether interaction terms should be included:
elec2x.lm <- lm(log(cost) ~ (log(q)+pl+sl+pf)^2,
                  data= Electricity )
anova (elec2.lm , elec2x.lm )
Analysis of Variance Table

170   learning and exploring r
Model 1:    log(cost) ∼ log(q) + pl + sl + pf
Model 2:    log(cost) ∼ (log(q) + pl + sl + pf) ∧ 2
   Res.Df    RSS Df Sum of Sq          F Pr(>F)
1      153  5.00
2      147  2.81 6           2.19 19.1 2.3e -16
The case for including first order interactions seems strong. The
coefficients and SEs are:
round (coef( summary ( elec2x.lm )) ,5)
                Estimate Std. Error       t value Pr(>|t|)
( Intercept ) -3.63931          0.67803   -5.3675 0.00000
log(q)           0.71481        0.05455   13.1039 0.00000
pl              -0.00031        0.00007   -4.2508 0.00004
sl               6.06389        1.64592    3.6842 0.00032
pf               0.01592        0.01499    1.0623 0.28985
log(q): pl       0.00003        0.00001    6.2902 0.00000
log(q): sl      -0.67829        0.10229   -6.6308 0.00000
log(q): pf       0.00080        0.00113    0.7133 0.47680
pl:sl            0.00007        0.00018    0.4144 0.67916
pl:pf            0.00000        0.00000    0.1421 0.88722
sl:pf            0.01680        0.03092    0.5432 0.58780
This suggests omitting the terms pf, and all interactions except
log(q):pl and log(q):sl. We check that omission of these terms
makes little difference to the terms that remain:
elec2xx.lm <- lm(log(cost) ~ log(q)+pl+sl+pf+
                      log(q):pl+log(q):sl ,
                      data= Electricity )
round (coef( summary ( elec2xx.lm )) ,5)
                Estimate Std. Error t value Pr(>|t|)
( Intercept ) -4.12003          0.33312 -12.368            0
log(q)           0.74902        0.03852 19.445             0
pl              -0.00029        0.00004 -7.755             0
sl               7.29642        0.70758 10.312             0
pf               0.02611        0.00145 18.017             0
log(q): pl       0.00003        0.00000     7.657          0
log(q): sl      -0.68969        0.09435 -7.310             0
    Now check whether there is a strong case for adding in any fur-
ther individual terms:
add1( elec2xx.lm , scope=~(log(q)+pl+sl+pk+sk+pf+sf)^2, test="F")
Single term additions
Model :
log(cost) ∼ log(q) + pl + sl + pf + log(q):pl + log(q):sl
             Df Sum of Sq RSS AIC F value Pr(>F)
<none >                       2.83 -622
pk            1      0.0041 2.82 -620         0.22    0.64
sk            1      0.0329 2.79 -621         1.76    0.19
sf            1      0.0294 2.80 -621         1.58    0.21
log(q): pf 1         0.0040 2.82 -620         0.21    0.64
pl:sl         1      0.0060 2.82 -620         0.32    0.57

                                                                                    regression with linear terms and factors                           171
pl:pf                 1        0.0004 2.83 -620                 0.02         0.88
sl:pf                 1        0.0016 2.83 -620                 0.09         0.77
8.9     An introduction to logistic regression
The data that will be used for illustration are from the data frame                                        The dataset bronchit may alterna-
bronchit in the DAAGviz package. The following loads packages                                              tively be found in the SMIR package.
that will be needed:
library (DAAGviz , quietly =TRUE)
library ( KernSmooth , quietly =TRUE)
   Figure 8.15 shows two plots – one of poll (pollution level)
against cig (number of cigarettes per day), and the other of poll
against log(poll). In each case, points are identified as with or
without bronchitis.
                      70                     Non−sufferer    Sufferer                    70                   Non−sufferer            Sufferer
                                                                                                    0.01
                      65                                                                 65
                                                                                                                               0.02
          Pollution
                                                                                                    0.02
                      60                                                                 60
                                                                                                      0.03                   0.03
                      55                                                                 55
                                                                                                                               0.01
                           0     5      10       15     20      25      30                    0.0    0.5     1.0   1.5   2.0        2.5   3.0    3.5
                                     # cigarettes per day                                           log(# cigarettes per day + 1)
                                                                                                           Figure 8.15: Panel A plots poll
                                                                                                           (pollution level) against cig (number
## Panel A                                                                                                 of cigarettes per day). In panel B, the
colr <- adjustcolor (c("red","blue"), alpha =0.5)                                                          x-scale shows the logarithm of the
plot(poll ~ cig ,                                                                                          number of cigarettes per day.
     xlab="# cigarettes per day", ylab=" Pollution ",
     col=colr[r+1], pch =(3:2)[ r+1], data=bronchit ,
     ylim=ylim)
legend (x=" topright ",
        legend =c(" Non-sufferer "," Sufferer "),
        ncol =2, pch=c(3,2), col=c(2,4), cex =0.8)
## Panel B
plot(poll ~ log(cig +1), col=c(2 ,4)[r+1], pch =(3:2)[ r+1],
     xlab="log (# cigarettes per day + 1)", ylab="", data=bronchit , ylim=ylim)
xy1 <- with( subset (bronchit , r==0) , cbind(x=log(cig +1), y=poll ))
xy2 <- with( subset (bronchit , r==1) , cbind(x=log(cig +1), y=poll ))
est1 <- bkde2D (xy1 , bandwidth =c(0.7 , 3))
est2 <- bkde2D (xy2 , bandwidth =c(0.7 , 3))
lev <- pretty (c(est1$fhat , est2$fhat ),4)

172              learning and exploring r
contour (est1$x1 , est1$x2 , est1$fhat , levels =lev , add=TRUE , col =2)
contour (est2$x1 , est2$x2 , est2$fhat , levels =lev , add=TRUE , col =4, lty =2)
legend (x=" topright ", legend =c(" Non-sufferer "," Sufferer "), ncol =2, lty =1:2 ,
    The logarithmic transformation spreads the points out in the x-
direction, in a manner that is much more helpful for prediction than
the untransformed values in panel A. The contours for non-sufferer
and sufferer in panel B have a similar shape. The separation between
non-sufferer and sufferer is stronger in the x-direction than in the y-
direction. As one indication of this, the contours at a density of 0.02
overlap slightly in the x-direction, but strongly in the y-direction.
Logistic regression calculations
Figure 8.15 made it clear that the distribution of number of cigarettes
had a strong positive skew. Thus, we might fit the model:
cig2.glm <- glm(r ~ log(cig +1) + poll , family =binomial , data= bronchit )
summary ( cig2.glm )
Call:
glm( formula = r ∼ log(cig + 1) + poll , family = binomial , data = bronchit )
Deviance Residuals :
   Min      1Q Median                                                  3Q               Max
-1.611 -0.586 -0.362                                               -0.239             2.653
Coefficients :
              Estimate Std. Error z value Pr(>|z|)
( Intercept ) -10.7877     2.9885   -3.61 0.00031
log(cig + 1)    1.2882     0.2208    5.83 5.4e -09
poll            0.1306     0.0494    2.64 0.00817
( Dispersion parameter for binomial family taken to be 1)
    Null deviance : 221.78                                            on 211                    degrees of freedom
Residual deviance : 168.76                                            on 209                    degrees of freedom
AIC: 174.8
Number of Fisher Scoring iterations : 5
                                  3                                                             3                    Figure 8.16: The panels show the
                                                                                                                     contributions that the respective terms
      Partial for log(cig + 1)
                                  2                                                             2                    make to the fitted values (logit of
                                                                            Partial for poll
                                                                                                                     probability of bronchitis), when the
                                  1                                                             1                    other term is held constant.
                                  0                                                             0
                                 −1                                                            −1
                                      0   5   10   15    20   25    30                              55   60     65
                                                   cig                                                   poll

                                                               regression with linear terms and factors           173
     Termplots (Figure 8.16) provide a useful summary of the contri-
 butions of the covariates. For binary (0/1) data such as here, includ-
 ing the data values provides no visually useful information. Code
 is:
 termplot ( cig2.glm )
 8.10       Regression with Fitted Smooth Curves
 Load the DAAG package:
 Commentary on Smoothing Methods
 Two types of methods will be described – those where the user con-
 trols the choice of smoothing parameter, and statistical learning type
 methods where the amount of smoothing is chosen automatically:
• The first class of methods rely on the user to make a suitable
    choice of a parameter that controls the smoothness. The default
    choice is often a good first approximation. Note here:
   – Smoothing using a “locally weighted regression smoother”.                Smoothness is controlled by the
       Functions that use this approach include lowess(), loess(),            width of the smoothing window. The
       loess.smooth(), and scatter.smooth().                                  default is f=2/3 for lowess(), or
                                                                              span=0.75 for loess(). For other
   – Use of a regression spline basis in a linear model. Here the             functions that rely on this methodol-
       smoothness is usually controlled by the choice of number of            ogy, check the relevant help page.
       spline basis terms.
• A second class of methods use a “statistical learning” approach
    in which the amount of smoothing is chosen automatically. The
    approach of the mgcv package extends and adapts the regression
    spline approach.8 The methodology generalizes to handle more              8
                                                                                Strong assumptions are required,
    general types of outcome variables, including proportions and             notably that observations are inde-
                                                                              pendent. Normality assumptions are,
    counts. These extensions will not be further discussed here.
                                                                              often, less critical.
 8.10.1      Locally weighted scatterplot smoothers
 Locally weighted scatterplot smoothers pass a window across the
 data, centering the window in turn at each of a number points that
 are equally spaced through the data. The smooth at an x-value where
 the window has been centred is the predicted value from a line (or
 sometimes a quadratic or other curve) that is fitted to values that
 lie within the window. A weighted fit is used, so that neighbouring
 points get greater weight than points out towards the edge of the
 window.
     Figure 8.17 shows a smooth that has been fitted using the lowess
 (locally weighted scatterplot smoothing) methodology. The default
 choice of with of smoothing window (a fraction f = 23 of the total
 range of x) gives a result that, for these data, looks about right. The

174   learning and exploring r
curve does however trend slightly upwards at the upper end of its                            10000              ●
range. A monotonic response might seem more appropriate.                                                          ●
                                                                                                                      ●
   The code used to plot the graph is:                                                           8000          ●● ●
                                                                                                              ●●
                                                                                                                  ● ●●●
                                                                                                                ●
                                                                                                             ●● ●●    ●●
                                                                                                            ● ●●●●●●     ●
## Plot points                                                                                   6000
                                                                                                               ●● ●
                                                                                                            ● ● ●● ● ●
                                                                                          ohms
                                                                                                                    ● ●              ●
plot(ohms ~ juice , data=fruitohms , fg="gray")                                                             ●        ●
                                                                                                                                        ●
                                                                                                                                            ●
                                                                                                                                                ● ●
                                                                                                 4000                         ● ● ● ● ●●●
                                                                                                                                        ●●       ●●
## Add smooth curve , using default                                                                                      ●        ●
                                                                                                                                  ●
                                                                                                                                 ●●
                                                                                                                                  ●     ●
                                                                                                                                          ●
                                                                                                                                          ●
                                                                                                                                          ●●
                                                                                                                                           ●●●●
                                                                                                                                              ●
                                                                                                                                                     ●●
                                                                                                                                               ●●●● ●●
                                                                                                                                 ●   ●
                                                                                                                                 ● ● ● ●●● ●
                                                                                                                                           ●
                                                                                                                                           ●●●
                                                                                                                                            ●●●●  ●● ●●
                                                                                                                                                  ●
                                                                                                                                     ● ●●        ●●●
## smoothing window                                                                                                              ● ●●●   ●
                                                                                                                                           ●
                                                                                                                                             ●    ●●
                                                                                                                                                     ●
                                                                                                 2000                                     ●● ●●
with(fruitohms ,                                                                                                                          ●
                                                                                                                                    ●
     lines ( lowess (ohms ~ juice), col="gray", lwd =2))
                                                                                                                10       20       30      40       50   60
    A more sophisticated approach uses the gam() function in the                                                                  juice
mgcv package. This allows automatic determination of the amount
                                                                                  Figure 8.17: Resistance in ohms is
of smoothing, providing the assumption of independent residu-                     plotted against apparent juice content.
als from the curve is reasonable. We now demonstrate the use of a                 A smooth curve (in gray) has been
GAM model for a two-dimensional smooth.                                           added, using the lowess smoother.
                                                                                  The width of the smoothing window
                                                                                  was the default fraction f = 32 of the
8.10.2    Contours from 2-dimensional Smooths                                     range of values of the x-variable.
Data are the amplitudes of responses to a visual stimulus, for each
of 20 individuals, at different regions of the left eye. We use the
function gam() to create smooth surfaces, for males and females
separately. Figure 8.18 then uses the function vis.gam() to plot
heatmaps that show the contours:
                  A: Response amplitudes, Males                        B: Response amplitudes, Females
                      14
                        .5
              4                     .5                             4
                                13             .5
                                             12
                                                        12
                          14
              2                 13                                 2    .5
                                                                       13
                                                                                           5
                                                                                         12
         y    0                                               y    0                        .
                                                                       13
             −2                                                   −2
                                                                                           12
                                                                                                                5
                                                                                                            11 .
             −4                                                   −4
                                                                                                                             11
                     −4        −2        0          2   4                    −4     −2                  0                     2                4
                                         x                                                              x
                                                                                  Figure 8.18: Estimated contours of
   The GAM fit will as far as possible use the smooth surface to                  left eye responses to visual stimulae,
account for the pattern of variation across the eye, with residuals               projected onto the plane.
from the surface treated as random normal noise.
## Code
library ( DAAGviz )
library (mgcv)
eyeAmpM.gam <- gam(amp ~ s(x,y), data= subset (eyeAmp , Sex =="m"))
eyeAmpF.gam <- gam(amp ~ s(x,y), data= subset (eyeAmp , Sex =="f"))
lims <- range(c( predict ( eyeAmpF.gam ), predict ( eyeAmpM.gam )))
vis.gam ( eyeAmpM.gam , plot.type ='contour ', color="cm", zlim=lims , main="")
mtext (side =3, line =0.5 , adj =0, "A: Response amplitudes , Males")

                                                                 regression with linear terms and factors 175
 vis.gam ( eyeAmpF.gam , plot.type ='contour ', color="cm", zlim=lims , main="")
 mtext (side =3, line =0.5 , adj =0, "B: Response amplitudes , Females ")
 8.11       Other important models and issues
 8.11.1      Errors in x
 In the classical "errors in x" model, one or more explanatory vari-
 ables are measured with error. In straight line regression, the effect
 is to attenuate the regression coefficient. If there is, additionally, a
 grouping factor with different means for the outcome variable for
 different groups, a side effect of the attentuation is to make it appear
 that the lines are different for the different groups. The same general
 principles apply when curves are fitted. Where several variables are
 measured with substantial error, there are increased oportunities for
 transferring estimated effects between variables, and the mathemat-
 ics becomes more complicated.
     Examples on the help page ?DAAG::errorsINx show how to
 run simulations that demonstrate the effects in the simple cases just
 described. These are useful in giving a sense of the magitutude of
 the attenuation, and any possible apparent group difference, that may
 arise from a given amount of measurement error.
     Comparison with data from a case where x is measured with
 minimal error is needed, in order to get a data-based indication of
 the extent of the error in x.
     An alternative to the classical "errors in x" model is the Berkson
 model. Consider an oven where the strength of pottery fired in the
 oven is a linear function, for some fixed time, of the temperature.
 - For the classical "errors in x" model, the measured temperature
    varies randomly about the oven temperature.
 - For the Berkson model, the oven temperature varies randomly
    about a temperature that is determined by setting on the tempera-
    ture control.
     In the Berkson case, the slope is an unbiased estimate of the true
 slope, but has increased standard error. In common situations, there
 may be a mix of classical errors and Berkson, with some additional
 bias.
 8.12       Exercises
1. Exercise 3 in Section 2.6.2 involved reading data into a data frame
    molclock1. Plot AvRate against Myr. Fit a regression line (with
    intercept, or without intercept?), and add the regression line to the
    plot. What interpretation can be placed upon the regression slope?

 176    learning and exploring r
2. Attach the DAAG package. Type help(elasticband) to see
    the help page for the data frame elasticband. Plot distance
    against stretch. Regress distance against stretch and ex-
    plain how to interpret the coefficient.
3. Repeat the calculations in Section 8.6, now examining the regres-
    sion of time on dist and climb. Does this regression adequately
    model the data. Comment on the results.
4.(a) Investigate the pairwise relationships between variables in the
       data frame oddbooks (DAAG).
 (b) Fit the models
       volume <- apply( oddbooks [, 1:3] , 1, prod)
       area <- apply( oddbooks [, 2:3] , 1, prod)
       lob1.lm <- lm(log( weight ) ~ log( volume ), data= oddbooks )
       lob2.lm <- lm(log( weight ) ~ log(thick )+ log(area), data= oddbooks )
       lob3.lm <- lm(log( weight ) ~ log(thick )+ log( breadth )+ log( height ),
                         data= oddbooks )
       Comment on what you find, i.e., comment both on the estimates
       and on the standard errors.
  (c) Can weight be completely explained as a function of volume?
       Is there another relevant variable?
5. Repeat the calculations in Section 3.5, now with the dataset
    hills2000 (DAAG). Do any of the points stand out as outliers?
    Use predict(), with newdata = hills200, to obtain predic-
    tions from the hills2000 model for the nihills data. Compare
    with the predictions from the nihills model.

9
∗
  A Miscellany of Models & Methods

178    learning and exploring r
    This chapter is a tour through models and methods that are
straightforward to fit using R. Some of these lend themselves to
relatively automated use. There is some limited attention to the traps
that can catch users who are unwary, or who have ventured too easily
into areas that call for some greater level of statistical sophistication
than their training and experience has given them.
    In each case, comments with be introductory and brief. Firstly,
there are brief comments on the fitting of smooth curves. The first
and second topics highlight specific types of departure from the iid
(independently and identically distributed) assumption.
9.1      Hierarchical Multilevel Models                                        ORAN                            ● ●● ●
                                                                               WEAN                   ● ●    ●●
                                                                               DBAN                  ● ●●●
  Models with Non-iid Errors – Multilevel models:                              OVAN            ●    ●      ●  ●
    Error Term Errors do not have to be (and often are not) iid                 LFAN         ●      ● ●
                                                                               TEAN        ●● ● ●
    Multilevel     Multilevel models are a (relatively) simple type of         WLAN     ●  ● ●●
                                                                               NSAN   ●●●     ●
    models         non-iid model, implemented using lme() (nlme) or
                                                                                        2    3    4     5    6    7
                   lmer() (lme4 package).
                                                                                       Harvest weight of corn
                   Such models allow different errors of prediction,
                   depending on the intended prediction.                   Figure 9.1: Yields from 4 packages
                                                                           of land on each of eight sites on the
                                                                           Caribbean island of Antigua. Data are
    Figure 9.1 shows corn yield data from the Caribbean island of          a summarized version of a subset of
Antigua, as in the second column (“Yields”) of Table 9.1. Each value       data given in Andrews and Herzberg
is for one package of land. The code for the figure is:                    1985, pp.3̃39-353.
ant111b <- DAAG :: ant111b
Site <- with(ant111b , reorder (site , harvwt ,
                                          FUN=mean ))
lattice :: stripplot (Site ~ harvwt , data=ant111b ,
              scales =list(tck =0.5),
              xlab=" Harvest weight of corn")
   Location           Yields        Location           Residuals from      Table 9.1: The leftmost column has
                                    effect             location mean       harvest weights (harvwt), for the
     DBAN     5.16, 4.8, 5.07, 4.51        +0.59  0.28, −0.08, 0.18, −0.38 packages of land in each location, for
     LFAN     2.93, 4.77, 4.33, 4.8        −0.08   −1.28, 0.56, 0.12, 0.59 the Antiguan corn data. Each of these
     NSAN    1.73, 3.17, 1.49, 1.97        −2.2   −0.36, 1.08, −0.6, −0.12 harvest weights can be expressed as
     ORAN    6.79, 7.37, 6.44, 7.07 (4.29) +2.62  −0.13, 0.45, −0.48, 0.15 the sum of the overall mean (= 4.29),
     OVAN    3.25, 4.28, 5.56, 6.24        +0.54   −1.58, −0.56, 0.73, 1.4 location effect (third column), and
     TEAN    2.65, 3.19, 2.79, 3.51        −1.26  −0.39, 0.15, −0.25, 0.48 residual from the location effect (final
    WEAN      5.04, 4.6, 6.34, 6.12        +1.23   −0.49, −0.93, 0.81, 0.6 column).
    WLAN     2.02, 2.66, 3.16, 3.52        −1.45  −0.82, −0.18, 0.32, 0.68
    Depending on the use that will be made of the results, it may be
essential to correctly model the structure of the random part of the
model. In comparing yields from different packages of land, there
are two sorts of comparison. Packages on the same location should
be relatively similar, while packages on different locations should
be relatively more different, as Figure 9.1 suggests. A prediction for

                                                                       a miscellany of models & methods             179
a new package at one of the existing locations is likely to be more
accurate than a prediction for a totally new location.
    Multilevel models are able to account for such differences in             Because of the balance the corn yield
                                                                              data, an analysis of variance that
predictive accuracy. For the Antiguan corn yield data, it is necessary
                                                                              specifies a formal Error term is an
to account both for variation within sites and for variation between          alternative to the fitting of a multilevel
sites. The R packages nlme and lme4 are both able to handle such              model.
data.
9.2       Regular Time Series in R
 Models with Non-iid Errors – Time Series:
  Time       Points that are close together in time commonly show
  sequential a (usually, +ve) correlation. R’s acf() and arima()
             functions are powerful tools for use with time series.
   Any process that evolves in time is likely to have a sequential
correlation structure. The value at the current time is likely to be
correlated with the value at the previous time, and perhaps with
values several time points back. The discussion that follows will
explore implications for data analysis.
9.2.1           Example – the Lake Erie data
                                                                              Figure 9.2: Lake Erie levels (m).
                    174.5
        Level (m)
                                                                               Erie <- DAAG :: greatLakes [,"Erie"]
                                                                               plot(Erie , xlab="", fg="gray",
                    174.0
                                                                                    ylab=" Level (m)")
                    173.5
                            1920   1940   1960    1980       2000
   The data series Erie, giving levels of Lake Erie from 1918 to
2009, will be used as an example from which to start the discus-
sion.1 The series is available in the DAAG package, as the column             1
                                                                               Data are from http://www.lre.
Erie in the multivariate time series object greatLakes.                       usace.army.mil/greatlakes/
                                                                              hh/greatlakeswaterlevels/
   Figure 9.2 shows a plot of the series.
                                                                              historicdata/
                                                                              greatlakeshydrographs/

180          learning and exploring r
                                                                                                                                                                                                                                                                          Figure 9.3: Panel A plots Lake Erie
                                                                                                                                                                                                                                                                          levels vs levels at lags 1, 2 and 3 re-
                 173.5               174.0             174.5                        175.0                                                                                                 173.5                     174.0                      174.5              175.0
                                                                                                                                                                                                                                                                          spectively. Panel B shows a consistent
                                                                        ●                                                             ●                                                                                              ●                                    pattern of decreasing autocorrelation
                                                 ●
                                                   ●
                                                            ●
                                                                ●
                                                                    ●
                                                                        ●           ●                                            ●
                                                                                                                                     ●
                                                                                                                                         ●
                                                                                                                                             ●
                                                                                                                                                         ●
                                                                                                                                                             ●●                                                         ●                ●
                                                                                                                                                                                                                                          ●
                                                                                                                                                                                                                                          ●
                                                                                                                                                                                                                                               ●
                                                                                                                                                                                                                                               ●
                                                                                                                                                                                                                                                       ●
                                                                                                                                                                                                                                                                          at successive lags.
                                           ●                                                                                 ●                                                                                      ●
                                                    ●●●    ●                ●                                                            ●       ●            ●●       ●                                                                      ●●   ●       ●●     ●
   174.5                                                                    ●                                                            ●
                                                            ●                                                                                         ●                                                                                                      ●
                                                   ●● ●● ●                  ●                                                           ● ●●          ●●
                                                                                                                                                      ●                                                                          ●           ● ●●
                                             ●             ●                                                                  ●            ●                                                                    ●                        ● ●                 ●
                                                    ●●●●●
                                                        ●  ●●                                                      ●             ●
                                                                                                                                         ●●
                                                                                                                                          ●●
                                                                                                                                                     ●             ●                                        ●               ●
                                                                                                                                                                                                                                 ●       ● ●
                                                                                                                                                                                                                                               ●●●          ●
                             ●                    ●     ●                                                           ●                   ●                         ●                                    ●                                  ●
                                        ●   ●     ● ●●                                                                      ●     ●●     ●
                                                                                                                                                     ●                                                                  ●                 ●●
                                                                                                                                                                                                                                                              ●
                                                         ●                                                                    ● ● ●●                                                                                                      ●
      Erie                                                                                  Erie                                                                               Erie
                                     ●        ●
                                              ● ●                                                                                                                                                                 ●       ● ●●
                                              ●●  ● ●                                                                              ● ●●              ●                                                              ●           ●
                                     ●  ● ●    ●                                                                    ● ●  ●         ●                                                               ●           ●      ● ● ●
                                             ● ●                                                                         ●        ●                                                                         ●
                                 ●     ●         ●                                                                               ●          ●                                                                          ● ● ●
                                      ●         ●                                                                    ● ●●                                                                                      ●
   174.0                             ●       ●●                                                                                ● ●                                                                                 ● ●
                                                      ●                                                                                ●●                                                                  ●             ●                         ●
                              ●●          ●●
                                           ●                                                                   ●       ● ●●                                                                        ●       ●●           ●
                                                  ●                                                                             ● ●                                                                                        ●      ●
                         ●      ●●          ●                                                                    ● ● ●●          ●                                                                         ● ●● ●●
             ●
                         ● ●●
                             ●
                                  ●
                                  ●
                                   ● ●
                                    ●●
                                                                                                   ●
                                                                                                       ●
                                                                                                               ●
                                                                                                                  ●●
                                                                                                                        ●
                                                                                                                               ●
                                                                                                                                ●
                                                                                                                                     ●
                                                                                                                                        ●
                                                                                                                                                                                      ●
                                                                                                                                                                                          ●
                                                                                                                                                                                              ●
                                                                                                                                                                                                       ●
                                                                                                                                                                                                                    ●
                                                                                                                                                                                                                       ●     ●●
                                                                                                                                                                                                                                ●    ●
                                                                                                                                                                                                                                                                          ## Panel A
                                 ●                                                                                         ●                                                                                                              ●
   173.5
                           ● ●
                                 ●
                                                                                                                      ● ●
                                                                                                                       ●                                                                                        ●
                                                                                                                                                                                                                        ●    ●
                                                                                                                                                                                                                                                                          lag.plot (Erie , lags =3,
                 ●
                     ●
                                                                                                           ●
                                                                                                                       ●                                                                                        ●
                                                                                                                                                                                                                ●
                                                                                                                                                                                                                                                                                    do.lines =FALSE ,
                                        lag 1
                                                                                                       173.5
                                                                                                                             lag 2
                                                                                                                           174.0                 174.5                 175.0
                                                                                                                                                                                                                            lag 3                                                   layout =c(1 ,3) , fg="gray",
                                                          1.0                                                                                                                                                                                                             ## Panel B
                                                          0.8                                                                                                                                                                                                             acf(Erie , main="", fg="gray")
                                                          0.6
                                                ACF       0.4
                                                          0.2
                                                          0.0
                                                        −0.2
                                                                                0                                 5                                      10                                   15
                                                                                                                                                 Lag
                                                                                                                                                                                                                                                                          Where values of covariates are
    The plots in Figure 9.3 are a good starting point for investigation                                                                                                                                                                                                   available that largely or partly explain
of the correlation structure. Panel A shows lag plots, up to a lag of                                                                                                                                                                                                     the dependence, it may make sense
3. Panel B shows estimates of the successive correlations, in this                                                                                                                                                                                                        to account for «««< HEAD these
                                                                                                                                                                                                                                                                          in the model. The details of how
context are called autocorrelations.                                                                                                                                                                                                                                      this should be done will =======
    There is a strong correlation at lag 1, a strong but weaker correla-                                                                                                                                                                                                  these in the model. THe details of
tion at lag 2, and a noticeable correlation at lag 3. Such a correlation                                                                                                                                                                                                  how this should be done will »»»>
pattern is typical of an autoregressive process where most of the                                                                                                                                                                                                         5245dac2bad38cd7565fda39666c5c0ff90565f8
sequential dependence can be explained as a flow-on effect from a                                                                                                                                                                                                         depend on the intended use of the
                                                                                                                                                                                                                                                                          model.
dependence at lag 1.
    In an autoregressive time series, an independent error component,                                                                                                                                                                                                     An autoregressive model is a special
or “innovation” is associated with each time point. For an order p                                                                                                                                                                                                        case of an Autoregressive Moving
autoregressive time series, the error for any time point is obtained                                                                                                                                                                                                      Average (ARMA) model.
by taking the innovation for that time point, and adding a linear
combination of the innovations at the p previous time points. (For
the present time series, initial indications are that p = 1 might
capture most of the correlation structure.)
9.2.2                     Patterns that are repeatable
                                                                                                                                                                                                                                                                          Smoothing terms can be fitted to the
What sorts of patterns may then be repeatable? Indications that a                                                                                                                                                                                                         pattern apparent in serially correlated
pattern may be repeatable include:                                                                                                                                                                                                                                        data, leaving errors that are pretty
                                                                                                                                                                                                                                                                          much uncorrelated. Such a pattern is
• A straight line trend is a good starting point for some limited                                                                                                                                                                                                         in general, however, unrepeatable. It
  extrapolation. But think: Is it plausible that the trend will continue                                                                                                                                                                                                  gives little clue of what may happen
  more than a short distance into the future?                                                                                                                                                                                                                             the future. A re-run of the process
                                                                                                                                                                                                                                                                          (a new realization) will produce a
• There may be a clear pattern of seasonal change, e.g., with seasons                                                                                                                                                                                                     different series, albeit one that shows
                                                                                                                                                                                                                                                                          the same general tendency to move up
  of the year or (as happens with airborne pollution) with days of
                                                                                                                                                                                                                                                                          and down.
  the week. If yearly seasonal changes persist over different years,

                                                                                                                             a miscellany of models & methods          181
  or weekly day-of-the-week changes persist over different weeks,
  these effects can perhaps be extrapolated with some reasonable
  confidence.
• There is a regression relationship that seems likely to explain
  future as well as current data.
    An ideal would be to find a covariate or covariates than can
largely explain the year to year changes. For this series, this does
not seem a possibility. In the absence of identifiable direct cause for
the year to year changes, a reasonable recourse is to look for a cor-
relation structure that largely accounts for the pattern of the year to
year change.
Smooth, with automatic choice of smoothing parameter
                                                                                                  ●                                 Figure 9.4: GAM smoothing term,
                                                                                       ●
                                                                                        ●         ●           ●                     fitted to the Lake Erie Data. Most of
                                                                                                    ●
                                                                                         ●●                                         the autocorrelation structure has been
                                                                  ●                           ● ●●             ●
                                                                                                          ●
        Height of lake
                         174.5                                                        ●
                                                                     ●             ●        ●● ●●        ● ● ●                      removed, leaving residuals that are
                                           ●●                    ● ●●                ●     ●            ●
                                                         ● ● ●●                     ●                ●●● ●               ●          very nearly independent.
                                  ●                                               ●                                  ●● ●
                                                          ●
                                                            ● ●       ●   ●●     ●                              ● ● ●
                                 ● ●                                   ●                                           ●
                         174.0            ●                    ●                                                 ● ●                 ## Code
                                   ●●                   ●                   ● ●                                   ●
                                      ● ●          ●●●●                 ●●
                                                                                                                                     library (mgcv)
                                     ●        ●                              ●                                                       df <- data.frame (
                                             ●●        ●                       ●
                                        ●                                     ●
                                       ●                                                                                               height = as.vector (Erie),
                         173.5                    ●
                                                 ●                                                                                     year=time(Erie ))
                                                ●                                                                                    obj <- gam( height ~ s(year),
                                                                                                                                                  data=df)
                                 1920               1940               1960               1980               2000
                                                                                                                                     plot(obj , fg="gray",
                                                                                                                                          shift =mean(df$ height ),
                                                                                                                                          residuals =TRUE , pch =1,
                                                                                                                                          xlab="",
    While smoothing methods that asssume independent errors can                                                                           ylab=" Height of lake")
be used, as in Figure 9.4, to fit a curve to such data, the curve will
not be repeatable. Figure 9.4 does not separate systematic effects
from effects due to processes that evolve in time. Figure 9.4 uses
the abilities of the mgcv package, assuming independently and iden-
tically distributed data (hence, no serial correlation!) to make an
automatic choice of the smoothing parameter. As the curve is condi-
tional on a particular realization of the process that generated it, its
usefulness is limited.
    The pointwise confidence limits are similarly conditioned, rel-
evant perhaps for interpolalation given this particular realization.
All that is repeatable, given another realization, is the process that
generated the curve, not the curve itself.
9.2.3                Fitting and use of an autoregressive model
There are several different types of time series models that may be
used to model the correlatios structure, allowing realistic estimates
of the lake level a short time ahead, with realistic confidence bounds
around those estimates. For the Lake Erie data, an autoregressive

182           learning and exploring r
correlation structure does a good job of accounting for the pattern of
change around a mean that stays constant.
    Figure 9.3 suggested that a correlation between each year and
the previous year accounted for the main part of the autocorrela-
tion structure in Figure 9.2. An AR1 model (autoregressive with a
correlation at lag 1 only), which we now fit, formalizes this.
ar(Erie , order.max =1)
Call:
ar(x = Erie , order.max = 1)
Coefficients :
    1
0.851
Order selected 1                          sigma ∧ 2 estimated as                       0.0291
The one coefficient that is now given is the lag 1 correlation,
equalling 0.851.
               4                                       4                                       4                              Figure 9.5: The plots are from re-
               2                                       2                                       2
                                                                                                                              peated simulations of an AR1 process
      Sim 1                                   Sim 2                                   Sim 3
               0                                       0
              −2                                      −2
                                                                                               0
                                                                                                                              with a lag 1 correlation of 0.85.
                                                                                              −2
              −4                                      −4                                                                      Smooth curves, assuming independent
              −6                                                                              −4
                   0   50   100   150   200
                                                      −6
                                                           0   50   100   150   200                0   50   100   150   200
                                                                                                                              errors, have been fitted.
                            x                                       x                                       x
               4                                                                               4
                                                       2                                                                      for (i in 1:6){
               2                                                                               2
                                                                                                                              ysim <-
      Sim 4                                   Sim 5                                   Sim 6
                                                       0
               0                                                                               0
                                                                                                                                arima.sim (list(ar =0 .85),
                                                      −2
              −2                                                                              −2                                           n =200)
                                                      −4
              −4                                                                              −4                              df <- data.frame (x=1:200 ,
                   0   50   100
                            x
                                  150   200                0   50   100
                                                                    x
                                                                          150   200                0   50   100
                                                                                                            x
                                                                                                                  150   200
                                                                                                                                                 y=ysim)
                                                                                                                              df.gam <- gam(y ~ s(x),
                                                                                                                                              data=df)
   Figure 9.5 then investigates how repeated simulations of this                                                              plot(df.gam , fg="gray",
                                                                                                                                   ylab= paste ("Sim", i),
process, with a lag 1 correlation of 0.0.85, compare with Figure 9.2.                                                              residuals =TRUE)
This illustrates the point that a GAM smooth will extract, from an                                                            }
autoregressive process with mean 0, a pattern that is not repeatable
when the process is re-run.
   The curves are different on each occasion. For generalization
beyond the particular realization that generated them, they serve no
useful purpose.
   Once an autoregressive model has been fitted, the function
forecast() in the forecast package can be used to predict future
levels, albeit with very wide confidence bounds. For this, it is neces-
sary to refit the model using the function arima(). An arima model
with order (1,0,0) is an autoregressive model with order 1.

                                                                                                                                    a miscellany of models & methods         183
                                                                                                                                           Figure 9.6: Predictions, 15 years
                                                                                                                                           into the future, of lake levels (m).
                                                                                                                                           The shaded areas give 80% and 95%
                 Lake level (m)
                                  174.5
                                                                                                                                           confidence bounds.
                                  174.0
                                                                                                                                            erie.ar <- arima (Erie ,
                                                                                                                                                          order =c(1 ,0 ,0))
                                  173.5                                                                                                     library ( forecast )
                                                                                                                                            fc <- forecast (erie.ar ,
                                                                                                                                                             h=15)
                                          1920          1940           1960                  1980           2000            2020            plot(fc , main="", fg="gray",
                                                                                                                                                 ylab="Lake level (m)")
                                                                                                                                              # 15 time points ahead
    This brief excursion into a simple form of time series model is
intended only to indicate the limitations of automatic smooths. and
to give a sense of the broad style of time series modeling. The list of
references at the end of the chapter has details of several books on
time series.
9.2.4                         Regression with time series errors
Figure 9.7 fits annual rainfall, in the Murray-Darling basin of Aus-
tralia, as a sum of smooth functions of Year and SOI. Figure 3.9
shows the estimated contributions of the two model terms.
## Code
bomregions <- DAAG :: bomregions2015
mdbRain.gam <- gam( mdbRain ~ s(Year) + s(SOI),
                      data= bomregions )
plot( mdbRain.gam , residuals =TRUE , se=2, fg="gray",
      pch =1, select =1, cex =1.35 , ylab="Partial , Year")
mtext (side =3, line =0.75 , "A: Effect of Year", adj =0)
plot( mdbRain.gam , residuals =TRUE , se=2, fg="gray",
      pch =1, select =2, cex =1.35 , ylab="Partial , SOI")
mtext (side =3, line =0.75 , "B: Effect of SOI", adj =0)
                                  A: Effect of Year                                           B: Effect of SOI
                                                                                                                                           Figure 9.7: Estimated contributions of
                                                                                                                                           model terms to mdbRain, in a GAM
                                                                                                                           ●●   ●
               300                                                                      300                                                model that adds smooth terms in Year
                                                          ●      ●                                                     ●                   and Rain. The dashed curves show
               200                                ●                                     200                              ●
                                                        ●● ●                                                                        ●      pointwise 2-SE limits, for the fitted
     Partial, Year
                                                                                                                    ●●● ●
                                                                              Partial, SOI
                                                ●                                                       ●
                                                                                                              ●
                                     ●         ●● ● ● ● ●●                                                         ●●
                                                                                                                   ●●      ●               curve.
               100                    ● ●                     ●                         100                          ●● ● ●
                                    ● ●● ● ●● ● ● ● ● ●●                                               ● ● ●  ●●●●● ● ●
                                         ● ●● ● ●●            ●● ●                                            ●●●●●
                                                                                                                  ●●● ●● ● ●
                                    ● ● ●●         ●●     ● ●●●●
                                                               ●●● ●                                   ● ●● ●     ● ●
                                          ●         ●●●●                                                         ● ●●●●
                          0        ● ●● ●        ●       ● ●●    ●●                          0 ●    ●●     ● ● ●●●●
                                    ●● ●   ● ● ●   ●       ●       ●                                       ●●
                                                                                                            ●  ●● ● ● ●
                                     ● ● ●●          ●●           ●                                   ●●● ●  ●●
                                                                                                             ●
                                                                                                             ●
                                      ●●        ●      ●●●● ●●                                                ●
                                                                                                      ●●●● ● ●●      ●
                                   ● ●●     ●●●      ●                                                          ●●● ●
          −100                                    ●       ●       ●●              −100
                                                                                                          ● ●●● ●●  ●● ●
                                          ●●●                   ●                                       ●
                                         ●● ●                    ●                                  ●● ● ● ●
          −200                     ●                  ●                           −200                        ● ●
                                            ●                                                       ●      ● ●
                                  1900      1940        1980                                  −40     −20          0       20       40
                                                 Year                                                         SOI
   The left panel indicates a consistent pattern of increase of rainfall

184             learning and exploring r
with succeeding years, given an adjustment for the effect of SOI. Er-
rors from the fitted model are consistent with the independent errors
assumption. The model has then identified a pattern of increase of
rainfall with time, given SOI, that does seem real. It is necessary to
warn against reliance on extrapolation more than a few time points
into the future. While the result is consistent with expected effects
from global warming, those effects are known to play out very differ-
ently in different parts of the globe.
Investigation of the residual error structure
Sequential correlation structures are often effective, with data col-
lected over time, for use in modeling departure from iid errors.
Where there is such structure structure in the data, the methodol-
ogy will if possible use a smooth curve to account for it.
    The residuals can be checked to determine whether the fitted
curve has removed most of the correlation structure in the data. Fig-
ure 9.8 shows the autocorrelation function of the residuals, followed
by autocorrelation functions for several series of independent ran-
dom normal numbers. Apart from the weakly attested correlation
at a lag of 12 years, which is a commonplace of weather data, the
pattern of sequential correlation is not much different from what can
be expected in a sequence of independent random normal numbers.
               1.0                                       1.0                                       1.0
               0.8                                       0.8                                       0.8
 MDB series
               0.6                                       0.6                                       0.6
               0.4                              Sim 1    0.4                              Sim 2    0.4
               0.2                                       0.2                                       0.2
               0.0                                       0.0                                       0.0
              −0.2                                      −0.2                                      −0.2
                         Series rnorm(n)                           Series rnorm(n)                           Series rnorm(n)
                     0    5    10    15    20                  0    5    10    15    20                  0    5     10     15     20
               1.0             Lag                       1.0             Lag                       1.0             Lag
               0.8                                       0.8                                       0.8
               0.6                                       0.6                                       0.6
 Sim 3                                          Sim 4                                     Sim 5
               0.4                                       0.4                                       0.4
               0.2                                       0.2                                       0.2
               0.0                                       0.0                                       0.0
                                                        −0.2
              −0.2                                                                                −0.2
                     0    5    10    15    20                  0    5    10    15    20                  0    5     10     15     20
                                                                                                    Figure 9.8: The top left panel shows
                                                                                                    the autocorrelations of the residu-
              Code is:
                                                                                                    als from the model mdbRain.gam.
mdbRain.gam <- gam( mdbRain ~ s(Year) + s(SOI),                                                     The five remaining panels are the
                      data= bomregions )                                                            equivalent plots for sequences of
n <- dim( bomregions )[1]                                                                           independent random normal numbers.
acf( resid ( mdbRain.gam ), ylab="MDB series ")
for(i in 1:5) acf(rnorm(n), ylab=paste("Sim",i),
                    fg="gray", col=" gray40 ")

                                                                            a miscellany of models & methods           185
9.2.5                    ∗ Box-Jenkins         ARIMA Time Series Modeling
                                                                                   Models that are closely analagous to
From the perspective of the Box-Jenkins ARIMA (Autoregressive                      ARIMA models had been used earlier
Integrated Moving Average) approach to time series models, au-                     in control theory. ARIMA models are
toregressive models are a special case. Many standard types of time                feedback systems!
series can be modeled very satisfactorily as ARIMA processes.
Exercise
The simulations in Figure 9.5 show a pattern of variation that seems
not too different from that in the actual series. Modeling of the pro-
cess as an ARMA or ARIMA process (i.e., allow for a moving av-
erage term) may do even better. Use the auto.arima() function in
the forecast package to fit an ARIMA process:
9.2.6                    Count Data with Poisson Errors
                                                                                   Data are a time series. Serious acci-
Data is for aircraft accidents, from the website http://www.                       dents are however sufficiently uncom-
planecrashinfo.com/. The 1920 file has accidents starting from                     mon that occasions where events occur
1908. The full data are in the dataset gamclass::airAccs. Such                     together, or where one event changes
issues as there are with sequential correlation can be ameliorated by              the probability of the next event, seem
                                                                                   likely to be uncommon.
working with weekly, rather than daily, counts.
        Estimated rate per week
                                  2.0
                                  1.5
                                  1.0
                                  0.5
                                        2006   2007    2008   2009   2010   2011     2012         2013         2014
                                                                                   Figure 9.9: Estimated number of
   Figure 9.9 shows a fitted smooth curve, with pointwise confi-                   events (aircraft crashes) per week,
                                                                                   versus time. The yearly tick marks are
dence bounds, from a GAM smoothing model that was fitted to the                    for January 1 of the stated year.
weekly counts.                                                                     See Section 4.3.9 for further details on
   The function gamclass::eventCounts() was used to create                         the function eventCounts().
weekly counts of accidents from January 1, 2006:
## Code
airAccs <- gamclass :: airAccs
fromDate <- as.Date ("2006 -01-01 ")
dfWeek06 <- gamclass :: eventCounts (airAccs , dateCol ="Date",
                                      from=fromDate ,
                                    by="1 week", prefix ="num")
dfWeek06 $day <- julian ( dfWeek06 $Date , origin = fromDate )
   Code for Figure 9.9 is then.

186     learning and exploring r
## Code
library (mgcv)
year <- seq(from=fromDate , to=max( dfWeek06 $Date), by="1 year")
at6 <- julian (seq(from=fromDate , to=max( dfWeek06 $Date), by="6 months "), origin = fromDate )
atyear <- julian (year , origin = fromDate )
dfWeek06.gam <- gam(num~s(day , k=200) , data=dfWeek06 , family = quasipoisson )
avWk <- mean( predict ( dfWeek06.gam ))
plot( dfWeek06.gam , xaxt="n", shift=avWk , trans=exp , rug=FALSE ,
        xlab="", ylab=" Estimated rate per week", fg="gray")
axis (1, at=atyear , labels = format (year , "%Y"), lwd =0, lwd.ticks =1)
abline (h=0 .5 +(1:4) *0.5 , v=at6 , col="gray", lty =3, lwd =0.5)
     The argument ‘k’ to the function s() that sets up the smooth
controls the temporal resolution. A large k allows, if the data seem
to justify it, for fine resolution. A penalty is applied that discrimi-
nates against curves that are overly “wiggly”.
     Not all count data is suitable for modeling assuming a Pois-
son type rare event distribution. For example, the dataset http:
//maths-people.anu.edu.au/~johnm/stats-issues/data/
hurric2014.csv has details, for the years 1950-2012, of US deaths
from Atlantic hurricanes. For any given hurricane, deaths are not at
all independent rare events.
9.3       Classification
Classification models have the character of regression models where     For the special case g = 2, logistic
the outcome is categorical, one of g classes. The fgl (forensic glass)  regression models are an alternative.
dataset that will be used as an example has measurements of each on
nine physical properties, for 214 samples of glass that are classified
into g = 6 different glass types.
     This section will describe a very limited range of available ap-
proaches. For details on how and why these methods work, it will be
necessary to look elsewhere.2                                           2
                                                                          Limited further details and refer-
     Linear discriminant analysis (LDA), and quadratic discriminant     ences are provided in Maindonald and
                                                                        Braun: Data Analysis and Graphics
analysis (QDA) which slightly generalizes LDA, both use linear
                                                                        Using R, Cambridge University Press,
functions of the explanatory variables in the modeling of the proba-    3rd edn 2010.
bilities of group membership. These methods will be contrasted with
the strongly non-parameteric approaches of tree-based classification
and of random forests.
Linear and quadratic discriminant analysis
The functions that will be used are lda() and qda(), from the
MASS package. The function lda() implements linear discriminant
analysis, while qda() implements quadratic discriminant analysis.3      3
                                                                          Quadratic discriminant analysis is
                                                                        an adaptation of linear discriminant
library (MASS , quietly =TRUE)                                          analysis to handle data where the
                                                                        variance-covariance matrices of
     Results from use of lda() lead very naturally to useful and
                                                                        the different classes are markedly
informative plots. Where lda() gives results that are a sub-optimal     different.
fit to the data, the plots may hint at what type of alternative method

                                                                      a miscellany of models & methods             187
may be preferable. They may identify subgroups of the orginal g
groups, and/or identify points that seem misclassified.
    An attractive feature of lda() is that the discriminant rule that is
obtained has a natural representation r-dimensional space. Providing
that there is sufficient independent covariate data, r = g − 1. The
analysis leads4 to r sets of scores, where each set of scores explains        4
                                                                                This is based on a spectral decompo-
a successively smaller (or at least, not larger) proportion of the sum        sition of the model matrix.
of squares of differences of group means from the overall mean.               With three groups, two dimensions
The r sets of scores can be examined using a pairs plot. With larger          will account for all the variation. A
numbers of groups, it will often happen that two or at most three             scatterplot is then a geometrically
                                                                              complete representation of what the
dimensions will account for most of the variation.                            analysis has achieved.
Use of lda() to analyse the forensic glass data
As noted above, the data frame fgl has 10 measured physical char-
acteristics for each of 214 glass fragments that are classified into
6 different types. First, fit a linear discriminant analysis, and use
leave-one-out cross-validation to check the accuracy, thus:
fglCV.lda <- lda(type ~ ., data=fgl , CV=TRUE)
tab <- table(fgl$type , fglCV.lda $class)
## Confusion matrix
print ( round(apply(tab , 1, function (x)x/sum(x)),
                 digits =3))
             WinF   WinNF      Veh     Con   Tabl    Head
   WinF    0.729    0.237   0.647   0.000   0.111  0.034
   WinNF   0.229    0.684   0.353   0.462   0.222  0.069
   Veh     0.043    0.000   0.000   0.000   0.000  0.000
   Con     0.000    0.039   0.000   0.462   0.000  0.034
   Tabl    0.000    0.026   0.000   0.000   0.556  0.000
   Head    0.000    0.013   0.000   0.077   0.111  0.862
    The function confusion() (DAAG) makes it easy to get all the
above output. Enter:
library (DAAG)
confusion (fgl$type , fglCV.lda $class)
Two-dimensional representation
Now fit the model with CV=FALSE, which is the default:
fgl.lda <- lda(type ~ ., data=fgl)
The final three lines of the output, obtained by entering fgl.lda at
the command line, are:
Proportion of trace:
   LD1     LD2      LD3     LD4     LD5
0.815 0.117 0.041 0.016 0.011
The numbers show the successive proportions of a measure of the               Observe that most of the discrimina-
                                                                              tory power is in the first two dimen-
                                                                              sions.

188   learning and exploring r
                                                                            Figure 9.10: Visual representation
                                                                            of scores from a linear discriminant
                         4                                                  analysis, for the forensic glass data. A
                                                                            six-dimensional pattern of separation
                         2                                                  between the categories has been
                                                                            collapsed to two dimensions. Some
       Discriminant 2
                         0                                  WinF            categories may therefore be better
                                                            WinNF           distinguished than is evident from this
                        −2                                  Veh
                                                            Con             figure.
                                                            Tabl
                        −4                                  Head
                        −6
                        −8
                             −4   −2    0    2     4    6
                                       Discriminant 1
variation that are accounted for by projections onto spaces with
successively larger numbers of dimensions.
   Figure 9.10 shows the two-dimensional representation.
library ( lattice )
scores <- predict ( fgl.lda )$x
xyplot ( scores [,2] ~ scores [,1], groups =fgl$type ,
         xlab=" Discriminant 1",
         ylab=" Discriminant 2",
         aspect =1, scales =list(tck =0.4),
         auto.key =list(space="right"),
                                                                            See Figure 9.13 in Subsection 9.4.1,
   Additionally, it may be useful to examine the plot of the third          for an example of the type of low-
versus the second discriminant. Better still, use the abilites of the rgl   dimensional representation that is
package to examine a 3-dimensional dynamic representation. With             possible for results from a randdom
                                                                            forest classification.
most other methods, a low-dimensional representation does not arise
so directly from the analysis.
Two groups – comparison with logistic regression
                                                                            More technical points, as they apply
The approach is to model the probability of class membership given          to the use of R’s function glm() for
the covariates, using the same logistic fixed part of the model as          logistic regression, are:
for linear and quadratic discriminant analysis. With π equal to the
                                                                            - The fitting procedure minimizes
probability of membership in the second class, the model assumes              the deviance. This equals 2 (
that                                                                          loglikelihood for fitted model,
                         log(π/(1 − π) = β0 x                                 minus the loglikelihood for the
                                                                              ‘saturated’ model). The ‘saturated
where β is a vector of coefficients that are to be estimated, and x is a      model has predicted values equal to
vector of covariate values.                                                   observed values.
    A logistic regression model is a special case of a Generalized          - Standard errors and Wald statistics
Linear Model (GLM), as implemented by R’s function glm(). There               (roughly comparable to t-statistics)
is no provision to adjust predictions to take account of prior proba-         are given for parameter estimates.
bilities, though this can be done as an add-on to the analysis. Other         These depend on approximations
                                                                              that may fail if predicted propor-
points of difference from linear discriminant analysis are:
                                                                              tions are close to 0 or 1 and/or the
                                                                              sample size is small.

                                                                        a miscellany of models & methods              189
• Inference is conditional on the observed covariate values. A model
    for the probability of covariate values x given the class c, as for
    linear discriminant analysis, is not required. (Linear discriminant
    analysis assumes a multivariate normal distribution assumptions
    for x, given the class c. In practice, results seem relatively robust
    against failure of this assumption.)
• The logit model uses the link function f (π) = log(π/(1 − π).
    Other choices of link function are available. Where there are suf-
    ficient data to check whether one of these other links may be more
    appropriate, this should be checked. Or there may be previous
    experience with comparable data that suggests use of a link other
    than the logit.
• Observations can be given prior weights.
 9.4      Tree-based methods and random forests
 On a scale in which highly parametric methods lie at one end and
 highly non-parametric methods at the other, linear discriminant
 methods lie at the parametric end, and tree-based methods and ran-
 dom forests at the non-parametric extreme. An attraction of tree-
 based methods and random forests is that model choice can be pretty
 much automated.
      We begin by loading the rpart package:
 library ( rpart)
      For the calculations that follow, data are columns in the data            The dataset bronchit may alterna-
 frame bronchit, in the DAAGviz package.                                        tively be found in the SMIR package.
 bronchit <- DAAGviz :: bronchit                                                Here r=1 denotes bronchitis, while
 head(bronchit , 3)                                                             r=0 indicates that bronchitis is absent.
    r cig poll
 1 0 5.15 67.1
 2 0 6.75 64.4
 3 0 0.00 65.9
 In place of the variable r with values 0 and 1, we use a factor with
 levels abs and pres. Labels that appear in the output are then more
 meaningful.
 ## Now make the outcome variable a factor
 bronchit <-
    within (bronchit ,
              rfac <- factor (r, labels =c("abs","pres")))
      The following fits a tree-based model:                                    With a factor (rfac) as outcome,
                                                                                method="class" is the default.
 set.seed (47)        # Reproduce tree shown
                                                                                Setting method="class", to make
 b.rpart <- rpart(rfac ~ cig+poll , data=bronchit ,
                                                                                it quite clear that we are using a
                        method ="class")
                                                                                splitting rule that is appropriate to a
                                                                                categorical (rather than continuous)
                                                                                outcome, is good practice.

190    learning and exploring r
     The “complexity” paremeter cp, by default set to 0.01, controls
how far splitting continues. In practice, it is usual to set cp small
enough that splitting continues further than is optimal, then pruning
the tree back. Cross-validation based accuracies are calculated at
each split, and can be used to determine the optimal depth of tree.
Details will not be given at this point, as the interest is in trees as a
lead-in to random forests. For random forests, the depth of the splits
in individual trees is not of great consequence — it is not important
for individual trees to be optimal.
                                                                                                               cig< 4.375
     Figure 9.11 is a visual summary of results from the tree-based                                                 |
classification, designed to predict the probability that a miner will
have bronchitis. Where the condition at a node is satisfied, the left
branch is taken. Thus, at the initial node, cig<4.385 takes the
                                                                                                                          cig< 6.3
branch to the left. In general (no random number seed), the tree may                                     abs
be different for each different run of the calculations.
     Tree-based classification proceeds by constructing a sequence of                                                              poll< 58.35
                                                                                                                  abs       poll>=55.65
decision steps. At each node, the split is used that best separates the                                                                       pres
data into two groups. Here (Figure 9.11) tree-based regression does
unusually well (CV accuracy = 97.2%), perhaps because it is well                                                           abs      pres
designed to reproduce a simple form of sequential decision rule that                                  Figure 9.11: Decision tree for predict-
has been used by the clinicians.                                                                      ing whether a miner has bronchitis.
     How is ‘best’ defined? Splits are chosen so that the Gini index of
                                                                                                      Code for Figure 9.11 is:
“impurity” is minimized. Other criteria are possible, but this is how
                                                                                                      plot( b.rpart )
randomForest() constructs its trees.                                                                  text(b.rpart , xpd=TRUE)
9.4.1       Random forests
library ( randomForest , quietly =TRUE)
     Figure 9.12 shows trees that have been fitted to different boot-
strap samples of the bronchitis data. Typically 500 or more trees are
fitted, without a stopping rule. Individual trees are likely to overfit.
As each tree is for a different random sample of the data, there is no
overfitting overall.
            cig< 3.3
                |
                                    cig< 6.3
                                        |
                                                            cig< 6.3
                                                                |
                                                                                   cig< 6.4
                                                                                       |
                                                                                                      Figure 9.12: Each tree is for a different
                  poll< 53.95             poll< 57.65             poll< 53.95            poll< 58.5
                                                                                                      bootstrap sample of observations. The
        abs                    abs                     abs                     abs                    final classification is determined by
                                                                                                      a random vote over all trees. Where
                          pres                    pres                    pres                   pres
                abs                     abs                     abs                    abs
                                                                                                      there are > 2 explanatory variables
            cig< 6.4
                |
                                      cig< 6.3
                                           |
                                                             cig< 6.725
                                                                   |
                                                                                   cig< 3.3
                                                                                       |
                                                                                                      (but not here) a different random
                                                                                                      sample of variables is typically used
                  poll< 58.35                                                            poll< 54.55
        abs                                                                    abs                    for each different split. The final
                                                                                                      classification is determined by a
                abs       pres abs                pres abs                pres         abs       pres
                                                                                                      random vote over all trees.
          cig< 4.625               cig< 3.45               cig< 3.45                cig< 6.725
                |                       |                       |                         |
                  poll< 54.55             cig< 7.325              poll< 61.45
        abs                    abs                     abs
                abs       pres          abs       pres          abs       pres abs               pres

                                                                    a miscellany of models & methods                                                  191
    For each bootstrap sample, predictions are made for the obser-
vations that were not included – i.e., for the out-of-bag data. Com-
parison with the actual group assignments then provides an unbiased
estimate of accuracy.
    For the bronchit data, here is the randomForest() result.
( bronchit.rf <- randomForest (rfac ~ cig+poll ,
                               data= bronchit ))
Call:
 randomForest ( formula = rfac ∼ cig + poll , data = bronchit )
                 Type of random forest : classification
                       Number of trees: 500
No. of variables tried at each split: 1
        OOB estimate of error rate: 23.58%                                                            abs     ●               pres
Confusion matrix :
                                                                                                          ●
     abs pres class.error                                                                                 ●
                                                                                                          ●●
                                                                                                           ●
                                                                                                           ●
                                                                                                           ●
                                                                                                           ●●
                                                                                                            ●
                                                                                                            ●
                                                                                                            ●           ●
                                                                                                             ●●●●             ● ●●
abs 145    21      0.1265                                                                0.2                  ●●●
                                                                                                                    ●
                                                                                                                    ●
                                                                                                                                 ●●●●
                                                                                                                                ● ●●● ●●
                                                                                                                                       ●●
                                                                                                                                      ●●
                                                                                                                                  ●     ●
pres 29    17      0.6304                                                                                                     ●●●
                                                                                                                                      ●●
                                                                                                                                        ●●
                                                                                         0.0                                   ●   ●
                                                                               Axis 2
                                                                                                                                ● ●            ●●
                                                                                                                                              ●
                                                                                                                                             ●●●●
                                                                                                                                                ●
                                                                                                                                                ●●
                                                                                                                                                 ●●
                                                                                                                                             ●
                                                                                                                                             ●●
                                                                                                                                              ●●
                                                                                                                                               ●
                                                                                                                                               ●
                                                                                                                                               ●
                                                                                                                                               ●●
                                                                                                                                                ●
                                                                                                                                                ●●
                                                                                                                                                 ●
                                                                                                                                                 ●●
                                                                                                                                              ●●
                                                                                                                                               ●●
                                                                                                                                                ●
                                                                                                                                                ●
                                                                                                                                              ●●
The accuracy is much better than the rpart() accuracy. The ran-                         −0.2   ●
                                                                                               ●
                                                                                                ●●
                                                                                                ●
                                                                                                ●
                                                                                                ●
                                                                                                  ●
                                                                                                 ●●
                                                                                                                                              ●
                                                                                                                                              ●●
                                                                                                                                               ●
                                                                                                                                               ●
                                                                                                                                                ●
                                                                                                                                                ●
                                                                                               ●
                                                                                               ●●
dom forest methodology will often improve, sometimes quite dra-                                 ●
                                                                                                ●●
                                                                                                 ●
                                                                                                 ●
                                                                                                      ●             ●
                                                                                                                    ●●
                                                                                                                    ●
                                                                                                 ●●          ●     ●●
matically, on tree-based classification.                                                −0.4     ●
                                                                                                          ●● ●
                                                                                                            ●●●
                                                                                                            ●
                                                                                                               ●●●
                                                                                                              ●●●●
                                                                                                                    ●
    Figure 9.13 is a visual summary of the random forest classifi-
                                                                                                −0.4       −0.2         0.0      0.2          0.4
cation result. The proportion of trees in which any pair of points
                                                                                                                  Axis 1
appear together at the same node may be used as a measure of the
“proximity” between that pair of points. Then, subtracting proxim-         Figure 9.13: The plot is designed
                                                                           to represent, in two dimensions, the
ity from one to obtain a measure of distance, an ordination method
                                                                           random forest result. It aims to reflect
is used to find an approximates representation of those points in a        probabilities of group membership
low-dimensional space.                                                     given by the analysis. It is not derived
    There is a tuning parameter mtry which controls the number             by a ’scaling’ of the feature space.
of randomly chosen variables considered for each tree. This is not
too much of an issue for the present data, where there are only two
explanatory variables.
    Code for Figure 9.13 is:
parset <- simpleTheme (pch =1:2)
bronchit.rf <- randomForest (rfac ~ cig+poll ,
                                   proximity =TRUE ,
                                   data= bronchit )
points <- cmdscale (1 -bronchit.rf $ proximity )
xyplot ( points [,2] ~ points [,1],
         groups = bronchit $rfac ,
         xlab="Axis 1", ylab="Axis 2",
         par.settings =parset , aspect =1,
         auto.key =list( columns =2))
A random forest fit to the forensic glass data
The algorithm can be used in a highly automatic manner. Here then
is the random forest analysis for the forensic glass data, leaving the
tuning parameter (mtry) at its default5 :                                  5
                                                                            The default is to set mtry to the
                                                                           square root of the total number of
                                                                           variables, rounded up to an integral
                                                                           value.

192   learning and exploring r
( fgl.rf <- randomForest (type ~ ., data=fgl ))
Call:
  randomForest ( formula = type ∼ ., data = fgl)
                     Type of random forest : classification
                             Number of trees: 500
No. of variables tried at each split: 3
           OOB estimate of error rate: 20.56%
Confusion matrix :
        WinF WinNF Veh Con Tabl Head class.error
WinF       63        6    1     0     0      0       0.1000
WinNF      10      59     1     3     2      1       0.2237
Veh         8        3    6     0     0      0       0.6471
Con         0        3    0     9     0      1       0.3077
Tabl        0        2    0     0     7      0       0.2222
Head        1        2    0     0     0    26        0.1034
This improves substantially on the linear discriminant result. This
may happen because the explanatory variables have effects that are
non-linear on a logit scale. The more likely reason is that there are
interaction effects, perhaps of a relatively complicated kind, for
which the lda() analysis has not accounted.
    The predictive accuracy might be further improved by varying
the tuning parameter mtry from its default. See help(tuneRF)
for details of the function tuneRF() that is designed to assist in
findind=g the optimum choice of mtry.
9.5     ∗ Ordination
                                                                        An ordination might alternatively be
From Australian road travel distances between cities and larger         based on road travel times, or on air
towns, can we derive a plausible “map”, or “ordination”, showing        travel times.
the relative locations? The resulting “map” would give a better indi-
cation than a geographical map of the road travel effort involved in
getting from one place to another.                                      The ordination methods described here
    Genomic data provides another example. Various methods are          are all versions of multi-dimensional
available for calculating genomic “distances ” between, e.g., differ-   scaling (MDS). If distances are not
                                                                        already given, a first tasl is to calculate
ent insect species. The distance measures are based on evolutionary     ‘distances’ between points. Or if
models that aim to give distances between pairs of species that are a   similarities are given, they must be
monotone function of the time since the two species separated.          first be transformed into ‘distances’.
    Ordination is a generic name for methods for providing a low-
dimensional view of points in multi-dimensional space, such that
“similar” objects are near each other and dissimilar objects are sep-
arated. The plot(s) from an ordination in 2 or 3 dimensions may
provide useful visual clues on clusters in the data and/or on outliers.
    One standard type of problem starts from a matrix X of n obser-
vations by p variables, then seeking a low-dimensional represen-
tation. A first step is then to calculate distances between observa-
tions.6 The hope is that a major part of the information content in     6
                                                                          Principal components analysis cir-
the p variables, as it relates to the separation between observations,  cumvents the calculation of distances,
                                                                        for the commonly used Euclidean
                                                                        distance measure. See below.

                                                                       a miscellany of models & methods               193
can be pretty much summarized in a small number of constructed
variables.
    There is typically no good model, equivalent to the evolutionary
models used by molecular biologists, that can be used to motivate
distance calculations. There is then a large element of arbritariness
in the distance measure used. Results may depend strongly on the
distance measure used. Unless measurements are comparable (e.g.,
relative growth, as measured perhaps on a logarithmic scale, for
different body measurements), it is usually desirable to calculate dis-
tances from standardized variable values. This is done by subtracting
the mean and dividing by the standard deviation.
    If data can be separated into known classes that should be re-
flected in any ordination, then the scores from classification using
lda() may be a good basis for an ordination. Plots in 2 or perhaps 3
dimensions may then reveal additional classes and/or identify points
that may be misclassified and/or are in some sense outliers. They
give an indication of the effectiveness of the discrimination method
in choosing the boundaries between classes.
    Figure 9.13 demonstrated the use of “proximities” that are avail-
able from randomForest() as measures of the closeness of any pair
of points. These were then turned into rough distance measures that
then formed the basis for an ordination. With Support Vector Ma-
chines, distance measures can be derived from the ’decision values’
and used for ordination.
9.5.1     Distance measures
Euclidean distances
Treating the rows of X (n by p) as points in a p-dimensional space,
the squared Euclidean distance di2j between points i and j is
                                      Xp
                            di2j =        ( xik − x jk )2
                                     k =1
The distances satisfy the triangle inequality7                                 7
                                                                                 This says that a straight line is the
                                                                               shortest distance between two points!
                                 di j ≤ dik + dk j
    The columns may be weighted differently.8 Use of an un-                    8
                                                                                 More generally, they can be arbitrar-
weighted measure with all columns scaled to a standard deviation               ily transformed before calculating the
                                                                               di j .
of one is equivalent to working with the unscaled columns and cal-
culating di2j as
                                  X  p
                           2
                          di j =        wi j ( xik − x jk )2
                                  k =1
where wi j = ( si s j )−1 is the inverse of the product of the standard
deviations for columns i and j.
    Where all elements of a column are positive, use of the logarith-
mic transformation is common. A logarithmic scale makes sense for

194    learning and exploring r
biological morphometric data, and for other data with similar char-
acteristics. For morphometric data, the effect is to focus attention
on relative changes in the various body proportions, rather than on
absolute magnitudes.
Non-Euclidean distance measures
Euclidean distance is one of many possible choices of distance mea-
sures, still satisfying the triangle inequality. As an example of a
non-Euclidean measure, consider the Manhattan distance. The Man-          For the Manhattan distance:
hattan distance is the shortest distance for a journey that always pro-                    X p
ceeds along one of the co-ordinate axes. In Manhattan in New York,                  di j =      | xik − x jk |
                                                                                           k =1
streets are laid out in a rectangular grid. This is then (with k = 2) the
walking distance along one or other street. For other choices, see the
help page for the function dist().9                                       9
                                                                            The function daisy() in the clus-
                                                                          ter package offers a wider choice,
                                                                          including distance measures for factor
From distances to a representation in Euclidean space                     or ordinal data. Its argument stand
                                                                          causes prior standardization of data.
Irrespective of the method of calculation of the distance measure,
ordination methods yield a representation in Euclidean space. It
is always possible to find a configuration X in Euclidean space in
which the “distances” are approximated, perhaps rather poorly.10          10
                                                                             This is true whether ot not the
It will become apparent in the course of seeking the configuration        triangle inequality is satisfied.
whether an exact embedding (matrix X) is possible, and how ac-
curate this embedding is. The representation is not unique. The
matrices X and XP, where P is an orthonormal matrix, give exactly
the same distances.
The connection with principal components
                                                                          We assume that none of the columns
Let X be an n by p matrix that is used for the calculation of Eu-         can be written as a linear combination
clidean distances, after any transformations and/or weighting. Then       of other columns.
metric p-dimensional ordination, applied to Euclidean distances be-
tween the rows of X, yields a representation in p-dimensional space
that is formally equivalent to that derived from the use of principal
components. The function cmdscale() yields, by a different set of
matrix manipulations, what is essentially a principal components
decomposition. Principal components circumvents the calculation of
distances.
Semi-metric and non-metric scaling
Semi-metric and non-metric methods all start from “distances”,            The assumption of a Euclidean dis-
but allow greater flexibility in their use to create an ordination. The   tance scale is a convenient starting
aim is to represent the “distances” in some specified number of           point for calculations. An ordina-
dimensions, typically two dimensions. As described here, a first step     tion that preserves relative rather
is to treat the distances as Euclidean, and determine a configuration     than absolute distances can often be
                                                                          more appropriate. Additionally, small
in Euclidean space. These Euclidean distances are then used as a          distances may be measured more
                                                                          accurately than large distances.

                                                                      a miscellany of models & methods                    195
starting point for a representation in which the requirement that
these are Euclidean distances, all determined with equal accuracy,
is relaxed. The methods that will be noted here are Sammon scaling
and Kruskal’s non-metric multidimensional scaling.
Example – Australian road distances                                                        ●
                                                                                         Perth
The distance matrix that will be used is in the matrix audists, from
the DAAG package. Figure 9.14 is from the use of classical multi-                                          ●
                                                                                                             Melbourne
                                                                                                                  ● ● Canberra
                                                                                                                    ●
dimensional scaling, as implemented in the function cmdscale():                                         Adelaide
                                                                                                                  Sydney
                                                                                   ●
An alternative way to add names of cities or other labels is to use             Broome              ●
                                                                                                                  ●
                                                                                                              Brisbane
                                                                                                  Alice
identify() to add labels interactively, thus:                                                ●
                                                                                          Darwin
    Code is:                                                                                                   ●
                                                                                                            Cairns
audists <- DAAG :: audists
aupts <- cmdscale ( audists )
plot(aupts , axes=FALSE , ann=FALSE , fg="gray",                              Figure 9.14: Relative locations of
       frame.plot =TRUE)                                                      Australian cities, derived from road
city <- rownames (aupts)                                                      map distances, using metric scaling.
pos <- rep (1, length (city ))
pos[city ==" Melbourne "]<- 3
pos[city ==" Canberra "] <- 4
par(xpd=TRUE)
text(aupts , labels =city , pos=pos)
par(xpd= FALSE)
    Classical multi-dimensional scaling, as implemented by
cmdscale(), gives long distances the same weight as short dis-
tances. It is just as prepared to shift Canberra around relative to Mel-
bourne and Sydney, as to move Perth. It makes more sense to give
reduced weight to long distances, as is done by sammon() (MASS).
            A: Using Classical MDS                               B: Using Sammon Scaling
                                ●                                                    ●
                                             ●                                                           ●
                       ●                                                    ●
                                   ●                                                    ●
                                                    ●                                                                ●
                 ●                                                   ●
                                                  ●                                                               ●
                                       ●        ●                                               ●              ●
                                            ●                                                           ●
                                                                              Figure 9.15: In Panel A, Figure 9.14
    Figure 9.15 shows side by side the overlays of the “maps” that re-        has been linearly transformed, to give
                                                                              a best fit to a map of Australia. Each
sult from the different ordinations, onto a physical map of Australia.
                                                                              city moves as shown by the line that
Panel A shows the result for classical multi-dimensional scaling.             radiates out from it. Panel B is the
Panel B does the same, now for the result from Sammon scaling.                equivalent plot for Sammon scaling.

196    learning and exploring r
Notice how Brisbane, Sydney, Canberra and Melbourne now main-
tain their relative positions better.
    The function oz::oz(), with default arguments, draws an out-
line of the coast of Australia, with state boundaries shown. Argu-
ments are available that can be used to limit what is shown (e.g. the
NSW and Victorian states only). To see the code for the overlays
onto the map of the Australian coast, source the file that has the code
for the figures of this chapter, and type:
fig9.15A
fig9.15B
    The exercise can be repeated for multidimensional scaling
(MDS). MDS preserves only, as far as possible, the relative dis-
tances. A starting configuration of points is required. This might
come from the configuration given by cmdscale(). For the sup-
plementary figure supp9.1() that shows the MDS configuration,
however, we use the physical latitudes and longitudes.
    To show this figure, source the file, if this has not been done
previously, that has the code for the figures of this chapter. Then
type:
supp9.1 ()
9.6      Maps, map overlays, and spatial analysis
Extensive information is available both in vignettes included with R
package, and on online. Code that is provided with the vignettes can
be used to recreate the maps.
   Lovelace et al.(2014) is a tutorial overview.
   The mapmisc vignette "Overview of mapping with mapmisc"
   shows a number of maps that illustrate some of the possibilities.
   Helpful sources of information on the relevant R data structures
   are the sf vignette "Simple Features for R" and the tmap vignette
   "tmap in a nutshell."
   Detailed information on relevant R packages and abilities is
   available under Spatial on the R Task Views web page (http:
   //cran.ms.unimelb.edu.au/web/views/Spatial.html).
   See articles in the Journal of Statistical Software special volume
   https://www.jstatsoft.org/issue/view/v063 (Volume 6e3, 2015.)
References
   Cowpertwait and Metcalfe 2009. Introductory Time Series with R.
   Springer.
   Hyndman et al. 2008. Forecasting with Exponential Smoothing:
   The State Space Approach. 2nd edn.

                                                             a miscellany of models & methods 197
Lovelave and Cheshire 2014. Introduction to visualising spa-
tial data in R. National Centre for Research Methods Work-
ing Papers, 14(03). Retrieved from https://github.com/
Robinlovelace/Creating-maps-in-R.
Taleb 2004. Fooled By Randomness: The Hidden Role Of Chance
In Life And In The Markets. Random House, 2ed.
[Has insightful comments on the over-interpretation of phenomena
in which randomness is likely to have a large role.]

198 learning and exploring r
10
Brief Notes on Text Mining

200    learning and exploring r
    A first step is to load the tm package. This is designed for work-
ing with a corpus — corpus is the name for a collection of docu-
ments.
library (tm)
10.1       Creation of a Volatile Corpus
The data used is from three text files, stored in the DAAGviz direc-   A pdf to text converter has taken the
tory tree. They hold text from the respective chapter ranges 1 - 5, 6  pdf for this document, and extracted
- 7, and 8 - 9 of an older version of this present document. We show   the three chapter ranges into the
two ways to use it to form a corpus. The first breaks the process      respective files ch1-5prelims.txt,
                                                                       ch6-7data.txt, and ch8-9graphics.txt.
down into detailed steps, while the second uses a much terser and
summary approach. The resultant corpus is volatile, so described
because stored in the workspace. Unless saved separately or as part
of the workspace, it will disappear at the end of the session.
Detailed steps
First create paths to the files, and check that they seem correct:
## Create paths to the text files , stored in the
## subdirectory "texts" of the DAAGviz package.
txdir <- system.file ("texts", package =" DAAGviz ")
dir(txdir , pattern =".txt$")
[1] "data6 -7. txt"           "graphics8 -9. txt" "prelims1 -5. txt"
txfiles <- dir(txdir , pattern =".txt$", full.names =TRUE)
    The following brings the first of these files into the workspace,
with one text string per line. The separate text strings are then col-
lapsed into a single character vector, with spaces at the end of each
line:
## Input first file , with one text string per line
tx1 <- readLines ( txfiles [1], encoding ="UTF-8", warn=FALSE )
## Join the separate text strings end to end
tx1 <- paste(tx1 , collapse =" ")
    Repeat this process for files 2 and 3:
tx2   <-  readLines ( txfiles [2],     encoding ="UTF-8", warn=FALSE )
tx2   <-  paste(tx2 , collapse ="      ")
tx3   <-  readLines ( txfiles [3],     encoding ="UTF-8", warn=FALSE )
tx3   <-  paste(tx3 , collapse ="      ")
    Now bring the three text strings together into a corpus:
txcorp <- Corpus ( VectorSource (c(tx1 , tx2 , tx3 )))

                                                                      brief notes on text mining        201
Creation of a corpus using DirSource()
                                                                      The call to tm_map() is a mech-
The following creates a directory source:                             anism for marking the document
dirSource <- DirSource ( directory =txdir ,                           as UTF-8. The pdf to text con-
                              pattern =".txt$")                       verter creates UTF-8 documents.
                                                                      The tokenizer scan_takenizer
    Now create the corpus. The text will be input from the files that then calls scan(), but without
were identified, within the specified directory doc:                  marking the document that results
                                                                      as UTF-8, as required for use of
toUTF8 <- function (x) iconv(x, to="UTF-8",                           termDocumentMatrix() or
                                    sub = "byte")                     termFreq().
txcorp <- Corpus ( dirSource )
txcorp <- tm_map (txcorp ,
      content_transformer ( toUTF8 ))
Next steps
A common starting point for further work is a term by document
matrix. For this, use TermDocumentMatrix(). Or if a document by
term matrix is required, use DocumentTermMatrix()
    Pre-processing steps prior to creating such a matrix may include
stripping away stopwords, elimination of white space, and conver-
sion to lower case. These can be performed in the process of creating
a term document matrix, thus:
ctl <- list( removePunctuation = list( preserve_intra_word_dashes = FALSE),
                 removeNumbers = TRUE ,
                 stopwords =c( stopwords ("SMART"), "[1]"),
                 wordLengths =c(3, Inf ))
tx.tdm <- TermDocumentMatrix (txcorp , control =ctl)
Notice the identification of [1], which appears quite frequently
in the R output, as a stopword. This omits it from the list of terms.
Closer investigation would reveal other issues, most because the
default tokenizer1 is not designed to handle R code and output.       1
                                                                        See help(termFreq) for an
    Stopwords are words that are likely to be uniformative for pur-   example of a user-supplied tokenizer.
poses of comparing text content. The function tm::stopwords()
accepts the arguments kind="en", which gives a relatively re-
stricted list of English stopwords, or kind="SMART" which gives a
much more extensive list. See ?tm::stopwords for details of non-
English stopword lists that are immediately available. The following
will give an idea of the sorts of words that are in the two lists:
## First few stopwords in the "en" set
sort( stopwords ())[1:5]
[1] "a"          "about" "above" "after" "again"
## First few stopwords in the "SMART" set
stopwords ('SMART ')[1:5]
[1] "a"          "a's"     "able"   "about" "above"

202    learning and exploring r
## Stopwords in "SMART" but not in "en"; first 10
stopwords ("SMART")[! stopwords ("SMART")%in% stopwords ()][1:10]
  [1] "a's"            "able"                                                                      " according "
" accordingly " " across "
  [6] " actually "     " afterwards "                                                              "ain 't"
" allow "        " allows "
   Now list terms that occur 100 or more times:
findFreqTerms (tx.tdm , 100)
 [1] "code"                                             "data"        " figure "                                                                     "file"                                           "frame"
 [6] " function "                                       " functions " " graphics "                                                                   " objects "                                      " package "
[11] "plot"
Wordclouds
First load the wordcloud package:
library ( wordcloud )
   Figure 10.1 shows wordcloud plots for the first (chapters 1-5),
second (6-7) and third (8-9) documents in the corpus.                                                                                                                                                          Figure 10.1: Wordcloud plots are A:
                                                                                                                                                                                                               for the words in Chapters 1 - 5; B: 6 -
                                                                                                                                                                                                               7; and C: 8 - 9.
      A: Chapters 1 − 5                                                                         B: Chapters 6 − 7                                                                                         C: Chapters 8 − 9
                                                                                                                                                             quickplot
                                            manipulation                                                                                                simulated                                                                      commander installation
                                      section ucbadmissions                                                                                                  analysis
                                                                                                                                                                                                                                       menu scatterplotscales
                                                                                                                                      weight
                                                       graphics                                                                                shape gph
                                    array date dierent                                                                                         note point argument                                                               names
                                  argument                      element                                                                                                                                                                      command range
                                   character                        files                                                                      set                  display plotting                                 shows frame files rstudioinformation
                                                                                                                                                             data
                       extract
                                                                                                                          possum
                                                                                                                                                     size
                       form column columns                                                                                                                                                                                         figure directoryobject
                                                                        country                                                                                          axis add                                 document
                       row         matrix   functions information
                                                          rows
                                                                default     daag
                                                                                                                           create
                                                                                                                         print text   lattice                        plots          panels   sport
                                                                                                                                                                                                                      result
                                                                                                                                                                                                                    enter
                                                                                                                                                                                                                                  install
                                                                                                                                                                                                                                     package note
                                                                                                                                                                                                                                                                 travelbooks
              mango      levels file                                                                visualisation
                                                                                                                                       figure                                                                               function
                     year
            format false           objects      page   frame values          read
                                                                                                             type         code
                                                                                                                functions base                                       true points                                  panel       plots
                                                                                                                                                                                                                                plot workspace
                                                                                                                                                                                                                                                                type width
                               data
                                                                                                                                                                                                               analysis
                                                                                                                                                                                                                                                                     save
              web
                                                                                                                                                                                                                                                                            library
                                                                            set
                                                                              apply                 graphs
                         vectors
                                                                                                                                                                                                                                                                volume
            returns
                                                                                                                                graphics                                                                                               data
                                                                                                                labels                                                                  false
              sapply                                                                  include                             par                                                                                   weight click
                                                                                                                                                                                 dierent                                                                                 left         road
                                                                                                         height xyplot
           length time                                                                                                                                                                                          columns
                                                                                                                          sex
         travelbooks
                sum
                                                                            input
                                                                             nas logical
                                                                                                                                                                                 show
                                                                                                                                                                                      layer                     default list                                             image
                                                                                                                          lines click                                                                                                       distance
                factor
          packages   total
               working             function elements          names
                                                                                methods
                                                                              tables                                     graph
                                                                                                                           object
                                                                                                                                                plot panel geom
                                                                                                                                                            page
                                                                                                                                                                                                               input
                                                                                                                                                                                                                 set  objects
                                                                                                                                                                                                                user rdata
                                                                                                                                                                                                                              code year start
                                                                                                                                                                                                                              column
                                                                                                                                                                                                                 search packages
                                                                                                                                                                                                                                        filesummary
                                                                                                                                                                                                                                     time values
                                                                                                                                               function
                                                                                                                                                                                      distribution
                                               list note order                                                                                          color                                                                     line log daag
                          meuse table true package text
                       factors                                                                                           key line                                           call log
                                                                                                                                                                                      colors
                                                                                                                                                                                                                     include
                                         lists
                         frames vector object      code
                                                                                                                         region normal
                                                                                                                                                 ggplot
                                                                                                                                                     density  daag
                                                                                                                                                                                             motion
                                                                                                                                                                                                                            guide  working graphics icon
                                                                                                                                                                                                                                                      path
                                         number                                                                                columns                                                                                         cran
                             class
                       calculations      analysis matrices numeric                                                               year settings default trellis                                                                 base    session model html
                          summary
                                                                                                                                  numeric package row
                                                                                                                                                      palette                                                                   text   functions     visualisation
                                            visualisation                                                                                                        colchart                                                               markdown   window
                                                                                                                                                supplied symbols country                                                                     change
                                                                                                                                                                                                                                         windows
                                                                                                                                                       bodywt
Code for the plots is:
pal <- brewer.pal (6, "Dark2")
fnam1 <- as.matrix ( tx.tdm )[ ,1]
wordcloud ( names(fnam1), fnam1 , max.words =80, colors =pal[-1],
            random.order =FALSE , scale=c(8.5 ,.5))
mtext (side =3, line =3.5 , "A: Chapters 1 - 5", adj =0, cex =1.8)
fnam2 <- as.matrix ( tx.tdm )[ ,2]
wordcloud ( names(fnam2), fnam2 , max.words =80, colors =pal[-1],
            random.order =FALSE , scale=c(4.5 ,.5))
mtext (side =3, line =3.5 , "B: Chapters 6 - 7", adj =0, cex =1.8)
fnam3 <- as.matrix ( tx.tdm )[ ,3]
wordcloud ( names(fnam3), fnam3 , max.words =80, colors =pal[-1],
            random.order =FALSE , scale=c(6.0 ,.5))
mtext (side =3, line =3.5 , "C: Chapters 8 - 9", adj =0, cex =1.8)

                                                                           brief notes on text mining          203
Less frequent words will be lost off the edge of the plot if the size       All three panels used a 5in by 5in
of the graphics page is too small relative to the pointsize. Note the       graphics page, with a pdf pointsize of
different scaling ranges used in the three cases, with the large scaling    12.
range for Panel B (scale=c(10,.5)) used to accommmodate a
frequency distribution in which one item (‘data’) is a marked outlier.
10.2       Creation of a Corpus from PDF Files
The tm package has functions that can be used to create readers for
several different types of files. Type getReaders() to get a list.
Note in particular readPDF() that can be used with pdf files. See
?tm::readPDF for details of PDF extraction engines that may be
used. The default is to use the Poppler PDF rendering library as
provided in the pdftools package.
    The following sets the path to the directory pdf in the package
DAAGviz that holds the pdf files for (possibly, an older version) of
the four ranges of chapters of the present text:
uri <- system.file ("pdf", package =" DAAGviz ")
## Check names of files in directory
dir(uri)
[1] "ch1 -3. pdf" "ch4 -6. pdf" "ch7.pdf"           "ch8 -9. pdf"
    The corpus that has all three documents is, starting with the pdf
files, most easily created thus:
fromPDF <- Corpus ( DirSource ( directory =uri , pattern =".pdf$"),
                       readerControl =list( reader =readPDF ,
                       PdftotextOptions = " -layout "))
makeChar <- function (x)gsub("[^[: alnum :][: blank :]]","" , x, ignore.case = TRUE)
fromPDF <- tm_map (fromPDF , content_transformer ( makeChar ))
    Create the term-document matrix thus:
txx.tdm <- TermDocumentMatrix (fromPDF , control =ctl)
10.3       Document Collections Supplied With tm
Several document collections are supplied with the package, as text
files or as XML files. To get the path to the directories where these
document collections are stored, type
( pathto <- system.file ("texts", package ="tm"))
[1] "/ Library / Frameworks /R. framework / Versions /3.5/ Resources / library /tm/texts"
dir( pathto )
[1] "acq"                       "crude"                  " custom .xml"
[4] " loremipsum .txt"          " rcv1_2330 .xml"        "reuters -21578. xml"
[7] "txt"

204   learning and exploring r
The subdirectory acq has 50 Reuters documents in XML format,
crude has the first 23 of these, and txt has a small collection of 5
text documents from the Roman poet Ovid. These can be accessed
and used for experimenation with the abilities provided in tm, as
required.
    The following are the names of the five Ovid documents:
dir( paste (pathto , "txt",sep="/"))
[1] " ovid_1 .txt" " ovid_2 .txt" " ovid_3 .txt" " ovid_4 .txt" " ovid_5 .txt"
    The following brings these documents into a volatile corpus, i.e.,
a corpus that is stored in memory:
(ovid <-
    Corpus ( DirSource (paste(pathto , "txt", sep="/")),
             readerControl =list( language ="lat")))
<<SimpleCorpus >>
Metadata : corpus specific : 1, document level ( indexed ): 0
Content : documents : 5

11
∗
  Leveraging R Language Abilities

206    learning and exploring r
11.1      Manipulation of Language Constructs
Language structures can be manipulated, just like any other object.
Below, we will show how formulae, expressions, and argument lists
for functions, can be pasted together.
11.1.1     Manipulation of Formulae
Formulae are a key idea in R, though their implementation is incom-
plete. They are widely available for specifying graphs, models and
tables. Details will be given below.
Model, graphics and table formulae
We demonstrate the construction of model or graphics formulae
from text strings. The following plots the column mpg, from the data
frame mtcars (MASS), against disp:
plot(mpg ~ disp , data= mtcars )
The following gives the same result:
yvar <- "mpg"
xvar <- "disp"
form <- as.formula (paste(yvar , "~", xvar ))
plot(form , data= mtcars )
With this second approach, yvar and xvar can be arguments to a
function, and xvar and yvar can be any pair of columns. A suitable
functionis:                                                          The data frame mtcars has 11
plot.mtcars <- function (xvar="disp", yvar="mpg"){                   columns from which the two axes
      form <- as.formula (paste(yvar , "~", xvar ))                  for a scatterplot might be chosen:
      plot(form , data= mtcars )                                     names ( mtcars )
}
                                                                      [1]   "mpg"    "cyl"
    The following calls the function with xvar="hp" and               [3]   "disp"   "hp"
yvar="mpg":                                                           [5]   "drat"   "wt"
                                                                      [7]   "qsec"   "vs"
plot.mtcars (xvar="hp", yvar="mpg", data= mtcars )                    [9]   "am"     "gear"
                                                                     [11]   "carb"
11.1.2     Extraction of names from a formula
Use the function all.vars() to extract the variable names from a
formula, thus:
all.vars (mpg ~ disp)
[1] "mpg"     "disp"
    As well as using a formula to specify the graph, the following
gives more informative x- and y-labels:
plot.mtcars <- function (form = mpg ~ disp ){
    yvar <- all.vars (form )[1]
    xvar <- all.vars (form )[2]

                                                                   ∗ leveraging r language abilities 207
     ## Include information that allows a meaningful label
     mtcars.info <-
       c(mpg= "Miles/(US) gallon ",              cyl= " Number of cylinders ",
          disp= " Displacement ( cu.in. )",      hp= "Gross horsepower ",
          drat= "Rear axle ratio",               wt= " Weight (lb/1000)",
          qsec= "1/4 mile time",                 vs= "V/S",
          gear= " Number of forward gears",
          carb= " Number of carburettors ",
          am= " Transmission (0 = automatic , 1 = manual )")
     xlab <- mtcars.info [xvar]
     ylab <- mtcars.info [yvar]
     plot(form , xlab=xlab , ylab=ylab)
}
11.2       Function Arguments and Environments
11.2.1     Extraction of arguments to functions
A simple use of substitute() is to extract a text string representa-
tion of a function argument:
plot.mtcars ` <-
   function (x = disp , y = mpg ){
      xvar <- deparse ( substitute (x))
      yvar <- deparse ( substitute (y))
      form <- formula (paste(yvar , "~", xvar ))
      plot(form , xlab=xvar , ylab=yvar , data= mtcars )
   }
11.2.2     Use of a list to pass parameter values
The following are equivalent:
    Use of do.call() allows the parameter list to be set up in ad-
vance of the call. The following shows the use of do.call() to
achieve the same effect as mean(possum$totlngth):
do.call ("mean", list(x= possum $ totlngth ))
This makes more sense in a function, thus:
`average ` <-
   function (x= possum $chest , FUN= function (x)mean(x)){
      fun <- deparse ( substitute (FUN ))
      do.call (fun , list(x=x))
   }
    This allows, e.g., the following:
average ()
average (FUN= median )
    Note also call(), which sets up an unevaluated expression. The
expression can be evaluated at some later time, using eval(). Here
is an example:
mean.call <- call("mean", x=rnorm (5))
eval( mean.call )

208    learning and exploring r
[1] 0.06572
eval( mean.call )
[1] 0.06572
Notice that the argument x was evaluated when call() was
evoked. The result is therefore unchanged upon repeating the call
eval(mean.call). This can be verified by printing out the expres-
sion:
mean.call
mean(x = c ( -0.654951646429221 , -0.679896362331012 , 0.979408998110931 ,
1.01194857431004 , -0.327894174927872))
11.2.3     Function environments
                                                                       1
                                                                         Additionally, frames may be referred
Every call to a function creates a frame that contains the local vari-
                                                                       to by name. Use
ables created in the function. This combines with the environment
in which the function was defined to create a new environment. The        sys.nframe() to get the number
global environment, .Globalenv, is the workspace. This is frame 0.        of the current evaluation frame
The frame number increases by 1 with each new function call.1             sys.frame(sys.nframe()) to
                                                                          identify the frame by name
[1] "test"                                                                sys.parent() to get the number
                                                                          of the parent frame.
    Here is code that determines, from within a function, the function
name:                                                                  Now change the function name to
test <- function (){                                                   newtest():
  fname <- as( sys.call ( sys.parent ())[[1]] ,                        newtest <- test
                 " character ")                                        newtest ()
   fname
}                                                                      [1] " newtest "
test ()
[1] "test"
    When a number of graphs are required, all for the one dociment,
a sequential naming system, e.g., fig1(), fig2(), . . . , may be
convenient, with matching names fig1.pdf, fig2.pdf, . . . for the re-
spective graphics files. The following function gf() generates the
file name automatically, for passing to the graphics device that is
opened.
gf <-
      function (width =2.25 , height =2.25 , pointsize =8){
           funtxt <- sys.call (1)
           fnam <- paste0 (funtxt , ".pdf")
           print( paste0 (" Output is to the file '",
                           fnam , "'"))
           pdf(file=fnam , width=width , height =height ,
                pointsize = pointsize )
      }

                                                                        ∗ leveraging    r language abilities      209
      Now create a function that calls gf():
 fig1 <- function (){
       gf ()                 # Call with default parameters
       curve (sin , -pi , 2*pi)
       dev.off ()
 }
 fig1 ()
 Output goes to the file fig1.pdf. For a function fig2() that calls
 gf(), output goes to the file fig2.pdf, and so on.
 Scoping of object names
 Local objects are those that are created within the body of the func-
 tion. Objects that are not local and not passed as parameters are first
 searched for in the frame of the function, then in the parent frame,
 and so on. If they are not found in any of the frames, then they are
 sought in the search list.
 11.3       Creation of R Packages
 Much of the functionality of R, for many important tasks, comes                The RStudio documentation includes
 from the packages that are built on top of base R. Users who make              a large amount of information on
 extenive use of R may soon find a need to document and organize                package preparation, testing, and
 both their own functions and associated data. Packages are the pre-            submission to CRAN or other reposi-
                                                                                tories. Click on
 ferred vehicle for making functions and/or data available to others,             Help | RStudio Docs
 or for use by posterity.                                                       and look under
      Organisation of data and functions into a package may have the              PACKAGE DEVELOPMENT.
 following benefits:
• Where the package relates to a project, it should be straightfor-
    ward to return to the project at some later time, and/or to pass the
    project across to someone else.
• Attaching the packages give immediate access to functions, data
    and associated documentation.
• Where a package is submitted to CRAN (Comprehensive R
    Archive Network) and used by others, this extends opportuni-
    ties for testing and/or getting contributions from other work-
    ers. Checks that are required by CRAN ensure that the package
    (code and documentation) meets certain formal standards. CRAN
    checks include checks for consistency between code and docu-
    mentation, e.g., in names of arguments. Code must conform to
    CRAN standards.
 Namespaces
 Packages can have their own namespaces, with private functions
 and classes that are not ordinarily visible from the command line, or

210    learning and exploring r
from other packages. For example, the function intervals.lme()
that is part of the lme package must be called via the generic func-
tion intervals().
11.4       S4 Classes and Methods
There are two implementations of classes and methods – those of
version 3 of the S language (S3), and those of version 4 of the S
language (S4). The methods package supplies the infrastructure for
the S4 implementation. This extends the abilities available under S3,
builds in checks that are not available with S3, and are is conducive
to good software engineering practice. The Bioconductor bundle of
packages makes extensive use of S4 style classes and methods. See
help(Methods) (note the upper case M) for a brief overview of S4
classes and methods.
    Where available, extractor functions should be used to extract
slot contents. If this is not possible, use the function slotNames()
to obtain the names of the slots, and either the function slot() or
the operator @ to extract or replace a slot. For example:
library (DAAG)
library (lme4)
hp.lmList <- lmList (o2 ~ wattsPerKg | id ,
                            data= humanpower1 )
slotNames ( hp.lmList )
[1] ". Data"          "call"          "pool"         " groups "
[5] " origOrder "
    The following are alternative ways to display the contents of the
"call" slot:
hp.lmList@call
lmList ( formula = o2 ∼ wattsPerKg | id , data = humanpower1 )
slot(hp.lmList , "call")
lmList ( formula = o2 ∼ wattsPerKg | id , data = humanpower1 )
    Where available, use an extractor function to extract some rele-
vant part of the output, thus:
coef( hp.lmList )
   ( Intercept ) wattsPerKg
1         -1.155           15.35
2          1.916           13.65
3        -12.008           18.81
4          8.029           11.83
5         11.553           10.36

                                                                     ∗ leveraging r language abilities 211
     For moderately simple examples of the definition and use of S4
classes and methods, see help(setClass) and help(setMethod).
     How is it possible to identify, for a particular S4 class, the
function that implements a method. To identify the function
in the sp package that implements the spplot method for
SpatialGridDataFrame objects, type:
library (sp)
selectMethod (" spplot ",
                   signature =" SpatialGridDataFrame ")
Method Definition :
function (obj , ...)
spplot .grid(as(obj , " SpatialPixelsDataFrame "), ...)
<bytecode : 0x103380db0 >
<environment : namespace :sp >
Signatures :
            obj
target " SpatialGridDataFrame "
defined " SpatialGridDataFrame "
This makes it clear that the spplot method for
SpatialGridDataFrame objects calls the function
spplot.grid(). To display the function spplot.grid(), type:
getFromNamespace (" spplot.grid ", ns="sp")
Alternatively, use the less targeted
getAnywhere("spplot.grid").
     Use showMethods() to show all the methods for one or more
classes of object. For example:
showMethods ( classes ='SpatialGridDataFrame ')
11.5       Summary
   Language structures (formulae and expressions) can be manipu-
   lated, just like any other object.
   R uses formulae to specify models, graphs and (xtabs() only)
   tables.
   The expression syntax allows the plotting of juxtaposed text
   strings, which may include mathematical text.
   All evaluations have an environment that determines what objects
   will be visible. This can be especially important for the writing
   and testing of functions.
   Packages are the preferred vehicle for making substantial collec-
   tions of functions and/or data available to others, or for use by
   posterity. They facilitate re-use of code and enforce checks for

212  learning and exploring r
  common inconsistencies. They make it straighforward to enforce
  high standards of documentation.
  Many of R’s more recent packages use S4 classes and methods.
  Extractor functions are available that will extract the most com-
  monly required types of information.

A
∗
  R System Configuration

214   learning and exploring r
A.1      Fine tuning the installation
The information in this section is relevant mainly to users of the
Windows or Mac GUI, rather than RStudio. With RStudio, work
is typically organized by projects, albeit usually with a different
working directory for each different project.
                                                                         Figure A.1: This shows the sequence
                                                                         of clicks needed to display the page
The working directory: This is best set to a directory that is con-      from which the Start in: directory can
                                                                         be set. This will then be the working
venient for storing files connected with the project on which you        directory in which R will start.
are currently working. When starting a new project, it to start a new
working directory.
    Under Windows, each R icon has associated with it a working
directory. Right click the icon. Then click on Properties (at the bot-   Under MacOS X, dragging a file onto
tom of the list), thus displaying the Properties submenu. Make sure      the R icon will start R in the directory
that Shortcut is selected. Set the Start in: directory to the working    that contains the file. Alternatively, in
                                                                         a terminal window, type for example:
directory in which you want R to start. See Figure A.1.                    open -a R ∼/r/course
                                                                         This will start R with ∼/r/course as
Multiple (MDI) or Single (SDI) display interface for Windows:            working directory.
One way to get R to start in SDI mode is to add sdi, with a pre-
ceding space, to the target that is shown in Figure A.1.
A.2      Setting the Default CRAN Mirror
The default CRAN mirror can be set from the Windows or MacOS X
R GUI.
Windows: Click on Packages | Set CRAN mirror . . .                       Figure A.2: This shows the R Win-
                                                                         dows GUI menu option that can be
                                                                         used to set the CRAN mirror. If not
                                                                         set, the user is asked to nominate the
                                                                         mirror whenever one or more pack-
                                                                         ages are downloaded or updated from
                                                                         CRAN.
A.3      R system information
If access is needed to files that are in the R installation tree, obtain
the path, thus:

                                                                         ∗r system configuration          215
MacOS X: Click on R | Preferences                                     Figure A.3: In a factory fresh
                                                                      MacOS X installation, pack-
                                                                      ages are downloaded from
                                                                      http://cran.r-project.org. The
                                                                      preferences pages allow the setting
                                                                      of a wide variety of other preferences
                                                                      also.
Click on
Preferences. Then
click, if necessary,
on Startup to dis-
play the startup
options, shown in the
Window on the right.
R.home ()
[1] "C:/ PROGRA∼1/R/R -32∼1.2"
When using Microsoft Windows systems, a more intelligible result is
obtained by wrapping the function call in normalizePath(), thus:
                                                                      If the winslash="/" argument is
                                                                      omitted, double backslashes are used
normalizePath ( R.home (), winslash ="/")
                                                                      to separate names in the directory tree.
[1] "C:/ Program Files/R/R -3.2.2"
    To see a list of all R system variables, type
names ( Sys.getenv ())
These can then be inspected individually.
Sys.getenv (" R_HOME ")
[1] "C:/ PROGRA∼1/R/R -32∼1.2"
See help(Rprofile) for details on how to set system variables.
    The following can be used to get the path to files that come with
an installed package:
system.file ("misc/ ViewTemps.RData ", package ="DAAG")
[1] "C:/ Users/JohnM/ Documents /R/win - library /3.2/ DAAG/misc/ ViewTemps .RData"
A.4       Repositories additional to CRAN
Figure A.4 shows a list of available repositories, as given by the
Windows GUI, after clicking on: Packages|Set repositories.

216    learning and exploring r
To select more than one repository, hold down the Windows key, or
under MacOS X the command key, while left-clicking.
    To use the command line to view a list of all repositories known
to the R installation, and possibly to select one or more, type:
setRepositories ()
                                                                          Figure A.4: List of available reposito-
Alternatively, use the argument ind, in a call to                         ries, as given by the Windows GUI.
setRepositories(), to specify repositories. For example:
setRepositories (ind =1:2)
A.5      Running R in Batch Mode
                                                                          For Windows 64-bit R
On the command line (for Windows, Unix, Linux, . . . ), enter             (2.12.0 or later), the directory
                                                                          R_HOME\bin\x64 must be in the
R CMD BATCH infile outfile                                                system path. For Windows 32-bit R,
    Here infile is a file that holds R commands. See help(BATCH)          replace x64 by i386. For determining
                                                                          R_HOME, see above.
for further information. The path to the R executable must be in-
cluded in the system path variable. The R FAQ for Windows has
information on setting environment variables.
A.6      The R Windows installation directory tree
The R system can be installed into any directory where the installer
has write permission. The hierarchy of directories and files that form
the R installation is termed the directory tree. Likely defaults for the
directory tree of an R-3.2.2 Windows installation are:
    C:\PROGRAM FILES\R\R-3.2.2\
or, for example,
    C:\Documents and Settings\Owner\My Documents\R\R-3.2.2\
    The directory tree is relocatable. It can be copied to a flash drive
or CD or DVD, which can be then be used to run R. Thus, copy              For running R from a DVD (or CD),
the installation tree with root at C:\Program Files\R\R-3.2.2\            be sure to change the Start In directory
across to D: to become a tree with root D:\R-3.2.2\. The executable       to a directory that is writable.
(binary) D:\R-3.2.2\bin\x64\Rgui.exe can then be used to start
a 64-bit R session. To verify that this works, click on its icon. For
32-bit R, replace x64, where it appears in the path, by i386.
A.7      Library directories
Packages that the user installs can go anywhere on the system. It is
not necessary to install them into the library directory that is in the R
directory tree.
    An R session that is running from one installation, perhaps the
main installation on the hard drive, can in principle access any com-
patible R library directory that is available. Thus, the following gives
access, from an R session that is started (e.g.) from the hard drive, to
to a library tree that is stored under D:\R-3.2.2:

                                                                              ∗r  system configuration            217
.libPaths ("D:/ R-3.0.2 / library ")
This might for example be the library tree from an R installation on a
DVD that has been placed in the D: drive.
    To avoid the need to type this each time a new session is started
in that working directory, create the following function:1                 1
                                                                             This function will then be saved
                                                                           as part of the default workspace,
.First <- function () .libPaths ("D:/ R-3.0.2 / library ")                 and executed at the start of any new
                                                                           session in that directory.
Alternatively, the function can be placed in a startup profile file, as
described in the next section.
    In moving to a new major version of R (e.g., from R-3.1.2 to R-
3.2.0), the library directory in the R installation tree is replaced. A
relatively painless way to update the new installation library direc-
tory is to copy packages across from the former installation library
directory to the new library directory, being careful not to replace
any existing packages in that directory. (If of course packages are in
a separate user directory, no moving is required.) Then, from within
R, type:
update.packages ( checkBuilt =TRUE , ask=FALSE)
## Check package status :
summary ( packageStatus ())
    Use of a .Renviron file in the home directory is a further possi-
bility. This can be conveniently done from within R:2                      2
                                                                             This follows a suggestion from Bill
                                                                           Venables.
cat('LIB1 ="C:/Users/owner/R/ win-library /2.15 "\n',
      file = "~/ .Renviron ", append = TRUE)
cat('LIB2 ="C:/Users/owner/R/ win-library /2.14 "\n',
      file = "~/ .Renviron ", append = TRUE)
cat('LIB1 =" R_LIBS_USER =${LIB1 };${LIB2 }\n',
      file = "~/ .Renviron ", append = TRUE)
A.8      The Startup mechanism
Various system variables are set at startup, and a number of packages
are attached. The details can be controlled at an installation level, at
a user level, and at a startup directory level. If started in the standard
manner, the ’R_PROFILE’ environment variable3 can be used to               3
                                                                             If this is unset, R searches for a file
give the name of a site-wide profile file. See help(Startup) for           R_HOME/etc/Rprofile.site. ’Factory-
                                                                           fresh’ installations will not have such
details.
                                                                           a file. Code is sourced into the base
    R next searches at startup for a file called .Rprofile in the current  package, before other packages are
directory or in the user’s home directory (in that order).4 Such a         loaded.
                                                                           4
                                                                             Alternatively, the
.Rprofile file can for example define a .First() and/or a .Last()
                                                                           ’R_PROFILE_USER’ environment
function.                                                                  variable can be used to set the name of
    A user (or site-wide) profile file might for example include the       a user profile file.
following statements:
options ( papersize ="a4")
options ( editor =" notepad ")               # Preferred editor
options ( pager=" internal ")
options ( tab.width = 4)

218  learning and exploring r
options ( width = 120)              # Wider console line
options ( graphics.record =TRUE)
options ( show.signif.stars =FALSE) # Banish the stars
options ( prompt ="? ")             # Use ' ? ' as prompt
options ( continue =" ")            # Blank continuation
.libPaths ("C:/ my_R_library ")     # Add library to path.

B
The R Commander Graphical User Interface

 220    learning and exploring r
      To start the R commander, start R and enter:
                                                                        At startup, the R Commander checks
 library ( Rcmdr)                                                       whether all packages are available
                                                                        that are needed for the full range
 This opens an R Commander script window, with the output window        of features. If some are missing,
 underneath. This window can be closed by clicking on the × in the      the R commander offers to install
 top left corner. If thus closed, enter Commander() to reopen it again  them. (This requires a live internet
 later in the session.                                                  connection.)
 From GUI to writing code: The R commander displays the code            The code can be run either from the
                                                                        script window or from the R console
 that it generates. Users can take this code, modify it, and re-run it.
                                                                        window (if open).
 The active data set: There is, at any one time, a single “active”
 data set. Start by clicking on the Data drop-down menu. To select or
 create or change the active data set, do one of the following:
• Click on Active data set, and pick from among data sets, if any, in
    the workspace.
• Click on Import data, and follow instructions, to read in data from
    a file. The data set is read into the workspace, at the same time
    becoming the active data set.
• Click on New data set . . . , then entering data via a spreadsheet-
    like interface.
• Click on Data in packages, then Read Data from Package. Then
    select an attached package and choose a data set from among
    those included with the package.
• A further possibility is to load data from an R image (.RData)
    file; click on Load data set . . .
 Creating graphs: To draw graphs, click on the Graphs drop-down
                                                                        1
 menu. Then, among other possibilities:                                   This uses scatterplot() (car
                                                                        package), which in turn uses functions
• Click on Scatterplot . . . to obtain a scatterplot.1                  from base graphics.
• Click on X Y conditioning plot . . . for lattice scatterplots and
    panels of scatterplots.
• Click on 3D graph to obtain a 3D scatterplot.2                        2
                                                                          This uses the R Commander function
                                                                        scatter3d() that is an interface to
                                                                        functions in the rgl package.
 Statistics (& fitting models): Click on the Statistics drop down
 menu to get submenus that give summary statistics and/or carry out
 various statistical tests. This includes (under Contingency tables)
 tables of counts and (under Means) One-way ANOVA. Also, click
 here to get access to the Fit models submenu.
 *Models: Click here to extract information from model objects
 once they have been fitted. (NB: To fit a model, go to the Statistics
 drop down menu, and click on Fit models).

                                                             the r commander graphical user interface 221
Other GUIs for R
The rattle GUI, aimed broadly at “data mining” (data manipulation,
regression, classification and clustering) applications, is a powerful
and sophisticated system. It has a number of features that make it
attractive for use in standard data mining applications. Note also
JGR (Java Graphics for R) and pmg (Poor Man’s GUI).

222 learning and exploring r
C
Color Versions of Selected Graphs

224 learning and exploring r
Annotated Motion Chart
                             Figure C.1: Snapshot of a motion
                             chart, with annotation that identifies
                             selected chart features that can be
                             modified interactively.

                                                                                                         color versions of selected graphs               225
                                                                                                                  The name “coxcomb” arose from a
Florence Nightingale’s Wedge Plot                                                                                 misreading of Florence Nightingale’s
                                                                                                                  Mortality of the British Army that was
Figure C.2 is a “wedge” plot that shows the mortality of British                                                  an annex to a larger official report. See
troops according to cause in the Crimean War over 1853-1853. It has                                               http://www.york.ac.uk/depts/
often been called a “coxcomb” plot – a name that suits this imagina-                                              maths/histstat/small.htm
tive form of graphical presentation.
                               A: Causes of Mortality in the Army in the East : Before          B: Causes of Mortality in the Army in the East : After
                                                                              Disease                                                          Disease
                                                 Jun 54      Jul 54                                              Jun 55       Jul 55
                        1000                                                  Other      1000                                                  Other
                        750
                                                                              Wounds     750
                                                                                                                                               Wounds
                                      May 54                            Aug 54                        May 55                             Aug 55
                        500                                                              500
                        250                                                              250
  Deaths per thousand
                                Apr 54                                        Sep 54            Apr 55                                          Sep 55
                           0                                                                0
                               Mar 55                                         Oct 54            Mar 56                                          Oct 55
                                      Feb 55                            Nov 54                        Feb 56                             Nov 55
                                                 Jan 55      Dec 54                                              Jan 56       Dec 55
                                                                                                                  Figure C.2: Deaths (per 1000 per
   Figure C.2 is used here to show abilities in ggplot2. The wedge                                                annum), up to and after the Sanitary
                                                                                                                  Commission’s visit in March 1855.
plot is not ideal for giving an accurate sense of the data. It is not
                                                                                                                  Areas, measured from the centres of
however easy to suggest an alternative that is clearly better.                                                    the common vertices, are proportional
                                                                                                                  to mortalities..
Code for the wedge plot                                                                                           1
                                                                                                                   Data are from the data frame
                                                                                                                  Nightingale in the HistData pack-
The url http://maths.anu.edu.au/~johnm/r/functions/
                                                                                                                  age. Subsection C.2 showed how to
wedgeORbubble.R.1 has code for the function wedgeplot() that                                                      create a dataset Crimean that is in a
was used for this plot. Note also the function gdot() that gives a not                                            convenient form for creating this plot.
entirely satisfactory alternative to the wedge plot.

226   learning and exploring r
Selected base graphics parameter settings
         A: Plot symbols and text; specify colors and/or character expansion; draw rectangle
          par(fig=c(0, 1, 0.415, 1))
           plot(0, 0, xlim=c(0, 13), ylim=c(0, 19), type="n")
           xpos <− rep((0:12)+0.5, 2); ypos <− rep(c(14.5,12.75), c(13,13))
           points(xpos, ypos, cex=2.5, col=1:26, pch=0:25)
           text(xpos, ypos, labels=paste(0:25), cex=0.75)
             0     ●1      2       3       4       5      6      7     8        9       ●10       11      12
            ●
            13     14     15     ●16      17      18    ●19     ●
                                                                20     ●
                                                                       21      22        23       24      25
           ## Plot characters, vary cex (expansion)
           text((0:4)+0.5, rep(9*ht, 5), letters[1:5], cex=c(2.5,2,1,1.5,2))
            a      b       c      d       e                                        above (3)
                                                                                         ●
           ## Position label with respect to point                      left (2) ●            ● right (4)
           xmid <− 10.5; xoff <− c(0, −0.5, 0, 0.5)
                                                                                         ●
           ymid <− 5.8; yoff <− c(−1,0,1,0)                                    below (pos=1)
           col4 <− colors()[c(52, 116, 547, 610)]
           points(xmid+xoff, ymid+yoff, pch=16, cex=1.5, col=col4)
           posText <− c("below (pos=1)", "left (2)", "above (3)", "right (4)")
           text(xmid+xoff, ymid+yoff, posText, pos=1:4)
           rect(xmid−2.3, ymid−2.3, xmid+2.3, ymid+2.3, border="red")
         B: Triangles or polygons, circles, and mathematical text
          par(fig=c(0, 1, 0.01, 0.40), new=TRUE)
           plot(0, 0, xlim=c(0, 13), ylim=c(0, 12), type="n")
           polygon(x=c(10.7,12.8,12), y=c(7.5,8,11), col="gray", border="red")
           ## Draw a circle, overlay 2−headed arrow (code=3)
           xcenter <− 11.7; ycenter <− 4; r=1.1
           symbols(x=xcenter, y=ycenter, circles=r,
                     bg="gray", add=TRUE, inches=FALSE)
           arrows(x0=xcenter−r, y0=ycenter, x1=xcenter, y1=ycenter,                            Area = πr 2
                   length=.05, code=3)
                                                                                               r
           ## Use expression() to add labeling information
           charht <− strheight("R")
           text(x=xcenter−r/2, y=ycenter−charht, expression(italic(r)))
           text(xcenter, ycenter+3.5*charht, expression("Area" == pi*italic(r)^2))
.
                                                                                  Figure C.3: This figure, intended to
                                                                                  accompany Section 7.1.2, demon-
                                                                                  strates the use of parameter settings to
Note that the function paste(), used in line 5 of Panel A, turns                  control various graphical features.
the vector of numerical values 0:12 into a vector of character
strings with elements "0", "1", ..., "12". An alternative to
paste(0:12) is as.character(0:12).

D
Bibliography
Begley, C. G. and Ellis, L. M., 2012. Drug development: Raise
  standards for preclinical cancer research. Nature, 483(7391):531–
  533.
Cowpertwait, P. S. P. and Metcalfe, A. V., 2009. Introductory Time
  Series with R. Springer New York.
Edwards, M. A. and Roy, S., 2017. Academic research in the 21st
  century: Maintaining scientific integrity in a climate of perverse
  incentives and hypercompetition. Environmental Engineering
  Science, 34(1):51–61.
Green, P. J.; Kirby, R.; and Suls, J., 1996. The effects of caffeine
  on blood pressure and heart rate: A review. Annals of Behavioral
  Medicine, 18(3):201–216.
Hyndman, R. J.; Koehler, A. B.; Ord, J. K.; and Snyder, R. D., 2008.
  Forecasting with Exponential Smoothing: The State Space Ap-
  proach. Springer.
Lovelave, R. and Cheshire, J., 2014. Introduction to visualising
  spatial data in r.
  https://github.com/Robinlovelace/
  Creating-maps-in-R
Prinz, F.; Schlange, T.; and Asadullah, K., 2011. Believe it or not:
  how much can we rely on published data on potential drug targets?
  Nature reviews Drug discovery, 10(9):712–712.
Stark, P. B. and Saltelli, A., 2018. Cargo-cult statistics and scientific
  crisis. Significance, 15(4):40–43.
Taleb, N. N., 2004. Fooled By Randomness: The Hidden Role Of
  Chance In Life And In The Markets.. Penguin books, 2 edition.
Tukey, J. W., 1997. More honest foundations for data analysis.
  Journal of Statistical Planning and Inference, 57(1):21–28.


Index of Functions
.First, 226                         89, 92, 93, 100                 73, 74, 76–79, 81–83,
.Last, 226                    as.data.frame.table (base), 72,       88, 90, 92–94, 102, 104,
.libPaths, 73, 226, 227             100                             106, 107, 109, 114–119,
.packages, 19                 as.data.set (memisc), 89, 90          123, 125, 126, 128, 129,
.path.package, 31             as.Date (base), 76–78, 93, 94,        132, 134–136, 141, 154–
                                    127, 184, 201                   156, 160, 167, 170, 171,
aaply (plyr), 104             as.formula (stats), 215               173, 179, 182, 188, 199,
abbreviate (base), 140        as.layer (latticeExtra), 130          200, 202, 209–211, 216,
abline (graphics), 51, 146,   as.matrix (SparseM), 66, 68,          217, 235
      185                           211                       call (base), 131, 216, 217
acast (reshape2), 106, 107,   as.numeric (base), 108          cat (base), 70, 226
      110                     as.vector (base), 78, 180       cbind (base), 67, 170, 200
acf (stats), 58, 179, 183     attach (base), 22, 25, 30–32,   character (base), 71, 75
add1 (stats), 169                   40                        charmatch (base), 75
adjustcolor (grDevices), 116, attr (base), 63, 66, 77, 100    chooseCRANmirror (utils),
      166, 167, 170           auto.arima (forecast), 184            31
adply (plyr), 100             average, 216                    class (base), 79, 80, 83, 201,
aes (ggplot2), 131, 132, 134, axis (graphics), 113, 185             202
      135                                                     cloud (lattice), 121
aggregate (stats), 78, 79     bestsetNoise (DAAG), 164        cm.colors (grDevices), 115
all.vars (base), 215          biocLite, 17                    cmdscale (stats), 190, 193–
anova (stats), 160, 161, 168  bkde2D, 170                           195
any (base), 70                bold, 119, 120                  codebook (memisc), 89, 90
aov (stats), 56, 157–160      bolditalic, 120                 coef (stats), 51, 53, 56, 70,
apply (base), 74, 102–104,    boxplot (graphics), 119, 127,         81, 147, 149, 152, 153,
      110, 175, 186                 134                             158, 160, 162, 168, 169,
apropos (utils), 23, 25       brewer.pal (RColorBrewer),            219
ar (stats), 181                     115, 116, 211             coefficients (stats), 53, 147
args (base), 20, 71           browseVignettes (utils), 24,    colnames (base), 66
arima (stats), 178, 181, 182        25                        colorRampPalette (grDe-
arima.sim (stats), 181        bsnVaryNvar (DAAG), 165               vices), 115, 116
arrows (graphics), 235        bubble (sp), 80, 203            colors (grDevices), 115, 235
as (methods), 58, 68, 70, 71, bwplot (lattice), 128, 136      colwise (plyr), 105
      217, 220                by (base), 101, 105, 106        Commander, 229
as.character (base), 93, 108,                                 complete.cases (stats), 40, 68,
      235                     c (base), 17–20, 22, 30, 33,          141
as.data.frame (base), 66, 71,       40, 41, 51, 61–69, 71,    confusion (DAAG), 186

continuous, 131, 133                  110, 183                        104, 105, 129, 186, 210,
contour (graphics), 171         dir (base), 10, 23, 73, 108,          212, 215–218, 226
contourplot (lattice), 121            203, 205, 209, 212, 213
coordinates (sp), 80, 201, 203  DirSource (tm), 210, 212, 213   gam (mgcv), 173, 180–183,
cor (stats), 54                 discrete, 133                         185
Corpus (tm), 209, 210, 212,     dist (stats), 193               GDALinfo (rgdal), 202
      213                       do.call (base), 93, 216         gdot, 234
count.fields (utils), 87        DocumentTermMatrix (tm),        getAnywhere (utils), 94, 220
countprop, 78, 79                     210                       getbom, 92
CRS (sp), 201                   dotplot (lattice), 71, 127      getFromNamespace (utils),
csv, 87                         download.file (utils), 204            220
cumprod (base), 70              download.packages (utils), 31   getReaders (tm), 212
cumsum (base), 70               drawExtent, 200                 getScript, 10
current.panel.limits (lattice), droplevels (base), 64, 67, 94,  getwd (base), 29, 108
      54                              134                       gf, 217, 218
curve (graphics), 218           dump (base), 30, 109            ggplot (ggplot2), 131–135
cut (base), 78, 102                                             ggtitle (ggplot2), 133
                                equal, 130, 131, 133            glayer (latticeExtra), 130
                                eval (base), 216, 217           glm (stats), 171, 187
daisy, 193
                                eventCounts (gamclass), 184     gmap, 199, 200
daply (plyr), 104, 105
                                example (utils), 24, 100        graphics, 38
data (utils), 80, 166, 203
                                exp (base), 127, 152            grep (base), 75
data.frame (base), 18, 22, 58,
                                expression (base), 119–121,     grey (grDevices), 202
      67, 68, 78, 88, 110, 180,
                                      235                       grid (graphics), 133
      181
                                extent, 200                     gsub (base), 75, 212
datafile (DAAG), 23, 40, 74,
                                                                Guide, 206
      88
                                                                gvisMotionChart (googleVis),
date (base), 78, 133            factor (base), 63, 64, 82, 107,
                                                                      94, 139, 140
dbConnect (RSQLite), 95               156, 157, 188
                                                                gzfile (base), 95
dbDisconnect (RSQLite), 95      fig1, 217, 218
dbDriver (RSQLite), 95          fig2, 217, 218
dbListTables (RSQLite), 95      File, 23                        hat (stats), 120
dbWriteTable (RSQLite), 95      file.show (base), 10, 26, 40    head (Matrix), 41, 72, 100,
dcast (reshape2), 106–108,      filter (dplyr), 106                   114, 188
      110                       findFreqTerms (tm), 211         heat.colors (grDevices), 115
ddply (plyr), 105               fitted (stats), 53, 70, 81, 158 help (utils), 16, 23–25, 33,
demo (utils), 16, 18, 19, 24,   fitted.values (stats), 53, 147        75–78, 87, 90, 93, 100,
      113, 121, 139             fixed, 130, 131                       109, 115, 119, 121, 133,
density (stats), 118, 119, 132, for (base), 92, 115, 183              137, 160, 175, 191, 201,
      141                       forecast (forecast), 181, 182         210, 219, 220, 224–226
density2d, 132, 134             format (memisc), 76, 77, 127,   help.search (utils), 16, 23–25
densityplot (lattice), 128, 142       185                       help.start (utils), 16, 23–25
deparse (base), 216             format.Date (base), 107         Hengl, 205
description (memisc), 89        formula (stats), 216            hist (graphics), 118
detach (base), 22, 25, 32,      frac, 120                       histogram (lattice), 128, 132
      104, 105                  fromJSON (RJSONIO), 93,
dev.off (grDevices), 218              94                        I (base), 131, 134, 135
diff (SparseM), 54, 70, 76, 78  function (base), 54, 73, 75,    iconv (base), 210
dim (base), 41, 66, 68, 83,           78, 79, 83, 92, 94, 102,  identify (graphics), 21, 113,

      114, 141, 194                   173                       model.matrix (SparseM),
identify3d (rgl), 137, 138      list (base), 50, 54, 55, 69,         158, 159
identity (base), 100                  77–80, 88, 92, 104, 115,  months (base), 77
if (base), 78                         123–129, 139–142, 177,    mtext (graphics), 48, 49, 113,
image (SparseM), 202                  181, 187, 190, 203, 210,       116, 120, 136, 158, 173,
install.packages (utils), 17,         212, 213, 216                  174, 182, 211
      31, 199                   lm (stats), 51–53, 55, 65, 70,
interaction.plot (stats), 57          109, 145–149, 151–153,    na.omit (stats), 68, 78
intervals (nlme), 219                 157, 160, 162, 167–169,   name, 23
intervals.lme, 219                    175                       names (base), 26, 53, 55, 63,
is (methods), 70, 71            lme (nlme), 177                      66, 67, 69, 80, 83, 88,
is.na (base), 61, 64, 71, 75,   lmer (lme4), 177                     92–94, 100, 105, 107,
      78, 81                    lmList (lme4), 219                   108, 115, 126, 147, 162,
is.null (base), 78              load (base), 30                      201, 204, 211, 215, 224
italic, 120, 235                locator (graphics), 114         nchar (base), 75
                                loess (stats), 172              newtest, 217
j, 192                          loess.smooth (stats), 172       normalizePath (base), 33, 224
julian (base), 77, 184, 185     log (base), 18, 26, 45, 50–53,  nrow (base), 104, 116
                                      55, 65, 74, 118, 126,     ns (splines), 135
                                      127, 137, 138, 149, 150,  numeric (base), 71
knitrSet, 6
                                      152, 153, 156–158, 162,
                                      163, 167–171, 175, 187
labels (memisc), 89                                             open3d (rgl), 137
                                log10 (base), 18, 133
lag.plot (stats), 58, 179                                       options (base), 33, 67, 104,
                                log2 (base), 18
lapply (base), 74, 75                                                160, 226, 227
                                logical (base), 71
layer (latticeExtra), 32, 128–                                  order (base), 70, 82
                                lowess (stats), 57, 58, 65,
      130, 203                                                  ordered (base), 63, 107
                                      172, 173
lda (MASS), 66, 185, 186,                                       oz (oz), 195, 199
                                lpoints (lattice), 129
      191, 192                  ls (base), 14, 19, 20, 29
legend (graphics), 115, 170,                                    pacf (stats), 58
      171                                                       packageStatus (utils), 226
length (base), 66, 69, 70, 78,  map, 210, 212                   pairs (graphics), 49, 54
      105, 106, 115, 194, 204   margin.table (base), 101, 102   palette (grDevices), 115
levelplot (lattice), 121, 202   match (base), 75, 94            panel.abline (lattice), 129
levels (base), 63, 108, 125,    matrix (base), 104, 110         panel.arrows (lattice), 129
      128, 204                  max (base), 54, 78, 185         panel.average (lattice), 129
library (base), 10, 18, 19, 29, mean (Matrix), 18, 41, 65,      panel.curve (lattice), 129
      31, 32, 40, 48, 50, 54,         70, 71, 73, 83, 180, 185, panel.fill (lattice), 129
      55, 57, 58, 71, 72, 75,         216, 217                  panel.lines (lattice), 129, 203
      77, 80, 84, 89, 92, 94,   mean.and.sd, 73, 74, 82         panel.lmline (lattice), 129
      95, 100, 102, 104–107,    median (stats), 41, 65, 70, 74  panel.loess (lattice), 129
      113, 115, 117, 121, 130,  melt (reshape2), 106, 107,      panel.mathdensity (lattice),
      135, 137, 139, 141, 142,        110                            129
      146, 162, 165, 166, 170,  Mercator, 200                   panel.points (lattice), 122,
      173, 180, 182, 185–189,   methods (utils), 79                  129
      199, 201, 203, 209, 211,  mfrow, 141                      panel.polygon (lattice), 129
      219, 220, 229             min (base), 54, 78              panel.rect (lattice), 129
line (stats), 132               missing.values (memisc), 89     panel.refline (lattice), 129
lines (graphics), 58, 113, 118, mode (base), 61, 71, 82         panel.rug (lattice), 129

panel.segments (lattice), 129   print.data.frame (base), 79           150, 183
panel.superpose (lattice), 128  print.default (base), 79        residuals (stats), 53, 147
panel.text (lattice), 54, 122,  print.factor (base), 79         rev (base), 70, 115
      129                       print.lm, 53                    rgl.snapshot (rgl), 138
panel.xyplot (lattice), 54,     proj4string (sp), 201           rm (base), 22, 29, 30, 82, 109
      128, 129                  prop.table (base), 102          rnorm (stats), 41, 73, 110,
par (graphics), 114, 115, 117,                                        119, 183, 216
      118, 136, 152, 194, 199,  q (base), 15, 16, 25            round (base), 20, 33, 54, 56,
      235                       qda (MASS), 185                       79, 102, 127, 149, 152,
par3d (rgl), 137                qplot (ggplot2), 131–133              153, 158, 160, 162, 168,
parallel (lattice), 121         qqmath (lattice), 121                 169, 186
paste (base), 54, 55, 75, 83,   qqnorm (stats), 119, 140        row.names (memisc), 66, 83,
      92, 93, 181, 183, 202,    qr (Matrix), 103                      138, 200
      209, 213, 215, 216, 235   quantile (stats), 135           rownames (base), 66, 79,
paste0 (base), 55, 75, 83,      quarters (base), 77                   114, 129, 153, 194, 199
      91–93, 127, 162, 204,     quickplot (ggplot2), 55, 130–   rowSums (Matrix), 110
      217                             135                       rpart (rpart), 188, 190
path, 132                                                       RSiteSearch (utils), 23, 24
pdf (grDevices), 217                                            rug (graphics), 119
plain, 120                      R.home (base), 32, 33, 73,      runif (stats), 141
plot (sp), 16, 20–22, 25,             224
      26, 36–39, 43, 48, 49,    rainbow (grDevices), 115
      51–53, 58, 65, 70, 79,    randomForest (randomFor-        s (mgcv), 173, 180–183, 185
      113–122, 136, 139–141,          est), 189–192             sammon (MASS), 194
      145, 146, 151–153, 170,   range (base), 41, 54, 70, 74,   sample (memisc), 116
      173, 178, 180–182, 185,         106, 173                  sapply (base), 74, 75, 79, 83,
      191, 194, 200, 215, 216,  read.csv (utils), 23, 25, 87,         84, 92, 94, 110
      235                             91, 93, 107, 201          save (base), 26, 30, 40, 108
plot.data.frame, 49             read.delim (utils), 23, 25      save.image (base), 29, 30
plot.mtcars, 215                read.maimages, 95               scan (base), 88, 91, 95, 210
plotKML, 200, 201               read.table (utils), 21, 23, 25, scatter.smooth (stats), 172
plotSimDiags (DAAG), 155              26, 40, 67, 74, 87, 88,   scatter3d (car), 137, 229
plotsimscat, 155                      91, 92                    scatterplot (car), 229
plotSimScat (DAAG), 154,        readGDAL (rgdal), 201, 202      sd (stats), 73, 83
      155                       readHTMLTable (XML), 92,        search (base), 29, 31, 32
pmatch (base), 75                     93                        selectMethod (methods), 220
point, 131, 132, 134, 135       readLines (base), 95, 209       seq (base), 77, 78, 127, 185
points (graphics), 113–115,     readOGR (rgdal), 203, 205       sessionInfo (utils), 31, 32, 73
      122, 199, 200, 235        readPDF (tm), 212               set, 137
polygon (graphics), 235         readxl, 87                      set.seed (base), 165, 188
prcomp (stats), 66              rect (graphics), 235            setRepositories (utils), 225
predict (stats), 148, 158, 173, regexpr (base), 75              setupKnitr (rgl), 137
      175, 185, 187             relevel (stats), 55             setwd (base), 108
pretty (base), 127, 170         reorder (stats), 177            show (RSQLite), 89
print (memisc), 16, 32, 43, 52, rep (base), 63, 82, 88, 107,    show.settings (lattice), 126
      53, 70, 79, 81, 92, 107,        110, 115, 156, 166, 167,  showMethods (methods), 80,
      122, 125, 136, 160, 186,        194, 235                        220
      217                       require (base), 200             signif (base), 33
                                resid (stats), 53, 70, 81, 147, simpleKey (lattice), 125

                                                                              bibliography     233
simpleTheme (lattice), 123,            43, 52, 53, 70, 79, 81,   unclass (base), 63, 76
      125, 126, 128, 190               168, 169, 171, 203, 226   unique (memisc), 70, 107,
slot (methods), 80, 219          summary.lm (stats), 53, 56,           205
slotNames (methods), 80,               158, 160                  unit (grid), 126
      204, 219                   svd (base), 103                 unlist (base), 66, 81, 127
smooth (stats), 131, 132, 135    switch (base), 92               unstack (utils), 21
smoothScatter (graphics),        symbols (graphics), 235         unzip (utils), 89, 205
      116                        sys.call (base), 217            update (Matrix), 122, 125,
solve (SparseM), 103             Sys.Date (base), 78                   127–129, 153–155
sort (base), 63, 70, 107         sys.frame (base), 217           update.packages (utils), 31,
source (XML), 10, 17, 30,        Sys.getenv (base), 224                226
      109, 138                   sys.nframe (base), 217          UseMethod (base), 53
sourceFigFuns, 10                sys.parent (base), 217
sp.theme (sp), 204               system.file (base), 10, 33, 73, VectorSource (tm), 209
spline (stats), 113                    89, 107, 201–203, 209,    vignette (utils), 24, 87, 90,
split (sp), 79                         212, 224                        106, 110, 139, 206
splom (lattice), 54, 55, 162     system.time (base), 110         vis.gam (mgcv), 173, 174
spm (car), 166, 167
spplot (sp), 202, 204                                            WDI (WDI), 93, 94
spplot.grid, 202, 220            t (SparseM), 79, 102, 103       wdi.dl, 94
spplot.points, 202               table (base), 20, 40, 41, 63–   WDIsearch (WDI), 94
spplot.polygons, 202                   65, 67, 71, 72, 78, 81,   wedgeplot, 234
sprintf (base), 75                     82, 84, 87, 94, 102, 122, weekdays (base), 77
spss.fixed.file (memisc), 88           186                       win.graph, 117
spss.portable.file (memisc),     tapply (base), 74               win.metafile, 136
      88, 89                     tempfile (base), 89             wireframe (lattice), 121
sqrt (base), 33, 65, 117         termDocumentMatrix, 210         with (base), 22, 25, 26, 40,
stopwords (tm), 210              TermDocumentMatrix (tm),              57, 58, 67, 71, 102, 113,
str (utils), 26, 50, 54, 71, 72,       210, 212                        114, 116, 117, 119, 122,
      83, 100, 161               termFreq (tm), 210                    137, 138, 141, 162, 170,
strheight (graphics), 235        termplot (stats), 145, 158,           173, 177, 199, 200
stripplot (lattice), 126, 127,         162, 163, 168, 172        within (memisc), 55, 108, 188
      136, 141, 177              terrain.colors (grDevices),     wordcloud (wordcloud), 211
strsplit (base), 75, 93                115                       write.table (utils), 30
sub (base), 75, 107              test, 217
subset (memisc), 41, 62, 67,     text (graphics), 21, 113, 114,
      82, 89, 90, 94, 106, 118,        120, 189, 194, 199, 200,  x11 (grDevices), 117
      119, 134, 153, 170, 173,         235                       xlab (ggplot2), 133, 135
      204, 205                   textGrob (grid), 125            xtabs (stats), 21, 67, 71, 72,
substitute (base), 120, 121,     time (stats), 58, 180                 81, 101
      216                        tmd (lattice), 121              xyplot (lattice), 25, 50, 77,
substring (base), 75, 108        transformer, 210, 212                 121–126, 128, 129, 187,
sum (base), 18, 41, 64, 75,      trellis.device (lattice), 123,        190
      78, 101, 102, 104–106,           124, 126                  xzfile (base), 95
      186                        trellis.par.get (lattice), 126
summarise (dplyr), 101, 105,     trellis.par.set (lattice), 123, ylab (ggplot2), 135
      106                              124, 126, 204
summary (rgdal), 26, 36, 37,     tuneRF (randomForest), 191      Zinc, 203


Index of Functions
Akaike information criterion     boxplot, see graphics, box &        information criteria, see
      (AIC), see information           whisker                       information criteria
      criteria                                                  cross-validation see resam-
analysis issues                  censoring, see survival analy-      pling methods, 1
   analysis of summary data,           sis
         71, 99                  classes & methods, 78–80,      data
   assumptions, 47, 145, 148,          185, 192, 206, 219–221     input, 30, 87, 88, 90, 92,
         151–154, 163, 172,      commands                               94–96
         173, 177, 183, 188,        comment character, 15–17,        comment character, 16,
         193                              36, 88, 91                       88, 91, 203
   deficiencies, 45                 continuation character, 15,   management strategies,
   independence, 47, 145, 153             16                            100, 102, 104, 106,
   nonparametric methods,        concatenation, 64                      108, 110, 111
         188                     confidence interval (CI), 1,     measurement issues, 47,
   robust & resistant methods,         2, 6–11, 14–26, 29–35,           80, 122, 128, 150,
         44, 47, 188                   37–41, 43–54, 56, 58,            174, 185, 192
   styles of analysis, 7, 56,          61–64, 66, 67, 69–79,      summary, 71, 99
         178                           81–83, 87, 88, 91, 92,   data analysis & commentary
analysis of variance model             94–96, 99, 100, 102,       alcohol consumed, by year
      (aov)                            103, 105, 109, 110,              & country (grog),
   categorized data vs linear          113–119, 123, 125–128,           124, 125, 139
         fit, 145                      131, 134–136, 139–142,     animal body & brain
   one-way layout, 157                 145–149, 151–156, 158–           weight (Animals,
argument, see function                 161, 163–171, 174, 175,          MASS), 117
array                                  177–179, 181, 184–195,     Antiguan corn yields
   dimensions, 65, 68, 74, 81,         199–206, 210, 213, 215,          (ant111b), 83, 177
         99, 100, 103                  217–221, 223, 225, 234,    Australian athletes, mor-
assignment, 23, 41, 139, 190           235                              phology & biochem-
                                    median                              istry (ais), 122, 132,
Bayesian Information Crite-            bootstrap, 165                   133
      rion (BIC), see informa-      predicted values, 51, 146,    book weight vs dimen-
      tion criteria                       152, 187                      sions (allbacks,
Bayesian methods, 43             contrasts, see factor                  softbacks), 83
   prior density or probability, correlation                      book weight vs dimen-
         187, 188                   linear (Pearson), 49, 55,           sions, biased sample
bootstrap, see resampling                 154, 161, 179                 (oddbooks), 175
      methods                    Cp statistic (Mallows), see      Canadian city populations

      (cities), 191, 194,             (UCBAdmissions,                    211
      203, 204                        datasets), 72, 74, 99,       sampling distribution, 148
car data                              100, 104                     skew, 48, 49, 55, 148, 167,
   fuel consumption, etc,    data frame, 1                               171
         1974 data (mtcar       as database, 40, 94                uniform, 141
         datasets), 215, 216    as list, 18, 22, 25, 40, 50,    document preparation
   speed vs distance to stop          54, 61, 65, 66, 69, 74,      Sweave, 35, 39
         (cars, datasets),            77–82, 99, 103, 104,
         215, 216                     113, 139–141, 215         exploratory data analysis
cricketer survival rates        attach & detach, 22, 25, 30,          (EDA), 1, 32, 78, 80,
      (cricketer), 105, 106           40, 41, 49, 81                  110, 151, 152
depression vs lawn roller       column & row names, 100,        expression
      weight (roller), 146,           104                          evaluate, 25, 120, 216
      147                       convert to/from tables or
elastic bands, distance vs            matrices, 100
      stretch (elastic1,        joining (cbind, rbind), 67,     factor, 61–64, 67, 81, 82, 87,
      elastic2,                       170                             106–108, 123, 125, 156,
      elasticband), 81,         omit rows with NAs, 65,               157, 160, 188, 205
      175                             68                           columns in model matrix,
height & weight of women        reshape, 71, 103, 106, 107,              158, 159
      (women, datasets), 41,          110                          contrasts, 159, 160
      46                        split to list, 75, 78, 94, 105,    in model formula, 63, 145,
hill race times (nihills,             188                                146
      hills2000), 26, 53–       writing, 75, 81, 82, 87,           levels, 81, 106, 156, 205
      55, 95, 137, 161, 162,          103, 107, 131, 157,             order, 81, 156
      175                             160, 186, 188                ordered, 63
hurricane death data         data mining, 230                      splitting by levels, 164,
      (hurricNamed),         degrees of freedom, 53, 171                 188
      185                    density                            file names, 10, 23, 26, 30, 32,
jobs, by region of Canada       estimate, 49, 118, 119, 132           40, 73, 74, 88, 95, 107,
      (jobs), 77, 126, 127         plot, plot, 1                      201–205, 209, 211, 212,
population growth            designed experiment, 8, 45,              217, 224, 226
   Australian states               47                           fixed effects, see multi-level
         (austpop), 113      deviance, see model                      model
pressure of mercury          discriminant analysis              function, 24, 29, 40, 54, 55,
      vapour, vs temp           linear, 66, 185, 186, 191             61–64, 67, 71, 80, 81,
      (pressure, datasets),  distance measure, 191–193                88, 89, 94, 95, 105, 107,
      44                     distribution                             113, 120, 122, 123, 125,
primate body & brain            t-distribution, 163                   128–132, 135, 137, 140,
      weights (primates),          degrees of freedom, 163            173, 184, 193, 195, 200–
      114, 122, 129             betabinomial, 47                      202, 210–212, 217, 218,
track & road record times       binomial, 47, 48, 171                 226, 229, 234
      (worldRecords), 50–       cumulative probability, 118        anonymous, 73, 75
      52, 58                    density, 49, 118, 119, 132,        argument, 130
tree dimensions & biomass             133, 141, 171, 211              abbreviated, 76, 140
      (rainforest), 40, 41      exponential, 48                       the ... argument, 20
UCB admissions,                 normal, 41, 47, 48, 118,           common useful functions,
      by sex & dept                   119, 141, 148, 188,                6, 7, 22, 23, 43, 47,
                                                                         52, 53, 55, 61, 65, 66,

        78, 79, 81, 102, 110,         140, 142, 234                 bootstrap methods, see
        114, 119, 138, 145,        use of quickplot(), 55,                resampling methods
        150, 164, 167, 174,              131–135                    confidence interval, see
        178, 183, 184, 191,     graph                                     confidence interval
        210, 221, 234              see plot, 1                      likelihood ratio test, 187
  environment, 6, 7, 32, 40,    graphics, see also ggplot2,      information criteria
        217, 220, 226                 larttice                      Akaike Information Cri-
     evaluation frame, 30, 32,     aspect ratio, 8, 24, 50, 117,          terion (AIC), 169,
           40, 217                       121, 123, 128, 139,              171
  generic, 43, 52, 53, 79–81,            153, 187, 190           interaction plot, 57
        191, 202, 219              box-&-whisker
  issues for writing & use,           outlier criterion, 134
        8, 43, 55, 61, 99, 155,    contour, 121, 132–134,        lattice graphics, 3, 8, 25, 32,
        174, 184, 185, 210               152, 153, 173, 174,           50, 54, 63, 71, 80, 112–
  return value, 41, 65, 66,              200                           114, 116, 118, 120–130,
        69–71, 73, 74, 78, 80,     dates as axis labels, 77,           132–134, 136, 138, 140,
        83, 89, 99, 102, 103,            126                           142, 177, 202, 203, 211,
        105, 121–123, 130,         devices, 50, 114, 117, 122–         229
        140, 145, 147, 150,              124, 126, 217              add smooth curve, 113,
        200, 211, 218              histogram, 118, 119, 128,              116, 125, 132, 177
  utility functions, 108                 130, 132, 140              adding to plots, 32, 121,
                                   simulated data, 154, 155,              128–130, 140, 202,
                                         211                              203, 211
generalized linear model, see      transformation of scales,        box plot, 128, 136
     also regression                     43, 48, 49, 117, 150       built on grid package, 113,
  deviance, 171, 187            graphics (base graphics)                  121, 126, 202
     deviance residuals, 171,      axes, 21, 48–50, 115, 126,       conditioning factor or vari-
           187                           130, 131, 133, 136,              able, 123, 229
  family, 171                            138, 194, 215              dotplot, 71, 127
     betabinomial, 171             identifying points, 49, 87,      keys & legends, 50, 114,
     binomial, 171                       138                              123–126, 128, 129,
     negative binomial, 47         interaction plot, 56, 57,              132, 142, 203, 211
     poisson, 171                        145, 159, 167, 168,        layout of panels, 54, 121,
     quasibinomial, 171                  191                              122, 126, 202
     quasipoisson, 171             legend, 115, 125, 126, 170       panel function, 54, 128–
  linear predictor, 164, 187       normal probability, 119,               130
  logistic regression, 187               141                        point & text size, 50, 80,
  predicted values,                panel function, 54, 128–               113, 114, 116, 118,
     linear predictor, 187               130                              120, 122, 123, 125,
     response, 187                 shaded regions, 182                    126, 129, 132, 134,
  residuals                        size of points & text, 21,             138, 140, 202, 203,
     working, 150, 155                   48, 49, 57, 114–116,             211
  SEs & Wald (z−) statistics             123, 129, 131, 151,        printing from user func-
        for coefficients, 164            152, 158, 170, 182,              tions, 120, 122
     Hauck-Donner effect,                211, 235                   scaling of axes, 50, 80,
           164                                                            118, 123, 126, 129,
ggplot2 graphics, 3, 32, 112–                                             130, 138, 140, 142,
     114, 116, 118, 120–122,    image file, see R session                 177, 203, 211
     124, 126, 130–136, 138,    inference, 45, 46, 99               strip plot, 126, 136, 177

library, see also package, 18,      term plots, 145, 158, 159,     multi-dimensional scaling
       19, 29, 31, 33, 92, 95,             162, 163, 168, 172           (MDS), see ordination
       100, 121, 139, 186, 199,     terms, 145, 164, 172           multilevel model, 177, 178
       201, 211, 225, 229           variable selection, 163, 164   multivariate analysis, 178,
linear model (lm), 70, 145,             realistic SEs, 163, 164         188
       164, 172                         simulation, 163, 164
   assumptions, 172              list, 61, 99                      nonlinear model (nls), 1
   bootstrap, see resampling     list, concatenate (join), 81      nonsense, 45
           methods
   check for linearity, 164,
                                 matrix, 41, 43, 49, 54, 65–67,    object
           172
                                        69, 74, 81, 87, 99, 102,     saving, 14, 15, 25, 29–31,
   cross-validation, see re-
                                        103, 109, 110, 145, 148,           40, 108, 109, 111,
           sampling methods
                                        161, 166, 185, 193                 130, 132, 147, 211
   diagnostic plots
                                    arithmetic, 110, 148           operator, 18, 128, 131, 135,
       residuals vs leverage,
                                    conversion to/from vector,          219
              145
                                           22, 66, 68, 71, 74, 80,   arithmetic, 18, 128, 131,
   errors in x, see regression
                                           81, 99, 102, 211                219
   explanatory variables
                                    number of rows &                 relational, 18
       relationships, 145, 164
                                           columns, 68, 74,        ordination
   fitted values, see predicted
                                           81, 99, 103, 104, 186,    distance measure, see dis-
           values
                                           190, 191, 193, 194              tance measure
   hat matrix, 70, 145, 164,
                                    subscripts, 22, 71, 110          multi-dimensional scaling
           172
                                 missing values, 40, 63, 65,               (MDS), 194, 195
   model formula, 145, 146
                                        68, 70, 81–83, 89, 141       principal components anal-
   model matrix, 145
                                    count & identify, 40, 63, 81           ysis (PCA), 66, 94,
       one term; several
                                    remove, 65                             193
              columns, 145,
                                 model                                  PCA scores in regres-
              148, 157–160
                                    classification, see discrimi-             sion, 66
   modeling non-linear re-
           sponses, 49, 145, 191           nant analysis
   outliers, see regression,        discriminant, see discrimi-    package
           outliers                        nant analysis             base, 6–8, 13, 14, 24, 26,
   predicted values                 generalized linear model,              29, 31–33, 73, 76,
       validity of SE estimates,           see regression, gener-          92–95, 100, 102, 106,
              172                          alized linear model             113, 115, 121, 122,
   prediction interval (new         linear model, see regres-              128, 130, 138, 140,
           y-value), 145                   sion, linear model              141, 145, 161, 185,
   R2 & adjusted R2 , 153           model formula, 63, 145,                188, 201, 211, 218,
   regression spline, see re-              146                             226, 229
           gression                 model object, 43, 51–53,         boot, 145
   residuals, see regression               61, 69, 70, 81, 99,       car, 8, 25, 35, 44, 56, 87,
   robust & resistant methods,             145, 147, 229                   137, 205, 226, 229
           see regression               extractor function, 43,      cluster, 49
   straight line model, 145                   53, 147                DAAG, 10, 23, 26, 31, 33,
       fitted values, 145           parameters, 145, 155, 156,             41, 53, 56, 71, 88, 95,
       residual, 145                       159, 167                        102, 107, 113, 137,
   strategies for fitting mod-      survival analysis, see sur-            139, 146, 155, 161,
           els, see regression             vival analysis                  170, 172, 175, 177,
                                    time series, see time series           178, 188, 194, 201,

         209, 212, 224             quitting, 17, 29, 108                 see generalized linear
   datasets, 10, 21, 32, 41, 44,   search list, 29, 32, 40               model
         49, 83, 103, 107, 113,       database, 22, 29, 32, 40,     linear model, see linear
         201                                218                          model
   dr, 6–8, 10, 17, 35, 44, 53,    working directory, 10, 15–       non-linear model, 49
         87–89, 93–95, 104,              17, 23, 25, 26, 29, 30,    observational data, 45, 156
         105, 110, 121, 130,             39, 40, 88, 95, 108,       outlier, 49, 152, 163, 175
         137–139, 172, 177,              201, 204, 223, 226         predictive accuracy
         178, 185, 187, 195,          changing, 23                     bootstrap, 43
         200, 205, 211, 226,       workspace, 10, 14–17, 19,           cross-validation, 145
         229                             22, 23, 25, 26, 29, 30,       validity of bootstrap
   foreign, 88                           32, 40, 61, 81, 108,                estimate, 43
   gam, 173, 180, 181, 184,              109, 111, 139, 209,        spline smoother, see also
         185                             211, 217, 226, 229              Generalized Additive
   ggplot2, 32, 113, 121, 122,        image, 15, 17, 26, 29,             Model, 172
         130, 135, 138, 140                 30, 32, 40, 108,     replication, 45
   grid, 113, 121, 137, 193,                109, 111, 139, 211,  resampling methods
         201, 202, 220                      229                     bootstrap, 43, 145, 165,
   lme4, 79, 99, 178                  management, 108, 111               189, 190
   MASS, 32, 44, 66, 185         random                             cross-validation, 43, 145,
   mgcv, 172, 173, 180             numbers, 41                           165, 186
   nlme, 178                       sample, 120, 141, 189         rounding, 20, 38
   R Commander (Rcmdr), 17       regression, see also discrim-
   RColorBrewer, 115                  inant analysis, gener-
   rpart, 49, 188                     alized additive model,     sampling
   RSQLite, RMySQL, ROra-             tree-based methods,           cluster sampling, 47
         cle, DBI, 94                 survival analysis, time       with/without replacement,
   stats, 24, 32, 185, 195, 199       series                             43
plot, see graphics                 AIC (Akaike), BIC             search list, see R session
posterior density or prob-               (Bayesian), Cp (Mal-    selection bias, 166
      ability, see Bayesian              lows), see information  simulation, 151, 154, 155,
      methods                            criteria                      164, 165, 174, 181, 184
predictive accuracy, see re-       bootstrap, see resampling     smoother, 135, 145, 172, 173,
      gression, generalized              methods                       182
      linear model, linear         coefficients                     Generalized Additive
      model (lm), model, sur-         confidence interval, see           Model, 173, 182
      vival analysis                        confidence interval     lowess, 172, 173
principal components analy-           standard error, 53         spline, 7, 135, 145, 172
      sis (PCA), see ordination    comparison of models, 7,      standard deviation, 47, 73,
printing, 15, 37, 76, 120, 122,          161, 177, 187                 82, 83, 192
      217                          cross-validation, see re-     standard error (SE), 18, 23,
   digits, 33, 76, 160, 186              sampling methods              37, 38, 43, 53, 55, 61–
prior density or probability,      extrapolation, 153, 179,            64, 67, 68, 70, 72, 75,
      see Bayesian methods               183                           87, 91, 94, 115, 118,
                                   generalized additive model,         124, 125, 135–137, 145,
                                         see generalized addi-         148, 163, 165–167, 169,
quitting a session, 17, 29, 108                                        174, 175, 179, 182, 185,
                                         tive model
                                   generalized linear model,           186, 194, 201, 204, 211,
R session                                                              226

240    learning and exploring r
   of mean (SEM), 135, 163,              177–197, 199–207,           homogeneity of vari-
         165, 174                        209–213, 215–221,           ance
   of median, 165                        223–227, 229–231,    vector
   of residual, 53, 163                  233–235                atomic, 61, 70, 81, 99
                                transformation                  character, 19, 22, 23, 25,
table                              count data                        61, 62, 65, 67, 71, 75,
   of frequencies                    angular, 117, 193               76, 81, 209, 235
      table formula, 21, 63,       logarithmic, 48, 49, 150,       number of characters, 75
           72, 103, 123, 147,            171, 192                  splitting, 75
           215, 220                use of, 43, 48, 49, 117,     complex, 61, 65, 81
test                                     150, 192, 193          concatenation, 64
   correlation, 58, 154, 161,   tree-based methods              logical, 25, 61, 62, 64, 65,
         183                       random forests (random-           71, 76, 81, 211
   F-statistic, 163                      Forest), 41, 185,      numeric, 19, 20, 23, 25, 26,
   proportion(s), 193                    188–191                     61, 63, 65, 66, 70, 71,
   sequential correlation, 183,    rpart                             76, 81–83, 99, 102,
         217                         classification, 190, 191        235
time series, 91, 154, 178–180,       information on each        recursive (list), 19, 22, 25,
      182, 184                             split, 188                31, 61, 65, 66, 70, 74,
   ARMA or ARIMA model,              output, 188                     77, 78, 80–82, 92, 99,
         184                         predictive accuracy, 191        180, 187, 203, 211
      automated selection, 184       pruning, 189               subset, 41, 61, 62, 66, 67,
   autocorrelation, 179, 180,        regression, 49, 185, 189        82
         183                         tree diagram, 49, 133,
   autoregressive (AR) model,              189, 190
         1–3, 6–27, 29–41,                                    working directory, see R
         43–59, 61–85, 87–97,   variability                        session
         99–111, 113–175,          heterogeneity, see model,  workspace, see R session

