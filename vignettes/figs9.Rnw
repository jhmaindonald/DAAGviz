\documentclass[12pt, a4paper,  BCOR=8.25mm, DIV=15]{scrartcl}
\usepackage[utf8]{inputenc}
\usepackage{newfloat}
\DeclareFloatingEnvironment[name={Supplementary Figure}]{suppfigure}

\newenvironment{itemizz}%
  {\begin{itemize}%
    \setlength{\itemsep}{2pt}%
    \setlength{\parskip}{2pt}}%
  {\end{itemize}}

\newcommand{\txtt}[1]{{\texttt{#1}}}

\begin{document}
%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Further methods (Set 9)}

<<setup, cache=FALSE, echo=FALSE, purl=FALSE>>=
library(knitr)
options(replace.assign=FALSE,width=54)
opts_chunk$set(fig.path='figure/xmeth-', cache.path='cache/xmeth-',
               fig.align='center', dev='pdf', fig.width=3.5,
               fig.height=3.5, fig.show='hold', par=TRUE,
               tidy=FALSE,  comment=NA)
knit_hooks$set(par=function(before, options, envir){
if (before && options$fig.show!='none') par(mar=c(4,4,1.6,.1),
              cex.lab=.95,cex.axis=.9,mgp=c(2,.7,0),tcl=-.3)
}, crop=knitr::hook_pdfcrop)
pdf.options(pointsize=12)
oldopt <- options(digits=4)
@ %

\title{9: Further Methods}
\author{John H Maindonald}
\maketitle
\vspace{-0.5cm}

<<doFigs, cache=FALSE>>=
doFigs <- FALSE
@ %
\vspace{-0.5cm}


<<fig9_1>>=
fig9.1 <- function(){
## ---- ant111b ----
# ant111b is in DAAG
Site <- with(ant111b, reorder(site, harvwt,
                              FUN=mean))
stripplot(Site ~ harvwt, data=ant111b,
          scales=list(tck=0.5),
          xlab="Harvest weight of corn")
}
@ %

<<fig9_2>>=
fig9.2 <- function(){
## ---- Erie1 ----
plot(Erie, xlab="",
     ylab="Level (m)")
}
@ %

<<fig9_3A>>=
fig9.3A <- function(){
## ---- lagErie ----
## Panel A
lag.plot(Erie, lags=3,
         do.lines=FALSE,
         layout=c(1,3),
         main="  ")
mtext(side=3, line=2, adj=0,
      "A: Lag plots, at lags of 1, 2 and 3")
}
fig9.3B <- function(){
## ---- acfErie ----
## Panel B
acf(Erie, main="")
mtext(side=3, line=1, adj=0, cex=1.25,
      "B: Autocorrelation function")
}
fig9.3 <- function(){
"Run the separate functions fig9.3A() and fig9.3B()."
}
@ %

<<fig9_4>>=
fig9.4 <- function(){
## ---- gamErie ----
df <-  data.frame(
  height=as.vector(Erie),
  year=time(Erie))
obj <- mgcv::gam(height ~ s(year), data=df)
plot(obj,
     shift=mean(df$height),
     residuals=TRUE, pch=1,
     xlab="",
     ylab="Height of lake")
}
@ %

<<fig9_5>>=
fig9.5 <- function(){
## ---- arima-sim ----
for (i in 1:6){
ysim <- arima.sim(list(ar=0.85),
                  n=200)
df <- data.frame(x=1:200,
                 y=ysim)
df.gam <- mgcv::gam(y ~ s(x),
              data=df)
plot(df.gam,
     ylab=paste("Sim", i),
     residuals=TRUE)
}
}
@ %

<<fig9_6>>=
fig9.6 <- function(){
## ---- Erie-fcast ----
erie.ar <- ar(Erie, order.max=1)
fc <- forecast::forecast(erie.ar, h=15)
plot(fc, main="",
     ylab="Lake level (m)")
  # 15 time points ahead
}
@ %

<<fig9_7>>=
fig9.7 <- function(){
## ---- mdb-gam ----
mdbRain.gam <- mgcv::gam(mdbRain ~ s(Year) + s(SOI),
                   data=bomregions)
plot(mdbRain.gam, residuals=TRUE, se=2, pch=1,
     cex=0.5)
}
@ %

<<fig9_8>>=
fig9.8 <- function(){
## ---- ar1sims ----
opar <- par(mar=c(2.1, 3.1, 0.25, 1.1), mgp=c(2.25,0.5,0))
mdbRain.gam <- mgcv::gam(mdbRain ~ s(Year) + s(SOI),
                         data=bomregions)
n <-  dim(bomregions)[1]
acf(resid(mdbRain.gam), ylab="MDB series")
for(i in 1:5)acf(rnorm(n), ylab=paste("Sim",i),
                 col="gray40")
par(opar)
}
@ %

<<load-DAAGviz, warning=FALSE, message=FALSE>>=
library(DAAGviz, quietly = TRUE)
@ %

<<use-eventCounts>>=
if(!requireNamespace('gamclass', quietly=TRUE))print('gamclass must be installed')
fromDate <- as.Date("2006-01-01")
dfDay06 <- gamclass::eventCounts(data=gamclass::airAccs, dateCol="Date",
                       from= fromDate, by='1 day', prefix="num")
dfDay06$day <- julian(dfDay06$Date, origin=fromDate)
dfWeek06 <- gamclass::eventCounts(data=gamclass::airAccs, dateCol="Date",
                        from=fromDate,
                        by='1 week', prefix="num")
dfWeek06$day <- julian(dfWeek06$Date, origin=fromDate)
year <- seq(from=fromDate, to=max(dfDay06$Date), by="1 year")
atyear=julian(year, origin=fromDate)
@ %

<<fig9_9, eval=TRUE>>=
fig9.9A <- function(){
  if(!exists('dfday06')){
    print(paste("Unable to plot graph.",
                "Ensure package 'gamclass' is installed."))
    return()
  }
dfDay06.gam <-
  mgcv::gam(formula = num ~ s(day, k=200), family = quasipoisson,
      data = dfDay06)
av <- mean(predict(dfDay06.gam))
plot(dfDay06.gam, xaxt="n", shift=av, trans=exp, rug=FALSE, xlab="",
     ylab="Estimated rate per day")
axis(1, at=atyear, labels=format(year, "%Y"))
mtext(side=3, line=0.75, "A: Events per day, vs date", adj=0)
}
fig9.9B <- function(){
dfWeek06.gam <- mgcv::gam(num~s(day, k=200), data=dfWeek06, family=quasipoisson)
av <- mean(predict(dfWeek06.gam))
plot(dfWeek06.gam, xaxt="n", shift=av, trans=exp, rug=FALSE, xlab="",
      ylab="Estimated rate per week")
axis(1, at=atyear, labels=format(year, "%Y"))
mtext(side=3, line=0.75, "B: Events per week, vs date", adj=0)
}
fig9.9 <- function(){
    "Run the separate functions fig9.10A() & fig9.10B()"
}
@ %

<<fig9_10>>=
fig9.10 <- function(){
## ---- fgl-scores2D ----
scores <- predict(fgl.lda)$x
xyplot(scores[,2] ~ scores[,1], groups=fgl$type,
       xlab="Discriminant 1",
       ylab="Discriminant 2",
       aspect=1, scales=list(tck=0.4),
       auto.key=list(space="right"),
       par.settings=simpleTheme(alpha=0.6, pch=1:6))
}
@ %

<<fig9_11>>=
## ---- bronchit-first3 ----
## ---- bronchit-rp ----
set.seed(47)   # Reproduce tree shown
fig9.11 <- function(){
## ---- treefig ----
opar <- par(mar=rep(1.1,4))
if(!exists('b.rpart'))b.rpart <- rpart(rfac ~ cig+poll, data=bronchit)
plot(b.rpart)
text(b.rpart, xpd=TRUE)
par(opar)
}
@ %

<<fig9_12>>=
fig9.12 <- function(){
## ---- rf-x-bronchit ----
opar <- par(mar=rep(2.1,4))
set.seed(31)   # Reproduce the trees shown
num <- 1:nrow(bronchit)
for(i in 1:12){
  useobs <- sample(num, replace=TRUE)
  dset <- bronchit[useobs, ]
  b.rpart <- rpart(rfac ~ cig+poll, data=dset,
                   control=rpart.control(maxdepth=2))
  plot(b.rpart, uniform=TRUE)
  text(b.rpart, xpd=TRUE, cex=1.2)
}
par(opar)
}
@ %

<<fig9_13>>=
fig9.13 <- function(){
## ---- proximity-plot ----
parset <- simpleTheme(pch=1:2)
if(!requireNamespace('randomForest'))
  return('Fig 9.15 requires randomForest package')
bronchit.rf <- randomForest::randomForest(rfac ~ cig+poll,
                            proximity=TRUE,
                            data=bronchit)
points <- cmdscale(1-bronchit.rf$proximity)
xyplot(points[,2] ~ points[,1],
       groups=bronchit$rfac,
       xlab="Axis 1", ylab="Axis 2",
       par.settings=parset, aspect=1,
       auto.key=list(columns=2))
}
@ %

<<fig9_14>>=
fig9.16 <- function(){
opar <- par(mar=c(2,3,2,5))
plot(aupts, axes=FALSE, ann=FALSE, fg="gray",
     frame.plot=TRUE)
city <- rownames(aupts)
pos <- rep(1,length(city))
pos[city=="Melbourne"]<- 3
pos[city=="Canberra"] <- 4
pos[city=="Sydney"] <- 4
par(xpd=TRUE)
text(aupts, labels=city, pos=pos)
par(opar)
}
@ %

<<fig9_15, eval=TRUE, echo=FALSE>>=
fig9.15A <- function(){
## ---- au-overlay ----
oz::oz()
fitcoords <- DAAG::align2D(lat=aulatlong$latitude,
                      long=aulatlong$longitude,
                      x1=aupts[,1], x2 = aupts[,2],
                      wts=NULL)
x <-with(fitcoords,
         as.vector(rbind(lat, fitlat, rep(NA,length(lat)))))
y <-with(fitcoords,
         as.vector(rbind(long, fitlong, rep(NA,length(long)))))
points(aulatlong, col="red", pch=16, cex=1.5)
lines(x, y, col="gray40", lwd=3)
mtext(side=3, line=0.5, adj=0, "A: From Classical MDS", cex=1.35)
}
fig9.15B <- function(){
## ---- au-sammon ----
oz::oz()
aupts.sam <- sammon(audists, trace=FALSE)$points
wt <- apply(as.matrix(audists), 1,function(x)sum(1/x[x>0]))
fitcoords <- align2D(lat=aulatlong$latitude,
                     long=aulatlong$longitude,
                     x1=aupts.sam[,1], x2 = aupts.sam[,2],
                     wts=wt)
x <-with(fitcoords,
         as.vector(rbind(lat, fitlat, rep(NA,length(lat)))))
y <-with(fitcoords,
         as.vector(rbind(long, fitlong, rep(NA,length(long)))))
points(aulatlong, col="red", pch=16, cex=1.5)
lines(x, y, col="gray40", lwd=3)
mtext(side=3, line=0.5, adj=0, "B: From Sammon Scaling", cex=1.35)
}
fig9.15 <- function(){
    "Run the separate functions fig9.16A() & fig9.16B()"
}
@ %

\newpage

<<figset_9>>=
figset9 <- function(){
    library(MASS)
    library(lattice)
    library(DAAGviz)
    if(!require('DAAG', quietly=TRUE))stop('DAAG must be installed')
    if(!requireNamespace('mgcv', quietly=TRUE))stop('mgcv must be installed')
    if(!requireNamespace('oz', quietly=TRUE))stop('oz must be installed')
  if(!requireNamespace('ggplot2', quietly=TRUE))
    stop('ggplot2 must be installed')
}
@ %

<<do-figset9>>=
figset9()
  ## ---- bronchit-rfac ----
## Now make the outcome variable a factor
bronchit <-
  within(bronchit,
         rfac <- factor(r, labels=c("abs","pres")))
@ %

\begin{figure}
<<ant111b-9_1, echo=FALSE, fig.width=4.5, fig.height=3.5, out.width="0.65\\textwidth", eval=doFigs>>=
fig9.1()
@ %
\caption{Yields from 4 packages of land on each of eight sites on the
  Caribbean island of Antigua. Data are a summarized version of a
  subset of data given in Andrews and Herzberg 1985,
  pp.\~339-353.\label{fig:caribbean}}
\end{figure}

<<getErie>>=
## ---- getErie ----
Erie <- greatLakes[,"Erie"]
@ %

\begin{figure}
<<Erie1-9_2, echo=FALSE, fig.width=5.5, fig.height=2.5, out.width="0.8\\textwidth", eval=doFigs>>=
fig9.2()
@ %
\caption{Level of Lake Erie, in meters.
}\label{fig:erie}
\end{figure}

\begin{figure}
<<lagErie-9_3, echo=FALSE, fig.width=6, fig.height=2.75, out.width="0.98\\textwidth", eval=doFigs>>=
fig9.3A()
@ %
\vspace*{-3pt}

<<acfErie, echo=FALSE, fig.width=5.4, fig.height=2.5, out.width="0.7\\textwidth", eval=doFigs>>=
opar <- par(mar=c(4,4,2.5,0.6), oma=c(0,0,2.5,0))
fig9.3B()
par(opar)
@ %
\caption{Panel A plots Lake Erie levels vs levels at lags 1, 2 and 3
  respectively. Panel B shows a consistent pattern of decreasing
  autocorrelation at successive lags.
}\label{erie-lagplot}
\end{figure}

\begin{figure}
<<gamErie-9_4, echo=FALSE, fig.width=6.5, fig.height=3.25, out.width="0.75\\textwidth", eval=doFigs>>=
fig9.4()
@ %
\caption{GAM smoothing term, fitted to the Lake Erie Data.
    Most of the autocorrelation structure has been
    removed, leaving residuals that are very nearly independent.
  }\label{lh-smoothplot}
\end{figure}

\begin{figure}
<<arima-sim-9_5, fig.width=3.15, fig.height=3.35, echo=FALSE, out.width="0.32\\textwidth", eval=doFigs>>=
fig9.5()
@ %
\caption{The plots are from repeated simulations of an AR1 process with a
  lag 1 correlation of 0.85.  Smooth curves, assuming independent
  errors, have been fitted.}\label{fig:ar1fits}
\end{figure}

\begin{figure}
<<Erie-fcast-9_6, echo=FALSE, fig.width=5.5, fig.height=2.5, out.width="0.8\\textwidth", warning=FALSE, message=FALSE, eval=doFigs>>=
fig9.6()
@ %
\caption{Predictions, 15 years into the future, of lake levels
  (m). The shaded areas give 80\% and 95\% confidence bounds.
}\label{Erie-fcastplot}
\end{figure}

\begin{figure}
<<mdb-gam-9_7, echo=FALSE, warning=FALSE, fig.width=4.5, fig.height=3.0, out.width="0.47\\textwidth", eval=doFigs>>=
fig9.7()
@ %
  \caption{Estimated contributions of the model terms to
    \txtt{mdbRain}, in a GAM model that is the sum of smooth terms in
    \txtt{Year} and \txtt{Rain}. The dashed curves show pointwise
    2-SE limits, for the fitted curve.  Note the downturn
in the trend of \txtt{mdbRain} after about 1985,}\label{fig:mdbRainSM}
\end{figure}

\begin{figure}
<<ar1sims-9_8, echo=FALSE, warning=FALSE, fig.width=3, left=1, fig.height=2.0, out.width="0.32\\textwidth", eval=doFigs>>=
fig9.8()
@ %
\caption{The top left panel shows the autocorrelation plot of the
  residuals from the GAM model \txtt{mdbRain.gam}.  The five remaining
  panels show autocorrelation plots for a series of independent random
  normal numbers.}\label{fig:ar1sims}
\end{figure}

\begin{figure*}[h]
<<au-both-9_9, echo=FALSE, fig.width=4.25, fig.height=3.75, top=2, out.width="0.47\\textwidth", eval=doFigs>>=
fig9.9A()
fig9.9B()
@ %
\caption{Estimated number of events (aircraft crashes) per time
  interval versus time.  In Panel A, the outcome variable was events
  per day, while in Panel B it was events per
  week.\label{fig:planeCrash}}
\end{figure*}

\begin{figure}
<<fgl-scores2D-9_10, echo=FALSE, fig.width=5, fig.height=3.75, out.width="0.65\\textwidth", eval=doFigs>>=
## ---- fgl-lda ----
fgl.lda <- lda(type ~ ., data=fgl)
fig9.10()
@ %
\caption{Visual representation of a classification rule, derived using
  {\em linear discriminant analysis}, for the forensic glass data.  A
  five-dimensional pattern of separation between the categories has
  been collapsed down to two dimensions.  Some categories may therefore
be better distinguished than is evident from this figure.
}
\label{fig:fgl}
\end{figure}

<<load-rpart, warning=FALSE, message=FALSE>>=
library(rpart, quietly=TRUE)
@ %

\begin{figure}
<<treefig-9_11, echo=FALSE, fig.width=3.5, fig.height=4, out.width="0.55\\textwidth", eval=doFigs>>=
fig9.11()
@ %
\caption{Decision tree for predicting whether a miner has
    bronchitis.  Where the condition at a node is satisfied, the left
    branch is taken. Thus, at the initial node, \txtt{cig$<$4.385}
    takes the branch to the left.  In general, unless a random number
    seed is specified, the tree may be different for each different run of the
    calculations.
}\label{fig:tree}
\end{figure}

\begin{figure}
<<rf-x-bronchit, echo=FALSE, fig.width=2, fig.height=1.75, out.width="0.24\\textwidth", eval=doFigs>>=
fig9.12()
@ %
\caption{Each tree is for a different bootstrap sample of
  observations.  The final classification is determined by a random
  vote over all trees.  Where there are $>$ 2 explanatory variables
  (but not here) a different random sample of variables is typically
  used for each different split. The final classification is
  determined by a random vote over all trees.}\label{fig:brontrees}
\end{figure}

\begin{figure}
<<proximity-plot, echo=FALSE, w=3.5, h=3.65, out.width="0.47\\textwidth", eval=doFigs>>=
fig9.13()
@ %
\caption{The plot is designed to represent, in two dimensions, the random
  forest result. It aims to reflect probabilities of group membership
  given by the analysis.  It is not derived by a 'scaling' of the
  feature space.
}\label{fig:rfbronchit}
\end{figure}
%$

<<aupoints, eval=doFigs>>=
## ---- aupoints ----
aupts <- cmdscale(audists)
@ %

\begin{figure}
<<aupoints_9_14, echo=FALSE, fig.width=5.25, fig.height=4.5, rt=3, out.width="0.6\\textwidth", eval=doFigs>>=
fig9.14()
@ %
\caption{Relative locations of Australian cities, derived from road
  map distances, using metric scaling.\label{fig:audists}}
\end{figure}

<<cfPhysical,  eval=TRUE, echo=FALSE>>=
## ---- cfPhysical ----
align2D <- function(lat=aulatlong$latitude,
                    long=aulatlong$longitude,
                    x1=aupts[,1], x2 = aupts[,2],
                    wts=NULL){
    ## Get best fit in space of (latitude, longitude)
    if(is.null(wts))wts <- rep(1,length(x1))
    fitlat <- predict(lm(lat ~ x1+x2, weights=wts))
    fitlong <- predict(lm(long ~ x1+x2, weights=wts))
    list(fitlat = fitlat, fitlong=fitlong, lat=lat, long=long)
}
@ %

\begin{figure*}[h]
<<au-both-9_15, echo=FALSE, fig.width=5.25, fig.height=4.5, top=2, out.width="0.47\\textwidth", eval=doFigs>>=
fig9.15A()
fig9.15B()
@ %
      \caption{In Panel A, Figure \ref{fig:audists} has been rotated and
        scaled, to give a best fit to a map of Australia.  Each city
        moves as shown by the line that radiates out from it.  Panel B
        is the equivalent plot for the Sammon scaling ordination.
\label{fig:aufit}}
\end{figure*}

\end{document}


